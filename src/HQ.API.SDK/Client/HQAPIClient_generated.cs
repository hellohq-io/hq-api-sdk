//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v5.6.6124.29822 (NJsonSchema v4.12.6124.29822) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace HQ.API.SDK
{
    #pragma warning disable // Disable all warnings

    [GeneratedCode("NSwag", "5.6.6124.29822")]
    public partial class HQAPIClient 
    {
        public HQAPIClient() : this("https://api.hqlabs.de") { }
    
        public HQAPIClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Returns all companies</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Company>> CompaniesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return CompaniesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all companies</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Company>> CompaniesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfCompany); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCompany>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Creates a new company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Company> CompaniesV1_PostAsync(Company company = null, string expand = null, string select = null)
        {
            return CompaniesV1_PostAsync(CancellationToken.None, company, expand, select);
        }
    
        /// <summary>Creates a new company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Company> CompaniesV1_PostAsync(CancellationToken cancellationToken, Company company = null, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var stringContent = JsonConvert.SerializeObject(company);
            var content_ = new StringContent(stringContent);
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "201") 
            {
                var result_ = default(Company); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Company>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the company with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Company> CompaniesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return CompaniesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the company with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Company> CompaniesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(Company); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Company>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Updates an existing company</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Company> CompaniesV1_PutByIdAsync(int id, Company company = null, string expand = null, string select = null)
        {
            return CompaniesV1_PutByIdAsync(CancellationToken.None, id, company, expand, select);
        }
    
        /// <summary>Updates an existing company</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Company> CompaniesV1_PutByIdAsync(CancellationToken cancellationToken, int id, Company company = null, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var stringContent = JsonConvert.SerializeObject(company);
            var content_ = new StringContent(stringContent);
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PutAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(Company); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Company>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Deletes a company</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Dictionary<string, object>> CompaniesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return CompaniesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }
    
        /// <summary>Deletes a company</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Dictionary<string, object>> CompaniesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Companies({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
            client_.DefaultRequestHeaders.TryAddWithoutValidation("If-Match", if_Match);
    
            var response_ = await client_.DeleteAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "204") 
            {
                var result_ = default(Dictionary<string, object>); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Dictionary<string, object>>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all company addresses</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CompanyAddress>> CompanyAddressesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return CompanyAddressesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all company addresses</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CompanyAddress>> CompanyAddressesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/CompanyAddresses");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfCompanyAddress); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCompanyAddress>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the company address with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CompanyAddress> CompanyAddressesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return CompanyAddressesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the company address with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CompanyAddress> CompanyAddressesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/CompanyAddresses({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(CompanyAddress); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CompanyAddress>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all company types</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CompanyType>> CompanyTypesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return CompanyTypesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all company types</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CompanyType>> CompanyTypesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/CompanyTypes");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfCompanyType); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCompanyType>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the company type with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CompanyType> CompanyTypesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return CompanyTypesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the company type with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CompanyType> CompanyTypesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/CompanyTypes({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(CompanyType); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CompanyType>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Deletes a company type</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Dictionary<string, object>> CompanyTypesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return CompanyTypesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }
    
        /// <summary>Deletes a company type</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Dictionary<string, object>> CompanyTypesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/CompanyTypes({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
            client_.DefaultRequestHeaders.TryAddWithoutValidation("If-Match", if_Match);
    
            var response_ = await client_.DeleteAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "204") 
            {
                var result_ = default(Dictionary<string, object>); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Dictionary<string, object>>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all project roles</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ContactPerson>> ContactPersonsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ContactPersonsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all project roles</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ContactPerson>> ContactPersonsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ContactPersons");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfContactPerson); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfContactPerson>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the contact person with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ContactPerson> ContactPersonsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ContactPersonsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the contact person with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ContactPerson> ContactPersonsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ContactPersons({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ContactPerson); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ContactPerson>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all internal companies</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<InternalCompany>> InternalCompaniesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return InternalCompaniesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all internal companies</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<InternalCompany>> InternalCompaniesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/InternalCompanies");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfInternalCompany); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfInternalCompany>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the internal company with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<InternalCompany> InternalCompaniesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return InternalCompaniesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the internal company with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<InternalCompany> InternalCompaniesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/InternalCompanies({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(InternalCompany); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<InternalCompany>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all customfield definitions</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CustomFieldDefinition>> CustomFieldDefinitionsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return CustomFieldDefinitionsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all customfield definitions</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CustomFieldDefinition>> CustomFieldDefinitionsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/CustomFieldDefinitions");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfCustomFieldDefinition); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCustomFieldDefinition>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the custom field definition with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomFieldDefinition> CustomFieldDefinitionsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return CustomFieldDefinitionsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the custom field definition with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomFieldDefinition> CustomFieldDefinitionsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/CustomFieldDefinitions({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(CustomFieldDefinition); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomFieldDefinition>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all document conditions</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<DocumentCondition>> DocumentConditionsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return DocumentConditionsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all document conditions</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<DocumentCondition>> DocumentConditionsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/DocumentConditions");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfDocumentCondition); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfDocumentCondition>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns document conditions with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<DocumentCondition> DocumentConditionsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return DocumentConditionsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns document conditions with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<DocumentCondition> DocumentConditionsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/DocumentConditions({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(DocumentCondition); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<DocumentCondition>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all document templates</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<DocumentTemplate>> DocumentTemplatesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return DocumentTemplatesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all document templates</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<DocumentTemplate>> DocumentTemplatesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/DocumentTemplates");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfDocumentTemplate); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfDocumentTemplate>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns document template with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CompanyType> DocumentTemplatesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return DocumentTemplatesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns document template with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CompanyType> DocumentTemplatesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/DocumentTemplates({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(CompanyType); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CompanyType>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the invoice with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Invoice> InvoicesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return InvoicesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the invoice with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Invoice> InvoicesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(Invoice); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Invoice>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all quotations</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Quotation>> QuotationsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return QuotationsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all quotations</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Quotation>> QuotationsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfQuotation); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfQuotation>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the quotation with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Quotation> QuotationsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return QuotationsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the quotation with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Quotation> QuotationsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(Quotation); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Quotation>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all leads</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Lead>> LeadsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return LeadsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all leads</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Lead>> LeadsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Leads");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfLead); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfLead>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the lead with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Lead> LeadsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return LeadsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the lead with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Lead> LeadsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Leads({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(Lead); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Lead>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all project roles</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ProjectRole>> ProjectRolesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ProjectRolesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all project roles</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ProjectRole>> ProjectRolesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectRoles");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfProjectRole); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfProjectRole>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the project role with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ProjectRole> ProjectRolesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectRolesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the project role with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ProjectRole> ProjectRolesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectRoles({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ProjectRole); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ProjectRole>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Deletes a project role</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Dictionary<string, object>> ProjectRolesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return ProjectRolesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }
    
        /// <summary>Deletes a project role</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Dictionary<string, object>> ProjectRolesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/ProjectRoles({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
            client_.DefaultRequestHeaders.TryAddWithoutValidation("If-Match", if_Match);
    
            var response_ = await client_.DeleteAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "204") 
            {
                var result_ = default(Dictionary<string, object>); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Dictionary<string, object>>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all project status</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ProjectStatus>> ProjectStatusV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ProjectStatusV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all project status</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ProjectStatus>> ProjectStatusV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectStatus");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfProjectStatus); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfProjectStatus>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the project status with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ProjectStatus> ProjectStatusV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectStatusV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the project status with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ProjectStatus> ProjectStatusV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectStatus({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ProjectStatus); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ProjectStatus>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Deletes a project status</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Dictionary<string, object>> ProjectStatusV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return ProjectStatusV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }
    
        /// <summary>Deletes a project status</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Dictionary<string, object>> ProjectStatusV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/ProjectStatus({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
            client_.DefaultRequestHeaders.TryAddWithoutValidation("If-Match", if_Match);
    
            var response_ = await client_.DeleteAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "204") 
            {
                var result_ = default(Dictionary<string, object>); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Dictionary<string, object>>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the EntitySet ProjectTasks</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Task>> ProjectTasksV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ProjectTasksV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns the EntitySet ProjectTasks</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Task>> ProjectTasksV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfTask); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfTask>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the entity with the key from ProjectTasks</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Task> ProjectTasksV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectTasksV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the entity with the key from ProjectTasks</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Task> ProjectTasksV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(Task); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Task>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all project templates</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ProjectTemplate>> ProjectTemplatesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ProjectTemplatesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all project templates</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ProjectTemplate>> ProjectTemplatesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTemplates");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfProjectTemplate); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfProjectTemplate>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the project status with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ProjectTemplate> ProjectTemplatesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectTemplatesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the project status with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ProjectTemplate> ProjectTemplatesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTemplates({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ProjectTemplate); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ProjectTemplate>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all projects</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Project>> ProjectsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ProjectsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all projects</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Project>> ProjectsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfProject); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfProject>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the project with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Project> ProjectsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the project with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Project> ProjectsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(Project); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Project>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the EntitySet TaskAssignments</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<TaskAssignment>> TaskAssignmentsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return TaskAssignmentsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns the EntitySet TaskAssignments</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<TaskAssignment>> TaskAssignmentsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/TaskAssignments");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfTaskAssignment); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfTaskAssignment>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the entity with the key from TaskAssignments</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<TaskAssignment> TaskAssignmentsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return TaskAssignmentsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the entity with the key from TaskAssignments</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<TaskAssignment> TaskAssignmentsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/TaskAssignments({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(TaskAssignment); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<TaskAssignment>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all absences</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<UserAbsence>> UserAbsencesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return UserAbsencesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all absences</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<UserAbsence>> UserAbsencesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/UserAbsences");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfUserAbsence); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfUserAbsence>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Creates a new absence</summary>
        /// <param name="userAbsence">The entity to post</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserAbsence> UserAbsencesV1_PostAsync(UserAbsence userAbsence = null, string expand = null, string select = null)
        {
            return UserAbsencesV1_PostAsync(CancellationToken.None, userAbsence, expand, select);
        }
    
        /// <summary>Creates a new absence</summary>
        /// <param name="userAbsence">The entity to post</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserAbsence> UserAbsencesV1_PostAsync(CancellationToken cancellationToken, UserAbsence userAbsence = null, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/UserAbsences");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var stringContent = JsonConvert.SerializeObject(userAbsence);
            var content_ = new StringContent(stringContent);
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "201") 
            {
                var result_ = default(UserAbsence); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<UserAbsence>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the absence with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserAbsence> UserAbsencesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return UserAbsencesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the absence with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserAbsence> UserAbsencesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/UserAbsences({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(UserAbsence); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<UserAbsence>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Deletes an absence</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Dictionary<string, object>> UserAbsencesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return UserAbsencesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }
    
        /// <summary>Deletes an absence</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Dictionary<string, object>> UserAbsencesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/UserAbsences({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
            client_.DefaultRequestHeaders.TryAddWithoutValidation("If-Match", if_Match);
    
            var response_ = await client_.DeleteAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(Dictionary<string, object>); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Dictionary<string, object>>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all user reportings</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<UserReporting>> UserReportingsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return UserReportingsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all user reportings</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<UserReporting>> UserReportingsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/UserReportings");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfUserReporting); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfUserReporting>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the user reporting with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserReporting> UserReportingsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return UserReportingsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the user reporting with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserReporting> UserReportingsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/UserReportings({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(UserReporting); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<UserReporting>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Deletes a user reporting</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Dictionary<string, object>> UserReportingsV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return UserReportingsV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }
    
        /// <summary>Deletes a user reporting</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Dictionary<string, object>> UserReportingsV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/UserReportings({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
            client_.DefaultRequestHeaders.TryAddWithoutValidation("If-Match", if_Match);
    
            var response_ = await client_.DeleteAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "204") 
            {
                var result_ = default(Dictionary<string, object>); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Dictionary<string, object>>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns all users</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<User>> UsersV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return UsersV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }
    
        /// <summary>Returns all users</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<User>> UsersV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users");
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));
    
            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));
    
            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(ODataResponseOfListOfUser); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfUser>(value); 
    				}
                    return result_.Value; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
        /// <summary>Returns the user with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<User> UsersV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return UsersV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }
    
        /// <summary>Returns the user with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<User> UsersV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));
    
            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));
    
            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));
    
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }
    
            if (status_ == "200") 
            {
                var result_ = default(User); 
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<User>(value); 
    				}
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + "): " + value, status_, responseData_, null);
        }
    
    }
    
    

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfCompany : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<Company> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Company> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfCompany FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfCompany>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>A company represents any entity you do business with, for example a customer, a supplier or a partner.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class Company : INotifyPropertyChanged
    { 
        private string _name; 
        private string _industrialSector; 
        private string _description; 
        private int? _debitorNumber; 
        private int? _creditorNumber; 
        private CompanyAddress _defaultAddress; 
        private ObservableCollection<CustomField> _customFields; 
        private ObservableCollection<CompanyTypeOfCompany> _companyTypes; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of the company</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The company's industrial sector</summary>
        [JsonProperty("IndustrialSector", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string IndustrialSector
        {
            get { return _industrialSector; }
            set 
            {
                if (_industrialSector != value)
                {
                    _industrialSector = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A longer description of the company</summary>
        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The company's debitor number</summary>
        [JsonProperty("DebitorNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DebitorNumber
        {
            get { return _debitorNumber; }
            set 
            {
                if (_debitorNumber != value)
                {
                    _debitorNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The company's creditor number</summary>
        [JsonProperty("CreditorNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreditorNumber
        {
            get { return _creditorNumber; }
            set 
            {
                if (_creditorNumber != value)
                {
                    _creditorNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The default address of this company</summary>
        [JsonProperty("DefaultAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress DefaultAddress
        {
            get { return _defaultAddress; }
            set 
            {
                if (_defaultAddress != value)
                {
                    _defaultAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The customfields associated with this company</summary>
        [JsonProperty("CustomFields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomField> CustomFields
        {
            get { return _customFields; }
            set 
            {
                if (_customFields != value)
                {
                    _customFields = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The company types associated with this company</summary>
        [JsonProperty("CompanyTypes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CompanyTypeOfCompany> CompanyTypes
        {
            get { return _companyTypes; }
            set 
            {
                if (_companyTypes != value)
                {
                    _companyTypes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Company FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Company>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class CompanyAddress : INotifyPropertyChanged
    { 
        private string _city; 
        private string _street; 
        private string _houseNumber; 
        private string _zipCode; 
        private string _addressLine2; 
        private string _description; 
        private string _country; 
        private string _phone; 
        private string _fax; 
        private string _email; 
        private string _website; 
        private bool? _isStandard; 
        private CompanyAddressDefaultForDocumentType? _defaultForDocumentType; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The city of this address</summary>
        [JsonProperty("City", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string City
        {
            get { return _city; }
            set 
            {
                if (_city != value)
                {
                    _city = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The street name of this address</summary>
        [JsonProperty("Street", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Street
        {
            get { return _street; }
            set 
            {
                if (_street != value)
                {
                    _street = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The house number of this address</summary>
        [JsonProperty("HouseNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HouseNumber
        {
            get { return _houseNumber; }
            set 
            {
                if (_houseNumber != value)
                {
                    _houseNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The ZIP or Postal Code of this address</summary>
        [JsonProperty("ZipCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ZipCode
        {
            get { return _zipCode; }
            set 
            {
                if (_zipCode != value)
                {
                    _zipCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The secondary address line, c/o details, etc.</summary>
        [JsonProperty("AddressLine2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddressLine2
        {
            get { return _addressLine2; }
            set 
            {
                if (_addressLine2 != value)
                {
                    _addressLine2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The description of this address</summary>
        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The country of this address</summary>
        [JsonProperty("Country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country
        {
            get { return _country; }
            set 
            {
                if (_country != value)
                {
                    _country = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The phone number of this address</summary>
        [JsonProperty("Phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Phone
        {
            get { return _phone; }
            set 
            {
                if (_phone != value)
                {
                    _phone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The fax number of this address</summary>
        [JsonProperty("Fax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Fax
        {
            get { return _fax; }
            set 
            {
                if (_fax != value)
                {
                    _fax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The email address of this address</summary>
        [JsonProperty("Email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set 
            {
                if (_email != value)
                {
                    _email = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The website of this address</summary>
        [JsonProperty("Website", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Website
        {
            get { return _website; }
            set 
            {
                if (_website != value)
                {
                    _website = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether this address is the standard address of a company</summary>
        [JsonProperty("IsStandard", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsStandard
        {
            get { return _isStandard; }
            set 
            {
                if (_isStandard != value)
                {
                    _isStandard = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The document type this address should be used as a standard for</summary>
        [JsonProperty("DefaultForDocumentType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public CompanyAddressDefaultForDocumentType? DefaultForDocumentType
        {
            get { return _defaultForDocumentType; }
            set 
            {
                if (_defaultForDocumentType != value)
                {
                    _defaultForDocumentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static CompanyAddress FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CompanyAddress>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class CustomField : INotifyPropertyChanged
    { 
        private string _name; 
        private string _value; 
        private int? _customFieldDefinitionId; 
        private CustomFieldType? _type; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of this customfield</summary>
        [JsonProperty("Name", Required = Required.Always)]
        [Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The value of this customfield</summary>
        [JsonProperty("Value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the customfield definition</summary>
        [JsonProperty("CustomFieldDefinitionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CustomFieldDefinitionId
        {
            get { return _customFieldDefinitionId; }
            set 
            {
                if (_customFieldDefinitionId != value)
                {
                    _customFieldDefinitionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type of this customfield</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public CustomFieldType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static CustomField FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CustomField>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class CompanyTypeOfCompany : INotifyPropertyChanged
    { 
        private string _name; 
        private string _number; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of this company type</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static CompanyTypeOfCompany FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CompanyTypeOfCompany>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class Object : INotifyPropertyChanged
    {
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Object FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Object>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfCompanyAddress : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<CompanyAddress> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CompanyAddress> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfCompanyAddress FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfCompanyAddress>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfCompanyType : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<CompanyType> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CompanyType> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfCompanyType FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfCompanyType>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class CompanyType : INotifyPropertyChanged
    { 
        private string _name; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of this company type</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static CompanyType FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CompanyType>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfContactPerson : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<ContactPerson> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ContactPerson> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfContactPerson FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfContactPerson>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ContactPerson : INotifyPropertyChanged
    { 
        private string _firstName; 
        private string _lastName; 
        private string _position; 
        private int? _companyId; 
        private string _phoneLandline; 
        private string _phoneMobile; 
        private string _salutation; 
        private string _title; 
        private string _language; 
        private int? _defaultAddressId; 
        private CompanyAddress _defaultAddress; 
        private ObservableCollection<CustomField> _customFields; 
        private Company _company; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of this company type</summary>
        [JsonProperty("FirstName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FirstName
        {
            get { return _firstName; }
            set 
            {
                if (_firstName != value)
                {
                    _firstName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("LastName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LastName
        {
            get { return _lastName; }
            set 
            {
                if (_lastName != value)
                {
                    _lastName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Position", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Position
        {
            get { return _position; }
            set 
            {
                if (_position != value)
                {
                    _position = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId
        {
            get { return _companyId; }
            set 
            {
                if (_companyId != value)
                {
                    _companyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("PhoneLandline", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneLandline
        {
            get { return _phoneLandline; }
            set 
            {
                if (_phoneLandline != value)
                {
                    _phoneLandline = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("PhoneMobile", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneMobile
        {
            get { return _phoneMobile; }
            set 
            {
                if (_phoneMobile != value)
                {
                    _phoneMobile = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Salutation", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Salutation
        {
            get { return _salutation; }
            set 
            {
                if (_salutation != value)
                {
                    _salutation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("DefaultAddressId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DefaultAddressId
        {
            get { return _defaultAddressId; }
            set 
            {
                if (_defaultAddressId != value)
                {
                    _defaultAddressId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The default address of this contact person</summary>
        [JsonProperty("DefaultAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress DefaultAddress
        {
            get { return _defaultAddress; }
            set 
            {
                if (_defaultAddress != value)
                {
                    _defaultAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The customfields associated with this contact person</summary>
        [JsonProperty("CustomFields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomField> CustomFields
        {
            get { return _customFields; }
            set 
            {
                if (_customFields != value)
                {
                    _customFields = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Company Company
        {
            get { return _company; }
            set 
            {
                if (_company != value)
                {
                    _company = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ContactPerson FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ContactPerson>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfInternalCompany : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<InternalCompany> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<InternalCompany> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfInternalCompany FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfInternalCompany>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Represents internal companies that can have different document templates and tax information.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class InternalCompany : INotifyPropertyChanged
    { 
        private string _name; 
        private string _taxNumber; 
        private string _taxId; 
        private bool? _isTaxExempt; 
        private CompanyAddress _defaultAddress; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>Name of the company</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Tax number of company</summary>
        [JsonProperty("TaxNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TaxNumber
        {
            get { return _taxNumber; }
            set 
            {
                if (_taxNumber != value)
                {
                    _taxNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Tax id of company</summary>
        [JsonProperty("TaxId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TaxId
        {
            get { return _taxId; }
            set 
            {
                if (_taxId != value)
                {
                    _taxId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the company is liable to pay taxes</summary>
        [JsonProperty("IsTaxExempt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsTaxExempt
        {
            get { return _isTaxExempt; }
            set 
            {
                if (_isTaxExempt != value)
                {
                    _isTaxExempt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Default address of company</summary>
        [JsonProperty("DefaultAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress DefaultAddress
        {
            get { return _defaultAddress; }
            set 
            {
                if (_defaultAddress != value)
                {
                    _defaultAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static InternalCompany FromJson(string data)
        {
            return JsonConvert.DeserializeObject<InternalCompany>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class LoginConfig : INotifyPropertyChanged
    { 
        private string _hostname; 
        private string _displayName; 
        private string _displayImageUrl; 
        private int? _customerId;
    
        [JsonProperty("Hostname", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Hostname
        {
            get { return _hostname; }
            set 
            {
                if (_hostname != value)
                {
                    _hostname = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("DisplayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName
        {
            get { return _displayName; }
            set 
            {
                if (_displayName != value)
                {
                    _displayName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("DisplayImageUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayImageUrl
        {
            get { return _displayImageUrl; }
            set 
            {
                if (_displayImageUrl != value)
                {
                    _displayImageUrl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("CustomerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CustomerId
        {
            get { return _customerId; }
            set 
            {
                if (_customerId != value)
                {
                    _customerId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static LoginConfig FromJson(string data)
        {
            return JsonConvert.DeserializeObject<LoginConfig>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfCustomFieldDefinition : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<CustomFieldDefinition> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomFieldDefinition> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfCustomFieldDefinition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfCustomFieldDefinition>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class CustomFieldDefinition : INotifyPropertyChanged
    { 
        private string _name; 
        private string _description; 
        private int? _order; 
        private int? _rightLevelRead; 
        private int? _rightLevelWrite; 
        private bool? _isRequired; 
        private string _typeText; 
        private CustomFieldDefinitionCategory? _category; 
        private ObservableCollection<CustomFieldOption> _options; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of this customfield definition</summary>
        [JsonProperty("Name", Required = Required.Always)]
        [Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The description of this customfield definition</summary>
        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The display order of this customfield definition</summary>
        [JsonProperty("Order", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Order
        {
            get { return _order; }
            set 
            {
                if (_order != value)
                {
                    _order = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The required right level to read this customfield</summary>
        [JsonProperty("RightLevelRead", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? RightLevelRead
        {
            get { return _rightLevelRead; }
            set 
            {
                if (_rightLevelRead != value)
                {
                    _rightLevelRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The required right level to write this customfield</summary>
        [JsonProperty("RightLevelWrite", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? RightLevelWrite
        {
            get { return _rightLevelWrite; }
            set 
            {
                if (_rightLevelWrite != value)
                {
                    _rightLevelWrite = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether this is a required field</summary>
        [JsonProperty("IsRequired", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRequired
        {
            get { return _isRequired; }
            set 
            {
                if (_isRequired != value)
                {
                    _isRequired = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The textual representation of the type</summary>
        [JsonProperty("TypeText", Required = Required.Always)]
        [Required]
        public string TypeText
        {
            get { return _typeText; }
            set 
            {
                if (_typeText != value)
                {
                    _typeText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The textual representation of the category</summary>
        [JsonProperty("Category", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public CustomFieldDefinitionCategory? Category
        {
            get { return _category; }
            set 
            {
                if (_category != value)
                {
                    _category = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A list of selectable options for customfields of multi-select types</summary>
        [JsonProperty("Options", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomFieldOption> Options
        {
            get { return _options; }
            set 
            {
                if (_options != value)
                {
                    _options = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static CustomFieldDefinition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CustomFieldDefinition>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class CustomFieldOption : INotifyPropertyChanged
    { 
        private string _optionValue; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The customfield option</summary>
        [JsonProperty("OptionValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OptionValue
        {
            get { return _optionValue; }
            set 
            {
                if (_optionValue != value)
                {
                    _optionValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static CustomFieldOption FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CustomFieldOption>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfDocumentCondition : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<DocumentCondition> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentCondition> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfDocumentCondition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfDocumentCondition>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class DocumentCondition : INotifyPropertyChanged
    { 
        private string _name; 
        private string _text; 
        private string _displayText; 
        private int? _dueInDays; 
        private DocumentConditionType? _type; 
        private int? _warningDays; 
        private int? _reminderDays; 
        private string _language; 
        private ObservableCollection<DocumentEarlyPayment> _documentEarlyPayments; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>Name of document condition</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Text of condition</summary>
        [JsonProperty("Text", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Text
        {
            get { return _text; }
            set 
            {
                if (_text != value)
                {
                    _text = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The text with replaced due days</summary>
        [JsonProperty("DisplayText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayText
        {
            get { return _displayText; }
            set 
            {
                if (_displayText != value)
                {
                    _displayText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Payment in days</summary>
        [JsonProperty("DueInDays", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DueInDays
        {
            get { return _dueInDays; }
            set 
            {
                if (_dueInDays != value)
                {
                    _dueInDays = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Type of condition</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public DocumentConditionType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Warning: payment in days</summary>
        [JsonProperty("WarningDays", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? WarningDays
        {
            get { return _warningDays; }
            set 
            {
                if (_warningDays != value)
                {
                    _warningDays = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Reminder: payment in days</summary>
        [JsonProperty("ReminderDays", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ReminderDays
        {
            get { return _reminderDays; }
            set 
            {
                if (_reminderDays != value)
                {
                    _reminderDays = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Language of condition, formatted to iso code</summary>
        [JsonProperty("Language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("DocumentEarlyPayments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentEarlyPayment> DocumentEarlyPayments
        {
            get { return _documentEarlyPayments; }
            set 
            {
                if (_documentEarlyPayments != value)
                {
                    _documentEarlyPayments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static DocumentCondition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentCondition>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class DocumentEarlyPayment : INotifyPropertyChanged
    { 
        private double? _cashDiscount; 
        private int? _paymentPeriod; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>Value of idscount</summary>
        [JsonProperty("CashDiscount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? CashDiscount
        {
            get { return _cashDiscount; }
            set 
            {
                if (_cashDiscount != value)
                {
                    _cashDiscount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Time to discount is valid</summary>
        [JsonProperty("PaymentPeriod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? PaymentPeriod
        {
            get { return _paymentPeriod; }
            set 
            {
                if (_paymentPeriod != value)
                {
                    _paymentPeriod = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static DocumentEarlyPayment FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentEarlyPayment>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfDocumentTemplate : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<DocumentTemplate> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentTemplate> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfDocumentTemplate FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfDocumentTemplate>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class DocumentTemplate : INotifyPropertyChanged
    { 
        private string _name; 
        private DocumentTemplateDocumentType? _documentType; 
        private string _language; 
        private int? _internalCompanyId; 
        private InternalCompany _internalCompany; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>Name of the document template</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Document type the template is for</summary>
        [JsonProperty("DocumentType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public DocumentTemplateDocumentType? DocumentType
        {
            get { return _documentType; }
            set 
            {
                if (_documentType != value)
                {
                    _documentType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Language of template</summary>
        [JsonProperty("Language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the internal company this document template belongs to</summary>
        [JsonProperty("InternalCompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InternalCompanyId
        {
            get { return _internalCompanyId; }
            set 
            {
                if (_internalCompanyId != value)
                {
                    _internalCompanyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The internal company this document template belongs to</summary>
        [JsonProperty("InternalCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public InternalCompany InternalCompany
        {
            get { return _internalCompany; }
            set 
            {
                if (_internalCompany != value)
                {
                    _internalCompany = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static DocumentTemplate FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentTemplate>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfInvoice : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<Invoice> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Invoice> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfInvoice FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfInvoice>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Invoices are outgoing invoices, cancellations or advance payments</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class Invoice : INotifyPropertyChanged
    { 
        private DateTime? _invoiceDate; 
        private DateTime? _dueDate; 
        private DateTime? _bookingDate; 
        private InvoiceStatus? _status; 
        private ObservableCollection<DocumentPosition> _positions; 
        private string _currency; 
        private double? _exchangeRate; 
        private DateTime? _deliveryDate; 
        private int? _paymentConditionId; 
        private int? _deliveryConditionId; 
        private DocumentCondition _paymentCondition; 
        private DocumentCondition _deliveryCondition; 
        private InvoiceDiscountType? _discountType; 
        private double? _discount; 
        private double? _margin; 
        private InvoiceTaxOption? _taxOption; 
        private InvoiceServiceOption? _serviceOption; 
        private decimal? _netTotal; 
        private decimal? _grossTotal; 
        private decimal? _vatTotal; 
        private decimal? _paidTotal; 
        private InvoiceType? _type; 
        private string _typeText; 
        private string _addressText; 
        private int? _companyAddressId; 
        private CompanyAddress _companyAddress; 
        private string _subject; 
        private string _header; 
        private string _footer; 
        private int? _documentTemplateId; 
        private string _number; 
        private int? _contactPersonId; 
        private ContactPerson _contactPerson; 
        private int? _companyId; 
        private Company _company; 
        private int? _internalContactPersonId; 
        private User _internalContactPerson; 
        private int? _leadId; 
        private Lead _lead; 
        private string _syncId; 
        private int? _projectId; 
        private Project _project; 
        private string _note; 
        private string _language; 
        private HQFile _documentFile; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The date of this invoice</summary>
        [JsonProperty("InvoiceDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? InvoiceDate
        {
            get { return _invoiceDate; }
            set 
            {
                if (_invoiceDate != value)
                {
                    _invoiceDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The payment due date of this invoice</summary>
        [JsonProperty("DueDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? DueDate
        {
            get { return _dueDate; }
            set 
            {
                if (_dueDate != value)
                {
                    _dueDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date this invoice was booked</summary>
        [JsonProperty("BookingDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? BookingDate
        {
            get { return _bookingDate; }
            set 
            {
                if (_bookingDate != value)
                {
                    _bookingDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The status of this invoice</summary>
        [JsonProperty("Status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public InvoiceStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The positions of this invoice</summary>
        [JsonProperty("Positions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentPosition> Positions
        {
            get { return _positions; }
            set 
            {
                if (_positions != value)
                {
                    _positions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The currency of this document.</summary>
        [JsonProperty("Currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exchange rate to Euro.
        ///             While the document is in a draft state, the exchange rate reflects the current exchange rate of ECB.
        ///             After the document has been sent, the exchange rate at that date will be returned.</summary>
        [JsonProperty("ExchangeRate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ExchangeRate
        {
            get { return _exchangeRate; }
            set 
            {
                if (_exchangeRate != value)
                {
                    _exchangeRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date of the delivery of the products or services.</summary>
        [JsonProperty("DeliveryDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? DeliveryDate
        {
            get { return _deliveryDate; }
            set 
            {
                if (_deliveryDate != value)
                {
                    _deliveryDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Id of the payment condition.</summary>
        [JsonProperty("PaymentConditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? PaymentConditionId
        {
            get { return _paymentConditionId; }
            set 
            {
                if (_paymentConditionId != value)
                {
                    _paymentConditionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Id of the delivery condition.</summary>
        [JsonProperty("DeliveryConditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DeliveryConditionId
        {
            get { return _deliveryConditionId; }
            set 
            {
                if (_deliveryConditionId != value)
                {
                    _deliveryConditionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("PaymentCondition", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DocumentCondition PaymentCondition
        {
            get { return _paymentCondition; }
            set 
            {
                if (_paymentCondition != value)
                {
                    _paymentCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("DeliveryCondition", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DocumentCondition DeliveryCondition
        {
            get { return _deliveryCondition; }
            set 
            {
                if (_deliveryCondition != value)
                {
                    _deliveryCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the document discount is specified as a total or a percentage.</summary>
        [JsonProperty("DiscountType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public InvoiceDiscountType? DiscountType
        {
            get { return _discountType; }
            set 
            {
                if (_discountType != value)
                {
                    _discountType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A discount that should be applied to the total sum.
        ///             This is either a total or a percantage value, depending on the DiscountType.</summary>
        [JsonProperty("Discount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Discount
        {
            get { return _discount; }
            set 
            {
                if (_discount != value)
                {
                    _discount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A margin that should be applied to the total sum.
        ///             This margin will be equally distributed over all positions.</summary>
        [JsonProperty("Margin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Margin
        {
            get { return _margin; }
            set 
            {
                if (_margin != value)
                {
                    _margin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The tax rule that should apply to this document.
        ///             VAT is most commonly used for documents within the same country.</summary>
        [JsonProperty("TaxOption", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public InvoiceTaxOption? TaxOption
        {
            get { return _taxOption; }
            set 
            {
                if (_taxOption != value)
                {
                    _taxOption = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the positions in this document are a delivery or any other kind of service.</summary>
        [JsonProperty("ServiceOption", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public InvoiceServiceOption? ServiceOption
        {
            get { return _serviceOption; }
            set 
            {
                if (_serviceOption != value)
                {
                    _serviceOption = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The net sum of the document. This is calculated considering all positions, position and document margin as well as position and document discount.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("NetTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? NetTotal
        {
            get { return _netTotal; }
            set 
            {
                if (_netTotal != value)
                {
                    _netTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The gross sum of the document. This is calculated considering all positions, position taxes, position and document margin as well as position and document discount.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("GrossTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? GrossTotal
        {
            get { return _grossTotal; }
            set 
            {
                if (_grossTotal != value)
                {
                    _grossTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The sum of the position VAT.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("VatTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? VatTotal
        {
            get { return _vatTotal; }
            set 
            {
                if (_vatTotal != value)
                {
                    _vatTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The sum of received payments for this document.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("PaidTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? PaidTotal
        {
            get { return _paidTotal; }
            set 
            {
                if (_paidTotal != value)
                {
                    _paidTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type of the document</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public InvoiceType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The textual representation of the type</summary>
        [JsonProperty("TypeText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TypeText
        {
            get { return _typeText; }
            set 
            {
                if (_typeText != value)
                {
                    _typeText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The receiver address text of the document</summary>
        [JsonProperty("AddressText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddressText
        {
            get { return _addressText; }
            set 
            {
                if (_addressText != value)
                {
                    _addressText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the postal address of the receiving company</summary>
        [JsonProperty("CompanyAddressId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyAddressId
        {
            get { return _companyAddressId; }
            set 
            {
                if (_companyAddressId != value)
                {
                    _companyAddressId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The postal address of the receiving company</summary>
        [JsonProperty("CompanyAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress CompanyAddress
        {
            get { return _companyAddress; }
            set 
            {
                if (_companyAddress != value)
                {
                    _companyAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The subject of the document</summary>
        [JsonProperty("Subject", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Subject
        {
            get { return _subject; }
            set 
            {
                if (_subject != value)
                {
                    _subject = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The header text on the document</summary>
        [JsonProperty("Header", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Header
        {
            get { return _header; }
            set 
            {
                if (_header != value)
                {
                    _header = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The footer text of on the document</summary>
        [JsonProperty("Footer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Footer
        {
            get { return _footer; }
            set 
            {
                if (_footer != value)
                {
                    _footer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The document template id</summary>
        [JsonProperty("DocumentTemplateId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DocumentTemplateId
        {
            get { return _documentTemplateId; }
            set 
            {
                if (_documentTemplateId != value)
                {
                    _documentTemplateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The number of the document, auto generated by hq</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the responsible at the receiving company</summary>
        [JsonProperty("ContactPersonId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ContactPersonId
        {
            get { return _contactPersonId; }
            set 
            {
                if (_contactPersonId != value)
                {
                    _contactPersonId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The responsible at the receiving company</summary>
        [JsonProperty("ContactPerson", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ContactPerson ContactPerson
        {
            get { return _contactPerson; }
            set 
            {
                if (_contactPerson != value)
                {
                    _contactPerson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the company which is the receiver of the document</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId
        {
            get { return _companyId; }
            set 
            {
                if (_companyId != value)
                {
                    _companyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The company which is the receiver of the document</summary>
        [JsonProperty("Company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Company Company
        {
            get { return _company; }
            set 
            {
                if (_company != value)
                {
                    _company = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the contacted person responsible for this document</summary>
        [JsonProperty("InternalContactPersonId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InternalContactPersonId
        {
            get { return _internalContactPersonId; }
            set 
            {
                if (_internalContactPersonId != value)
                {
                    _internalContactPersonId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The hq user repsonsible for this document</summary>
        [JsonProperty("InternalContactPerson", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User InternalContactPerson
        {
            get { return _internalContactPerson; }
            set 
            {
                if (_internalContactPerson != value)
                {
                    _internalContactPerson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the lead related to the document</summary>
        [JsonProperty("LeadId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LeadId
        {
            get { return _leadId; }
            set 
            {
                if (_leadId != value)
                {
                    _leadId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The lead related to the document</summary>
        [JsonProperty("Lead", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Lead Lead
        {
            get { return _lead; }
            set 
            {
                if (_lead != value)
                {
                    _lead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A unique identifier for other sync clients</summary>
        [JsonProperty("SyncId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SyncId
        {
            get { return _syncId; }
            set 
            {
                if (_syncId != value)
                {
                    _syncId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the id of the project related to the document</summary>
        [JsonProperty("ProjectId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectId
        {
            get { return _projectId; }
            set 
            {
                if (_projectId != value)
                {
                    _projectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The project related to the document</summary>
        [JsonProperty("Project", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Project Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The comment on the document</summary>
        [JsonProperty("Note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The language of the document as ISO Code ("DE")</summary>
        [JsonProperty("Language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The generated pdf file</summary>
        [JsonProperty("DocumentFile", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public HQFile DocumentFile
        {
            get { return _documentFile; }
            set 
            {
                if (_documentFile != value)
                {
                    _documentFile = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Invoice FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Invoice>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class DocumentPosition : INotifyPropertyChanged
    { 
        private bool? _isOptional; 
        private string _text; 
        private string _unit; 
        private double? _tax; 
        private decimal? _price; 
        private double? _discount; 
        private double? _margin; 
        private DocumentPositionType? _type; 
        private int? _order; 
        private int? _articleId; 
        private Article _article; 
        private double? _amount; 
        private string _bookingAccount; 
        private string _costCenter1; 
        private string _costCenter2; 
        private bool? _excludeFromEarlyPayment; 
        private double? _totalPrice; 
        private double? _totalUnitPrice; 
        private double? _totalVat; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>Whether this position is optional. Only valid in quotations.</summary>
        [JsonProperty("IsOptional", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsOptional
        {
            get { return _isOptional; }
            set 
            {
                if (_isOptional != value)
                {
                    _isOptional = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The position text, as HTML</summary>
        [JsonProperty("Text", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Text
        {
            get { return _text; }
            set 
            {
                if (_text != value)
                {
                    _text = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The position unit</summary>
        [JsonProperty("Unit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Unit
        {
            get { return _unit; }
            set 
            {
                if (_unit != value)
                {
                    _unit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The position tax rate, for example 19%</summary>
        [JsonProperty("Tax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Tax
        {
            get { return _tax; }
            set 
            {
                if (_tax != value)
                {
                    _tax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The position price, in the currency of the document</summary>
        [JsonProperty("Price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The percentage discount that should be applied to this position sum</summary>
        [JsonProperty("Discount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Discount
        {
            get { return _discount; }
            set 
            {
                if (_discount != value)
                {
                    _discount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The margin thaqt should be applied to this position sum</summary>
        [JsonProperty("Margin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Margin
        {
            get { return _margin; }
            set 
            {
                if (_margin != value)
                {
                    _margin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type of this position</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public DocumentPositionType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The order of this position in the document</summary>
        [JsonProperty("Order", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Order
        {
            get { return _order; }
            set 
            {
                if (_order != value)
                {
                    _order = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Id of the article that is associted with this position</summary>
        [JsonProperty("ArticleId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ArticleId
        {
            get { return _articleId; }
            set 
            {
                if (_articleId != value)
                {
                    _articleId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Article", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Article Article
        {
            get { return _article; }
            set 
            {
                if (_article != value)
                {
                    _article = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The amount of this position in this document</summary>
        [JsonProperty("Amount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The booking account this position is associated with</summary>
        [JsonProperty("BookingAccount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string BookingAccount
        {
            get { return _bookingAccount; }
            set 
            {
                if (_bookingAccount != value)
                {
                    _bookingAccount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The cost center 1 this position is associated with</summary>
        [JsonProperty("CostCenter1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CostCenter1
        {
            get { return _costCenter1; }
            set 
            {
                if (_costCenter1 != value)
                {
                    _costCenter1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The cost center 2 this position is associated with</summary>
        [JsonProperty("CostCenter2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CostCenter2
        {
            get { return _costCenter2; }
            set 
            {
                if (_costCenter2 != value)
                {
                    _costCenter2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether this position should be excluded from early payment calculations</summary>
        [JsonProperty("ExcludeFromEarlyPayment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? ExcludeFromEarlyPayment
        {
            get { return _excludeFromEarlyPayment; }
            set 
            {
                if (_excludeFromEarlyPayment != value)
                {
                    _excludeFromEarlyPayment = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Total price under considaration of margin and discount</summary>
        [JsonProperty("TotalPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalPrice
        {
            get { return _totalPrice; }
            set 
            {
                if (_totalPrice != value)
                {
                    _totalPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Total unit price under considaration of margin and discount</summary>
        [JsonProperty("TotalUnitPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalUnitPrice
        {
            get { return _totalUnitPrice; }
            set 
            {
                if (_totalUnitPrice != value)
                {
                    _totalUnitPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Total vat under considaration of margin and discount</summary>
        [JsonProperty("TotalVat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalVat
        {
            get { return _totalVat; }
            set 
            {
                if (_totalVat != value)
                {
                    _totalVat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static DocumentPosition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentPosition>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class User : INotifyPropertyChanged
    { 
        private string _firstName; 
        private string _lastName; 
        private string _userName; 
        private string _eMailWork; 
        private string _salutation; 
        private string _title; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The first name of the user</summary>
        [JsonProperty("FirstName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FirstName
        {
            get { return _firstName; }
            set 
            {
                if (_firstName != value)
                {
                    _firstName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last name of the user</summary>
        [JsonProperty("LastName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LastName
        {
            get { return _lastName; }
            set 
            {
                if (_lastName != value)
                {
                    _lastName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The user's user name in HQ</summary>
        [JsonProperty("UserName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName
        {
            get { return _userName; }
            set 
            {
                if (_userName != value)
                {
                    _userName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The work email of the user</summary>
        [JsonProperty("EMailWork", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EMailWork
        {
            get { return _eMailWork; }
            set 
            {
                if (_eMailWork != value)
                {
                    _eMailWork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The salutation of the user, i.e. Mrs. or Mr.</summary>
        [JsonProperty("Salutation", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Salutation
        {
            get { return _salutation; }
            set 
            {
                if (_salutation != value)
                {
                    _salutation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The professional title of the user</summary>
        [JsonProperty("Title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static User FromJson(string data)
        {
            return JsonConvert.DeserializeObject<User>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class Lead : INotifyPropertyChanged
    { 
        private string _number; 
        private Company _company; 
        private LeadStatus _status; 
        private int? _statusId; 
        private int? _companyId; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The number of the lead</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Company of the lead</summary>
        [JsonProperty("Company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Company Company
        {
            get { return _company; }
            set 
            {
                if (_company != value)
                {
                    _company = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The leadstatus of the lead</summary>
        [JsonProperty("Status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public LeadStatus Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The leadstatusId of the lead</summary>
        [JsonProperty("StatusId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? StatusId
        {
            get { return _statusId; }
            set 
            {
                if (_statusId != value)
                {
                    _statusId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the company of the lead</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId
        {
            get { return _companyId; }
            set 
            {
                if (_companyId != value)
                {
                    _companyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Lead FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Lead>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class Project : INotifyPropertyChanged
    { 
        private string _number; 
        private string _name; 
        private DateTime? _plannedStartDate; 
        private DateTime? _plannedEndDate; 
        private ObservableCollection<Subsystem> _subsystems; 
        private int? _projectTemplateId; 
        private ProjectTemplate _projectTemplate; 
        private int? _projectStatusId; 
        private ProjectStatus _projectStatus; 
        private int? _companyId; 
        private Company _company; 
        private ObservableCollection<CustomField> _customFields; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The number of the project</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The name of the project</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The planned start date of the project</summary>
        [JsonProperty("PlannedStartDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? PlannedStartDate
        {
            get { return _plannedStartDate; }
            set 
            {
                if (_plannedStartDate != value)
                {
                    _plannedStartDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The planned end date of the project</summary>
        [JsonProperty("PlannedEndDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? PlannedEndDate
        {
            get { return _plannedEndDate; }
            set 
            {
                if (_plannedEndDate != value)
                {
                    _plannedEndDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The subsystems this project is associated with</summary>
        [JsonProperty("Subsystems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Subsystem> Subsystems
        {
            get { return _subsystems; }
            set 
            {
                if (_subsystems != value)
                {
                    _subsystems = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the project template</summary>
        [JsonProperty("ProjectTemplateId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectTemplateId
        {
            get { return _projectTemplateId; }
            set 
            {
                if (_projectTemplateId != value)
                {
                    _projectTemplateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The template of this project</summary>
        [JsonProperty("ProjectTemplate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ProjectTemplate ProjectTemplate
        {
            get { return _projectTemplate; }
            set 
            {
                if (_projectTemplate != value)
                {
                    _projectTemplate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the project status</summary>
        [JsonProperty("ProjectStatusId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectStatusId
        {
            get { return _projectStatusId; }
            set 
            {
                if (_projectStatusId != value)
                {
                    _projectStatusId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The status of the project</summary>
        [JsonProperty("ProjectStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ProjectStatus ProjectStatus
        {
            get { return _projectStatus; }
            set 
            {
                if (_projectStatus != value)
                {
                    _projectStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the company</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId
        {
            get { return _companyId; }
            set 
            {
                if (_companyId != value)
                {
                    _companyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The company this project is associated with</summary>
        [JsonProperty("Company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Company Company
        {
            get { return _company; }
            set 
            {
                if (_company != value)
                {
                    _company = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("CustomFields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomField> CustomFields
        {
            get { return _customFields; }
            set 
            {
                if (_customFields != value)
                {
                    _customFields = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Project FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Project>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class HQFile : INotifyPropertyChanged
    { 
        private string _name; 
        private double? _size; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Size in Bytes</summary>
        [JsonProperty("Size", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Size
        {
            get { return _size; }
            set 
            {
                if (_size != value)
                {
                    _size = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static HQFile FromJson(string data)
        {
            return JsonConvert.DeserializeObject<HQFile>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class Article : INotifyPropertyChanged
    { 
        private string _name; 
        private string _number; 
        private int? _articleCategoryId; 
        private ArticleBaseType? _baseType; 
        private string _description; 
        private ObservableCollection<ArticleSalesPrice> _articleSalesPrices; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of this article</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The number as identifier of the article</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The category ID of the article</summary>
        [JsonProperty("ArticleCategoryId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ArticleCategoryId
        {
            get { return _articleCategoryId; }
            set 
            {
                if (_articleCategoryId != value)
                {
                    _articleCategoryId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The basetype of the article</summary>
        [JsonProperty("BaseType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public ArticleBaseType? BaseType
        {
            get { return _baseType; }
            set 
            {
                if (_baseType != value)
                {
                    _baseType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The description of the article</summary>
        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The list of possible sales prices</summary>
        [JsonProperty("ArticleSalesPrices", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ArticleSalesPrice> ArticleSalesPrices
        {
            get { return _articleSalesPrices; }
            set 
            {
                if (_articleSalesPrices != value)
                {
                    _articleSalesPrices = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Article FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Article>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class LeadStatus : INotifyPropertyChanged
    { 
        private string _name; 
        private LeadStatusType? _type; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of the status</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type of the leadstatus</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public LeadStatusType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static LeadStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<LeadStatus>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class Subsystem : INotifyPropertyChanged
    { 
        private string _name; 
        private bool? _isMaster; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of the subsystem</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether this is the master subsystem</summary>
        [JsonProperty("IsMaster", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsMaster
        {
            get { return _isMaster; }
            set 
            {
                if (_isMaster != value)
                {
                    _isMaster = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Subsystem FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Subsystem>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ProjectTemplate : INotifyPropertyChanged
    { 
        private string _name; 
        private bool? _isInternal; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of the project template</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether this is an internal project template without a company or with a company</summary>
        [JsonProperty("IsInternal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsInternal
        {
            get { return _isInternal; }
            set 
            {
                if (_isInternal != value)
                {
                    _isInternal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ProjectTemplate FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ProjectTemplate>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ProjectStatus : INotifyPropertyChanged
    { 
        private string _name; 
        private bool? _isInProgress; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of the project status</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether this project is in progress or not</summary>
        [JsonProperty("IsInProgress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsInProgress
        {
            get { return _isInProgress; }
            set 
            {
                if (_isInProgress != value)
                {
                    _isInProgress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ProjectStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ProjectStatus>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ArticleSalesPrice : INotifyPropertyChanged
    { 
        private double? _price; 
        private string _currency; 
        private double? _taxRate; 
        private int? _amount; 
        private int? _articleId; 
        private ObservableCollection<ArticleDiscount> _articleDiscounts; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The price to sale the article for</summary>
        [JsonProperty("Price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The currency of the price</summary>
        [JsonProperty("Currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The taxrate of the sales price</summary>
        [JsonProperty("TaxRate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TaxRate
        {
            get { return _taxRate; }
            set 
            {
                if (_taxRate != value)
                {
                    _taxRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The amount for the specific price</summary>
        [JsonProperty("Amount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Amount
        {
            get { return _amount; }
            set 
            {
                if (_amount != value)
                {
                    _amount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The article the price is for</summary>
        [JsonProperty("ArticleId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ArticleId
        {
            get { return _articleId; }
            set 
            {
                if (_articleId != value)
                {
                    _articleId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the possible discounts for the sales price</summary>
        [JsonProperty("ArticleDiscounts", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ArticleDiscount> ArticleDiscounts
        {
            get { return _articleDiscounts; }
            set 
            {
                if (_articleDiscounts != value)
                {
                    _articleDiscounts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ArticleSalesPrice FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ArticleSalesPrice>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ArticleDiscount : INotifyPropertyChanged
    { 
        private double? _value; 
        private double? _threshold; 
        private ArticleDiscountType? _type; 
        private int? _companyId; 
        private int? _articleSalesPriceId; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The value of the discount</summary>
        [JsonProperty("Value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the threshold to decide if the discount is applied</summary>
        [JsonProperty("Threshold", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Threshold
        {
            get { return _threshold; }
            set 
            {
                if (_threshold != value)
                {
                    _threshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type, if its percentige or net value for the threshold decision</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public ArticleDiscountType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If set, the discount is just assigned for a specifc company</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId
        {
            get { return _companyId; }
            set 
            {
                if (_companyId != value)
                {
                    _companyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The salesprices, where the discount is assigned to</summary>
        [JsonProperty("ArticleSalesPriceId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ArticleSalesPriceId
        {
            get { return _articleSalesPriceId; }
            set 
            {
                if (_articleSalesPriceId != value)
                {
                    _articleSalesPriceId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ArticleDiscount FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ArticleDiscount>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfQuotation : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<Quotation> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Quotation> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfQuotation FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfQuotation>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class Quotation : INotifyPropertyChanged
    { 
        private DateTime? _quotationDate; 
        private DateTime? _validUntilDate; 
        private QuotationStatus? _status; 
        private ObservableCollection<DocumentPosition> _positions; 
        private string _currency; 
        private double? _exchangeRate; 
        private DateTime? _deliveryDate; 
        private int? _paymentConditionId; 
        private int? _deliveryConditionId; 
        private DocumentCondition _paymentCondition; 
        private DocumentCondition _deliveryCondition; 
        private QuotationDiscountType? _discountType; 
        private double? _discount; 
        private double? _margin; 
        private QuotationTaxOption? _taxOption; 
        private QuotationServiceOption? _serviceOption; 
        private decimal? _netTotal; 
        private decimal? _grossTotal; 
        private decimal? _vatTotal; 
        private decimal? _paidTotal; 
        private QuotationType? _type; 
        private string _typeText; 
        private string _addressText; 
        private int? _companyAddressId; 
        private CompanyAddress _companyAddress; 
        private string _subject; 
        private string _header; 
        private string _footer; 
        private int? _documentTemplateId; 
        private string _number; 
        private int? _contactPersonId; 
        private ContactPerson _contactPerson; 
        private int? _companyId; 
        private Company _company; 
        private int? _internalContactPersonId; 
        private User _internalContactPerson; 
        private int? _leadId; 
        private Lead _lead; 
        private string _syncId; 
        private int? _projectId; 
        private Project _project; 
        private string _note; 
        private string _language; 
        private HQFile _documentFile; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The date of this quotation</summary>
        [JsonProperty("QuotationDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? QuotationDate
        {
            get { return _quotationDate; }
            set 
            {
                if (_quotationDate != value)
                {
                    _quotationDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date this quotation is valid to</summary>
        [JsonProperty("ValidUntilDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? ValidUntilDate
        {
            get { return _validUntilDate; }
            set 
            {
                if (_validUntilDate != value)
                {
                    _validUntilDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The status of this quotation</summary>
        [JsonProperty("Status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public QuotationStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The positions of this quotation</summary>
        [JsonProperty("Positions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentPosition> Positions
        {
            get { return _positions; }
            set 
            {
                if (_positions != value)
                {
                    _positions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The currency of this document.</summary>
        [JsonProperty("Currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency
        {
            get { return _currency; }
            set 
            {
                if (_currency != value)
                {
                    _currency = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The exchange rate to Euro.
        ///             While the document is in a draft state, the exchange rate reflects the current exchange rate of ECB.
        ///             After the document has been sent, the exchange rate at that date will be returned.</summary>
        [JsonProperty("ExchangeRate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ExchangeRate
        {
            get { return _exchangeRate; }
            set 
            {
                if (_exchangeRate != value)
                {
                    _exchangeRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date of the delivery of the products or services.</summary>
        [JsonProperty("DeliveryDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? DeliveryDate
        {
            get { return _deliveryDate; }
            set 
            {
                if (_deliveryDate != value)
                {
                    _deliveryDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Id of the payment condition.</summary>
        [JsonProperty("PaymentConditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? PaymentConditionId
        {
            get { return _paymentConditionId; }
            set 
            {
                if (_paymentConditionId != value)
                {
                    _paymentConditionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Id of the delivery condition.</summary>
        [JsonProperty("DeliveryConditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DeliveryConditionId
        {
            get { return _deliveryConditionId; }
            set 
            {
                if (_deliveryConditionId != value)
                {
                    _deliveryConditionId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("PaymentCondition", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DocumentCondition PaymentCondition
        {
            get { return _paymentCondition; }
            set 
            {
                if (_paymentCondition != value)
                {
                    _paymentCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("DeliveryCondition", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DocumentCondition DeliveryCondition
        {
            get { return _deliveryCondition; }
            set 
            {
                if (_deliveryCondition != value)
                {
                    _deliveryCondition = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the document discount is specified as a total or a percentage.</summary>
        [JsonProperty("DiscountType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public QuotationDiscountType? DiscountType
        {
            get { return _discountType; }
            set 
            {
                if (_discountType != value)
                {
                    _discountType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A discount that should be applied to the total sum.
        ///             This is either a total or a percantage value, depending on the DiscountType.</summary>
        [JsonProperty("Discount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Discount
        {
            get { return _discount; }
            set 
            {
                if (_discount != value)
                {
                    _discount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A margin that should be applied to the total sum.
        ///             This margin will be equally distributed over all positions.</summary>
        [JsonProperty("Margin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Margin
        {
            get { return _margin; }
            set 
            {
                if (_margin != value)
                {
                    _margin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The tax rule that should apply to this document.
        ///             VAT is most commonly used for documents within the same country.</summary>
        [JsonProperty("TaxOption", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public QuotationTaxOption? TaxOption
        {
            get { return _taxOption; }
            set 
            {
                if (_taxOption != value)
                {
                    _taxOption = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the positions in this document are a delivery or any other kind of service.</summary>
        [JsonProperty("ServiceOption", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public QuotationServiceOption? ServiceOption
        {
            get { return _serviceOption; }
            set 
            {
                if (_serviceOption != value)
                {
                    _serviceOption = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The net sum of the document. This is calculated considering all positions, position and document margin as well as position and document discount.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("NetTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? NetTotal
        {
            get { return _netTotal; }
            set 
            {
                if (_netTotal != value)
                {
                    _netTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The gross sum of the document. This is calculated considering all positions, position taxes, position and document margin as well as position and document discount.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("GrossTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? GrossTotal
        {
            get { return _grossTotal; }
            set 
            {
                if (_grossTotal != value)
                {
                    _grossTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The sum of the position VAT.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("VatTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? VatTotal
        {
            get { return _vatTotal; }
            set 
            {
                if (_vatTotal != value)
                {
                    _vatTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The sum of received payments for this document.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("PaidTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? PaidTotal
        {
            get { return _paidTotal; }
            set 
            {
                if (_paidTotal != value)
                {
                    _paidTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type of the document</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public QuotationType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The textual representation of the type</summary>
        [JsonProperty("TypeText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TypeText
        {
            get { return _typeText; }
            set 
            {
                if (_typeText != value)
                {
                    _typeText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The receiver address text of the document</summary>
        [JsonProperty("AddressText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddressText
        {
            get { return _addressText; }
            set 
            {
                if (_addressText != value)
                {
                    _addressText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the postal address of the receiving company</summary>
        [JsonProperty("CompanyAddressId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyAddressId
        {
            get { return _companyAddressId; }
            set 
            {
                if (_companyAddressId != value)
                {
                    _companyAddressId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The postal address of the receiving company</summary>
        [JsonProperty("CompanyAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress CompanyAddress
        {
            get { return _companyAddress; }
            set 
            {
                if (_companyAddress != value)
                {
                    _companyAddress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The subject of the document</summary>
        [JsonProperty("Subject", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Subject
        {
            get { return _subject; }
            set 
            {
                if (_subject != value)
                {
                    _subject = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The header text on the document</summary>
        [JsonProperty("Header", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Header
        {
            get { return _header; }
            set 
            {
                if (_header != value)
                {
                    _header = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The footer text of on the document</summary>
        [JsonProperty("Footer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Footer
        {
            get { return _footer; }
            set 
            {
                if (_footer != value)
                {
                    _footer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The document template id</summary>
        [JsonProperty("DocumentTemplateId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DocumentTemplateId
        {
            get { return _documentTemplateId; }
            set 
            {
                if (_documentTemplateId != value)
                {
                    _documentTemplateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The number of the document, auto generated by hq</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the responsible at the receiving company</summary>
        [JsonProperty("ContactPersonId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ContactPersonId
        {
            get { return _contactPersonId; }
            set 
            {
                if (_contactPersonId != value)
                {
                    _contactPersonId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The responsible at the receiving company</summary>
        [JsonProperty("ContactPerson", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ContactPerson ContactPerson
        {
            get { return _contactPerson; }
            set 
            {
                if (_contactPerson != value)
                {
                    _contactPerson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the company which is the receiver of the document</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId
        {
            get { return _companyId; }
            set 
            {
                if (_companyId != value)
                {
                    _companyId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The company which is the receiver of the document</summary>
        [JsonProperty("Company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Company Company
        {
            get { return _company; }
            set 
            {
                if (_company != value)
                {
                    _company = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the contacted person responsible for this document</summary>
        [JsonProperty("InternalContactPersonId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InternalContactPersonId
        {
            get { return _internalContactPersonId; }
            set 
            {
                if (_internalContactPersonId != value)
                {
                    _internalContactPersonId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The hq user repsonsible for this document</summary>
        [JsonProperty("InternalContactPerson", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User InternalContactPerson
        {
            get { return _internalContactPerson; }
            set 
            {
                if (_internalContactPerson != value)
                {
                    _internalContactPerson = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the lead related to the document</summary>
        [JsonProperty("LeadId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LeadId
        {
            get { return _leadId; }
            set 
            {
                if (_leadId != value)
                {
                    _leadId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The lead related to the document</summary>
        [JsonProperty("Lead", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Lead Lead
        {
            get { return _lead; }
            set 
            {
                if (_lead != value)
                {
                    _lead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A unique identifier for other sync clients</summary>
        [JsonProperty("SyncId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SyncId
        {
            get { return _syncId; }
            set 
            {
                if (_syncId != value)
                {
                    _syncId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the id of the project related to the document</summary>
        [JsonProperty("ProjectId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectId
        {
            get { return _projectId; }
            set 
            {
                if (_projectId != value)
                {
                    _projectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The project related to the document</summary>
        [JsonProperty("Project", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Project Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The comment on the document</summary>
        [JsonProperty("Note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The language of the document as ISO Code ("DE")</summary>
        [JsonProperty("Language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set 
            {
                if (_language != value)
                {
                    _language = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The generated pdf file</summary>
        [JsonProperty("DocumentFile", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public HQFile DocumentFile
        {
            get { return _documentFile; }
            set 
            {
                if (_documentFile != value)
                {
                    _documentFile = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Quotation FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Quotation>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfLead : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<Lead> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Lead> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfLead FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfLead>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfProjectRole : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<ProjectRole> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ProjectRole> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfProjectRole FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfProjectRole>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ProjectRole : INotifyPropertyChanged
    { 
        private string _name; 
        private int? _rightLevel; 
        private int? _projectTemplateId; 
        private bool? _isRequired; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("RightLevel", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? RightLevel
        {
            get { return _rightLevel; }
            set 
            {
                if (_rightLevel != value)
                {
                    _rightLevel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("ProjectTemplateId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectTemplateId
        {
            get { return _projectTemplateId; }
            set 
            {
                if (_projectTemplateId != value)
                {
                    _projectTemplateId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("IsRequired", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRequired
        {
            get { return _isRequired; }
            set 
            {
                if (_isRequired != value)
                {
                    _isRequired = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ProjectRole FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ProjectRole>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfProjectStatus : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<ProjectStatus> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ProjectStatus> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfProjectStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfProjectStatus>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfTask : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<Task> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Task> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfTask FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfTask>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class Task : INotifyPropertyChanged
    { 
        private string _name; 
        private ObservableCollection<TaskAssignment> _assignments; 
        private Project _project; 
        private int? _order; 
        private int? _parentId; 
        private int? _projectId; 
        private bool? _isDone; 
        private double? _plannedEffort; 
        private string _description; 
        private DateTime? _startOn; 
        private DateTime? _endOn; 
        private int? _taskTypeId; 
        private int? _taskTypeStatusId; 
        private TaskType _taskType; 
        private TaskTypeStatus _taskTypeStatus; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of the task</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Assignments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<TaskAssignment> Assignments
        {
            get { return _assignments; }
            set 
            {
                if (_assignments != value)
                {
                    _assignments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The project this task belongs to</summary>
        [JsonProperty("Project", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Project Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Order", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Order
        {
            get { return _order; }
            set 
            {
                if (_order != value)
                {
                    _order = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("ParentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ParentId
        {
            get { return _parentId; }
            set 
            {
                if (_parentId != value)
                {
                    _parentId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the project this task belongs to</summary>
        [JsonProperty("ProjectId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectId
        {
            get { return _projectId; }
            set 
            {
                if (_projectId != value)
                {
                    _projectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("IsDone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDone
        {
            get { return _isDone; }
            set 
            {
                if (_isDone != value)
                {
                    _isDone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("PlannedEffort", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? PlannedEffort
        {
            get { return _plannedEffort; }
            set 
            {
                if (_plannedEffort != value)
                {
                    _plannedEffort = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("StartOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? StartOn
        {
            get { return _startOn; }
            set 
            {
                if (_startOn != value)
                {
                    _startOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("EndOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? EndOn
        {
            get { return _endOn; }
            set 
            {
                if (_endOn != value)
                {
                    _endOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("TaskTypeId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TaskTypeId
        {
            get { return _taskTypeId; }
            set 
            {
                if (_taskTypeId != value)
                {
                    _taskTypeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("TaskTypeStatusId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TaskTypeStatusId
        {
            get { return _taskTypeStatusId; }
            set 
            {
                if (_taskTypeStatusId != value)
                {
                    _taskTypeStatusId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The tasktype of this task</summary>
        [JsonProperty("TaskType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public TaskType TaskType
        {
            get { return _taskType; }
            set 
            {
                if (_taskType != value)
                {
                    _taskType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("TaskTypeStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public TaskTypeStatus TaskTypeStatus
        {
            get { return _taskTypeStatus; }
            set 
            {
                if (_taskTypeStatus != value)
                {
                    _taskTypeStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Task FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Task>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>The Assignment of an user to the task entity</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class TaskAssignment : INotifyPropertyChanged
    { 
        private TaskAssignmentAssignmentUnit? _assignmentUnit; 
        private double? _assignmentValue; 
        private int? _taskId; 
        private Task _task; 
        private int? _userId; 
        private User _user; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>Percentige not allowed</summary>
        [JsonProperty("AssignmentUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public TaskAssignmentAssignmentUnit? AssignmentUnit
        {
            get { return _assignmentUnit; }
            set 
            {
                if (_assignmentUnit != value)
                {
                    _assignmentUnit = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The value of the assignment, the value is stored in the chosen unit</summary>
        [JsonProperty("AssignmentValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? AssignmentValue
        {
            get { return _assignmentValue; }
            set 
            {
                if (_assignmentValue != value)
                {
                    _assignmentValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the task the assignment is for</summary>
        [JsonProperty("TaskId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TaskId
        {
            get { return _taskId; }
            set 
            {
                if (_taskId != value)
                {
                    _taskId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The task the assignment is for</summary>
        [JsonProperty("Task", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Task Task
        {
            get { return _task; }
            set 
            {
                if (_task != value)
                {
                    _task = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The UserId of the assignment</summary>
        [JsonProperty("UserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UserId
        {
            get { return _userId; }
            set 
            {
                if (_userId != value)
                {
                    _userId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The user of the assignment</summary>
        [JsonProperty("User", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static TaskAssignment FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TaskAssignment>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Every task in hq has a task type. it is a task classification and often used for different external invoicing chargrates</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class TaskType : INotifyPropertyChanged
    { 
        private string _name; 
        private bool? _isDefault; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The name of the tasktype</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Is set, it's the default task type</summary>
        [JsonProperty("IsDefault", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDefault
        {
            get { return _isDefault; }
            set 
            {
                if (_isDefault != value)
                {
                    _isDefault = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static TaskType FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TaskType>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class TaskTypeStatus : INotifyPropertyChanged
    { 
        private string _name; 
        private int? _taskTypeId; 
        private TaskType _taskType; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("TaskTypeId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TaskTypeId
        {
            get { return _taskTypeId; }
            set 
            {
                if (_taskTypeId != value)
                {
                    _taskTypeId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("TaskType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public TaskType TaskType
        {
            get { return _taskType; }
            set 
            {
                if (_taskType != value)
                {
                    _taskType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static TaskTypeStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TaskTypeStatus>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfProjectTemplate : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<ProjectTemplate> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ProjectTemplate> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfProjectTemplate FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfProjectTemplate>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfProject : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<Project> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Project> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfProject FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfProject>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfTaskAssignment : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<TaskAssignment> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<TaskAssignment> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfTaskAssignment FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfTaskAssignment>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfUserAbsence : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<UserAbsence> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<UserAbsence> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfUserAbsence FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfUserAbsence>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class UserAbsence : INotifyPropertyChanged
    { 
        private DateTime _start; 
        private DateTime _end; 
        private string _typeText; 
        private UserAbsenceType? _type; 
        private string _note; 
        private int _userId; 
        private User _user; 
        private bool? _isApproved; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The start date or date time of this absence, depending on the type</summary>
        [JsonProperty("Start", Required = Required.Always)]
        [Required]
        public DateTime Start
        {
            get { return _start; }
            set 
            {
                if (_start != value)
                {
                    _start = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The end date or date time of this absence, depending on the type</summary>
        [JsonProperty("End", Required = Required.Always)]
        [Required]
        public DateTime End
        {
            get { return _end; }
            set 
            {
                if (_end != value)
                {
                    _end = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The textual representation of the type</summary>
        [JsonProperty("TypeText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TypeText
        {
            get { return _typeText; }
            set 
            {
                if (_typeText != value)
                {
                    _typeText = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type of this absence</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public UserAbsenceType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The user-provided note for this absence</summary>
        [JsonProperty("Note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user this absence is for</summary>
        [JsonProperty("UserId", Required = Required.Always)]
        public int UserId
        {
            get { return _userId; }
            set 
            {
                if (_userId != value)
                {
                    _userId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The user this absence is for</summary>
        [JsonProperty("User", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether this absence was approved</summary>
        [JsonProperty("IsApproved", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsApproved
        {
            get { return _isApproved; }
            set 
            {
                if (_isApproved != value)
                {
                    _isApproved = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static UserAbsence FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UserAbsence>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfUserReporting : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<UserReporting> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<UserReporting> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfUserReporting FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfUserReporting>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>A User Reporting represents a logged time of a User on a specific Task in HQ.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class UserReporting : INotifyPropertyChanged
    { 
        private string _note; 
        private int? _duration; 
        private Task _task; 
        private int? _userId; 
        private User _user; 
        private double? _chargeRateValue; 
        private double? _internalChargeRateValue; 
        private bool? _isApproved; 
        private DateTime? _startOn; 
        private int? _breakDuration; 
        private int? _projectId; 
        private Project _project; 
        private int? _taskId; 
        private int _id; 
        private int? _createdBy; 
        private int? _updatedBy; 
        private DateTime? _createdOn; 
        private DateTime? _updatedOn;
    
        /// <summary>The user-provided note of this reporting</summary>
        [JsonProperty("Note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note
        {
            get { return _note; }
            set 
            {
                if (_note != value)
                {
                    _note = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The reporting duration, in seconds</summary>
        [JsonProperty("Duration", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Duration
        {
            get { return _duration; }
            set 
            {
                if (_duration != value)
                {
                    _duration = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Task", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Task Task
        {
            get { return _task; }
            set 
            {
                if (_task != value)
                {
                    _task = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user this reporting is for</summary>
        [JsonProperty("UserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UserId
        {
            get { return _userId; }
            set 
            {
                if (_userId != value)
                {
                    _userId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The user this reporting is for</summary>
        [JsonProperty("User", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User User
        {
            get { return _user; }
            set 
            {
                if (_user != value)
                {
                    _user = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The external charge rate value</summary>
        [JsonProperty("ChargeRateValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ChargeRateValue
        {
            get { return _chargeRateValue; }
            set 
            {
                if (_chargeRateValue != value)
                {
                    _chargeRateValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The interbal charge rate value</summary>
        [JsonProperty("InternalChargeRateValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? InternalChargeRateValue
        {
            get { return _internalChargeRateValue; }
            set 
            {
                if (_internalChargeRateValue != value)
                {
                    _internalChargeRateValue = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether this reporting was approved</summary>
        [JsonProperty("IsApproved", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsApproved
        {
            get { return _isApproved; }
            set 
            {
                if (_isApproved != value)
                {
                    _isApproved = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date of the reporting</summary>
        [JsonProperty("StartOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? StartOn
        {
            get { return _startOn; }
            set 
            {
                if (_startOn != value)
                {
                    _startOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The break duration of this reporting, in seconds</summary>
        [JsonProperty("BreakDuration", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? BreakDuration
        {
            get { return _breakDuration; }
            set 
            {
                if (_breakDuration != value)
                {
                    _breakDuration = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the project</summary>
        [JsonProperty("ProjectId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectId
        {
            get { return _projectId; }
            set 
            {
                if (_projectId != value)
                {
                    _projectId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The Project of the reporting</summary>
        [JsonProperty("Project", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Project Project
        {
            get { return _project; }
            set 
            {
                if (_project != value)
                {
                    _project = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the tas</summary>
        [JsonProperty("TaskId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TaskId
        {
            get { return _taskId; }
            set 
            {
                if (_taskId != value)
                {
                    _taskId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy
        {
            get { return _updatedBy; }
            set 
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn
        {
            get { return _createdOn; }
            set 
            {
                if (_createdOn != value)
                {
                    _createdOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn
        {
            get { return _updatedOn; }
            set 
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static UserReporting FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UserReporting>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public partial class ODataResponseOfListOfUser : INotifyPropertyChanged
    { 
        private string _oDataContext; 
        private ObservableCollection<User> _value;
    
        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext
        {
            get { return _oDataContext; }
            set 
            {
                if (_oDataContext != value)
                {
                    _oDataContext = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<User> Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ODataResponseOfListOfUser FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfUser>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum CompanyAddressDefaultForDocumentType
    {
        [EnumMember(Value = "Quotation")]
        Quotation = 0,
    
        [EnumMember(Value = "Invoice")]
        Invoice = 1,
    
        [EnumMember(Value = "DeliveryNote")]
        DeliveryNote = 2,
    
        [EnumMember(Value = "Warning")]
        Warning = 3,
    
        [EnumMember(Value = "Reminder")]
        Reminder = 4,
    
        [EnumMember(Value = "Cancellation")]
        Cancellation = 5,
    
        [EnumMember(Value = "CreditNote")]
        CreditNote = 6,
    
        [EnumMember(Value = "Confirmation")]
        Confirmation = 7,
    
        [EnumMember(Value = "IncomingInvoice")]
        IncomingInvoice = 8,
    
        [EnumMember(Value = "Undefined")]
        Undefined = 9,
    
        [EnumMember(Value = "Order")]
        Order = 10,
    
        [EnumMember(Value = "PriceInquery")]
        PriceInquery = 11,
    
        [EnumMember(Value = "Letter")]
        Letter = 12,
    
        [EnumMember(Value = "Minute")]
        Minute = 13,
    
        [EnumMember(Value = "Akonto")]
        Akonto = 14,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum CustomFieldType
    {
        [EnumMember(Value = "Text")]
        Text = 0,
    
        [EnumMember(Value = "TextMultiline")]
        TextMultiline = 1,
    
        [EnumMember(Value = "Date")]
        Date = 2,
    
        [EnumMember(Value = "Dropdown")]
        Dropdown = 3,
    
        [EnumMember(Value = "DropdownCheckbox")]
        DropdownCheckbox = 4,
    
        [EnumMember(Value = "Boolean")]
        Boolean = 5,
    
        [EnumMember(Value = "Upload")]
        Upload = 6,
    
        [EnumMember(Value = "UserSelection")]
        UserSelection = 7,
    
        [EnumMember(Value = "CompanySelection")]
        CompanySelection = 8,
    
        [EnumMember(Value = "ProjectSelection")]
        ProjectSelection = 9,
    
        [EnumMember(Value = "ResourceSelection")]
        ResourceSelection = 10,
    
        [EnumMember(Value = "ContactSelection")]
        ContactSelection = 11,
    
        [EnumMember(Value = "Link")]
        Link = 12,
    
        [EnumMember(Value = "Float")]
        Float = 13,
    
        [EnumMember(Value = "Integer")]
        Integer = 14,
    
        [EnumMember(Value = "Token")]
        Token = 15,
    
        [EnumMember(Value = "NumericText")]
        NumericText = 16,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum CustomFieldDefinitionCategory
    {
        [EnumMember(Value = "Undefined")]
        Undefined = 0,
    
        [EnumMember(Value = "Contact")]
        Contact = 1,
    
        [EnumMember(Value = "ContactHistory")]
        ContactHistory = 2,
    
        [EnumMember(Value = "User")]
        User = 3,
    
        [EnumMember(Value = "Company")]
        Company = 4,
    
        [EnumMember(Value = "Lead")]
        Lead = 5,
    
        [EnumMember(Value = "Article")]
        Article = 6,
    
        [EnumMember(Value = "ArticleVersion")]
        ArticleVersion = 7,
    
        [EnumMember(Value = "Project")]
        Project = 8,
    
        [EnumMember(Value = "OrganisedEvent")]
        OrganisedEvent = 9,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum DocumentConditionType
    {
        [EnumMember(Value = "PaymentConditions")]
        PaymentConditions = 0,
    
        [EnumMember(Value = "DeliveryConditions")]
        DeliveryConditions = 1,
    
        [EnumMember(Value = "NotDefined")]
        NotDefined = 2,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum DocumentTemplateDocumentType
    {
        [EnumMember(Value = "Quotation")]
        Quotation = 0,
    
        [EnumMember(Value = "Invoice")]
        Invoice = 1,
    
        [EnumMember(Value = "DeliveryNote")]
        DeliveryNote = 2,
    
        [EnumMember(Value = "Warning")]
        Warning = 3,
    
        [EnumMember(Value = "Reminder")]
        Reminder = 4,
    
        [EnumMember(Value = "Cancellation")]
        Cancellation = 5,
    
        [EnumMember(Value = "CreditNote")]
        CreditNote = 6,
    
        [EnumMember(Value = "Confirmation")]
        Confirmation = 7,
    
        [EnumMember(Value = "IncomingInvoice")]
        IncomingInvoice = 8,
    
        [EnumMember(Value = "Undefined")]
        Undefined = 9,
    
        [EnumMember(Value = "Order")]
        Order = 10,
    
        [EnumMember(Value = "PriceInquery")]
        PriceInquery = 11,
    
        [EnumMember(Value = "Letter")]
        Letter = 12,
    
        [EnumMember(Value = "Minute")]
        Minute = 13,
    
        [EnumMember(Value = "Akonto")]
        Akonto = 14,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum InvoiceStatus
    {
        [EnumMember(Value = "Draft")]
        Draft = 0,
    
        [EnumMember(Value = "WaitingForReview")]
        WaitingForReview = 1,
    
        [EnumMember(Value = "Sent")]
        Sent = 2,
    
        [EnumMember(Value = "PartlyPaid")]
        PartlyPaid = 3,
    
        [EnumMember(Value = "CompletelyPaid")]
        CompletelyPaid = 4,
    
        [EnumMember(Value = "Canceled")]
        Canceled = 5,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum InvoiceDiscountType
    {
        [EnumMember(Value = "Percent")]
        Percent = 0,
    
        [EnumMember(Value = "NetValue")]
        NetValue = 1,
    
        [EnumMember(Value = "NotSet")]
        NotSet = 2,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum InvoiceTaxOption
    {
        [EnumMember(Value = "VatApplicable")]
        VatApplicable = 0,
    
        [EnumMember(Value = "FreeThirdCountryTerritory")]
        FreeThirdCountryTerritory = 1,
    
        [EnumMember(Value = "FreeEuropeanUnionWithVatId")]
        FreeEuropeanUnionWithVatId = 2,
    
        [EnumMember(Value = "FreeEuropeanUnionNoVatId")]
        FreeEuropeanUnionNoVatId = 3,
    
        [EnumMember(Value = "Inverse")]
        Inverse = 4,
    
        [EnumMember(Value = "IntraCommunityDelivery")]
        IntraCommunityDelivery = 5,
    
        [EnumMember(Value = "ExportDelivery")]
        ExportDelivery = 6,
    
        [EnumMember(Value = "FreeOther")]
        FreeOther = 7,
    
        [EnumMember(Value = "FreeYouthSupport")]
        FreeYouthSupport = 8,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum InvoiceServiceOption
    {
        [EnumMember(Value = "None")]
        None = 0,
    
        [EnumMember(Value = "Delivery")]
        Delivery = 1,
    
        [EnumMember(Value = "Service")]
        Service = 2,
    
        [EnumMember(Value = "DeliveryAndService")]
        DeliveryAndService = 3,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum InvoiceType
    {
        [EnumMember(Value = "Quotation")]
        Quotation = 0,
    
        [EnumMember(Value = "Invoice")]
        Invoice = 1,
    
        [EnumMember(Value = "DeliveryNote")]
        DeliveryNote = 2,
    
        [EnumMember(Value = "Warning")]
        Warning = 3,
    
        [EnumMember(Value = "Reminder")]
        Reminder = 4,
    
        [EnumMember(Value = "Cancellation")]
        Cancellation = 5,
    
        [EnumMember(Value = "CreditNote")]
        CreditNote = 6,
    
        [EnumMember(Value = "Confirmation")]
        Confirmation = 7,
    
        [EnumMember(Value = "IncomingInvoice")]
        IncomingInvoice = 8,
    
        [EnumMember(Value = "Undefined")]
        Undefined = 9,
    
        [EnumMember(Value = "Order")]
        Order = 10,
    
        [EnumMember(Value = "PriceInquery")]
        PriceInquery = 11,
    
        [EnumMember(Value = "Letter")]
        Letter = 12,
    
        [EnumMember(Value = "Minute")]
        Minute = 13,
    
        [EnumMember(Value = "Akonto")]
        Akonto = 14,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum DocumentPositionType
    {
        [EnumMember(Value = "Article")]
        Article = 0,
    
        [EnumMember(Value = "Freetext")]
        Freetext = 1,
    
        [EnumMember(Value = "OpenPosition")]
        OpenPosition = 2,
    
        [EnumMember(Value = "UserReporting")]
        UserReporting = 3,
    
        [EnumMember(Value = "ProjectInvoice")]
        ProjectInvoice = 4,
    
        [EnumMember(Value = "ProjectArticle")]
        ProjectArticle = 5,
    
        [EnumMember(Value = "ProjectPlan")]
        ProjectPlan = 6,
    
        [EnumMember(Value = "Subtotal")]
        Subtotal = 7,
    
        [EnumMember(Value = "PositionGroup")]
        PositionGroup = 8,
    
        [EnumMember(Value = "GroupHeader")]
        GroupHeader = 9,
    
        [EnumMember(Value = "Textline")]
        Textline = 10,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum ArticleBaseType
    {
        [EnumMember(Value = "Stock")]
        Stock = 0,
    
        [EnumMember(Value = "Action")]
        Action = 1,
    
        [EnumMember(Value = "Material")]
        Material = 2,
    
        [EnumMember(Value = "NotSet")]
        NotSet = 3,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum LeadStatusType
    {
        [EnumMember(Value = "NotSet")]
        NotSet = 0,
    
        [EnumMember(Value = "Successful")]
        Successful = 1,
    
        [EnumMember(Value = "Unsuccessful")]
        Unsuccessful = 2,
    
        [EnumMember(Value = "Open")]
        Open = 3,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum ArticleDiscountType
    {
        [EnumMember(Value = "Percent")]
        Percent = 0,
    
        [EnumMember(Value = "NetValue")]
        NetValue = 1,
    
        [EnumMember(Value = "NotSet")]
        NotSet = 2,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum QuotationStatus
    {
        [EnumMember(Value = "Draft")]
        Draft = 0,
    
        [EnumMember(Value = "WaitingForReview")]
        WaitingForReview = 1,
    
        [EnumMember(Value = "Sent")]
        Sent = 2,
    
        [EnumMember(Value = "Accepted")]
        Accepted = 3,
    
        [EnumMember(Value = "Declined")]
        Declined = 4,
    
        [EnumMember(Value = "Canceled")]
        Canceled = 5,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum QuotationDiscountType
    {
        [EnumMember(Value = "Percent")]
        Percent = 0,
    
        [EnumMember(Value = "NetValue")]
        NetValue = 1,
    
        [EnumMember(Value = "NotSet")]
        NotSet = 2,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum QuotationTaxOption
    {
        [EnumMember(Value = "VatApplicable")]
        VatApplicable = 0,
    
        [EnumMember(Value = "FreeThirdCountryTerritory")]
        FreeThirdCountryTerritory = 1,
    
        [EnumMember(Value = "FreeEuropeanUnionWithVatId")]
        FreeEuropeanUnionWithVatId = 2,
    
        [EnumMember(Value = "FreeEuropeanUnionNoVatId")]
        FreeEuropeanUnionNoVatId = 3,
    
        [EnumMember(Value = "Inverse")]
        Inverse = 4,
    
        [EnumMember(Value = "IntraCommunityDelivery")]
        IntraCommunityDelivery = 5,
    
        [EnumMember(Value = "ExportDelivery")]
        ExportDelivery = 6,
    
        [EnumMember(Value = "FreeOther")]
        FreeOther = 7,
    
        [EnumMember(Value = "FreeYouthSupport")]
        FreeYouthSupport = 8,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum QuotationServiceOption
    {
        [EnumMember(Value = "None")]
        None = 0,
    
        [EnumMember(Value = "Delivery")]
        Delivery = 1,
    
        [EnumMember(Value = "Service")]
        Service = 2,
    
        [EnumMember(Value = "DeliveryAndService")]
        DeliveryAndService = 3,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum QuotationType
    {
        [EnumMember(Value = "Quotation")]
        Quotation = 0,
    
        [EnumMember(Value = "Invoice")]
        Invoice = 1,
    
        [EnumMember(Value = "DeliveryNote")]
        DeliveryNote = 2,
    
        [EnumMember(Value = "Warning")]
        Warning = 3,
    
        [EnumMember(Value = "Reminder")]
        Reminder = 4,
    
        [EnumMember(Value = "Cancellation")]
        Cancellation = 5,
    
        [EnumMember(Value = "CreditNote")]
        CreditNote = 6,
    
        [EnumMember(Value = "Confirmation")]
        Confirmation = 7,
    
        [EnumMember(Value = "IncomingInvoice")]
        IncomingInvoice = 8,
    
        [EnumMember(Value = "Undefined")]
        Undefined = 9,
    
        [EnumMember(Value = "Order")]
        Order = 10,
    
        [EnumMember(Value = "PriceInquery")]
        PriceInquery = 11,
    
        [EnumMember(Value = "Letter")]
        Letter = 12,
    
        [EnumMember(Value = "Minute")]
        Minute = 13,
    
        [EnumMember(Value = "Akonto")]
        Akonto = 14,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum TaskAssignmentAssignmentUnit
    {
        [EnumMember(Value = "Percent")]
        Percent = 0,
    
        [EnumMember(Value = "Hours")]
        Hours = 1,
    
        [EnumMember(Value = "Days")]
        Days = 2,
    
        [EnumMember(Value = "Minutes")]
        Minutes = 3,
    
        [EnumMember(Value = "Weeks")]
        Weeks = 4,
    
        [EnumMember(Value = "NotSet")]
        NotSet = 5,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.12.6124.29822")]
    public enum UserAbsenceType
    {
        [EnumMember(Value = "Project")]
        Project = 0,
    
        [EnumMember(Value = "ContactHistory")]
        ContactHistory = 1,
    
        [EnumMember(Value = "File")]
        File = 2,
    
        [EnumMember(Value = "Private")]
        Private = 3,
    
        [EnumMember(Value = "Lead")]
        Lead = 4,
    
        [EnumMember(Value = "Illness")]
        Illness = 5,
    
        [EnumMember(Value = "PaidLeave")]
        PaidLeave = 6,
    
        [EnumMember(Value = "ProfessionalAbsence")]
        ProfessionalAbsence = 7,
    
        [EnumMember(Value = "TaskTemplate")]
        TaskTemplate = 8,
    
        [EnumMember(Value = "PrivateAbsence")]
        PrivateAbsence = 9,
    
        [EnumMember(Value = "OvertimeReduction")]
        OvertimeReduction = 10,
    
        [EnumMember(Value = "PrivateAppointment")]
        PrivateAppointment = 11,
    
        [EnumMember(Value = "PublicAppointment")]
        PublicAppointment = 12,
    
        [EnumMember(Value = "Outage")]
        Outage = 13,
    
        [EnumMember(Value = "Maintenance")]
        Maintenance = 14,
    
        [EnumMember(Value = "ConstructionWork")]
        ConstructionWork = 15,
    
        [EnumMember(Value = "OtherLeave")]
        OtherLeave = 16,
    
        [EnumMember(Value = "RiskTask")]
        RiskTask = 17,
    
        [EnumMember(Value = "ChecklistItem")]
        ChecklistItem = 18,
    
        [EnumMember(Value = "ArticleTask")]
        ArticleTask = 19,
    
        [EnumMember(Value = "ChecklistItemTemplate")]
        ChecklistItemTemplate = 20,
    
        [EnumMember(Value = "Checklist")]
        Checklist = 21,
    
        [EnumMember(Value = "ChecklistTemplate")]
        ChecklistTemplate = 22,
    
        [EnumMember(Value = "RecurrencyTask")]
        RecurrencyTask = 23,
    
        [EnumMember(Value = "RecurrencyException")]
        RecurrencyException = 24,
    
        [EnumMember(Value = "Document")]
        Document = 25,
    
        [EnumMember(Value = "UnplannedAppointment")]
        UnplannedAppointment = 26,
    
        [EnumMember(Value = "FurtherEducation")]
        FurtherEducation = 27,
    
        [EnumMember(Value = "ProfessionalSchool")]
        ProfessionalSchool = 28,
    
        [EnumMember(Value = "SpecialLeave")]
        SpecialLeave = 29,
    
        [EnumMember(Value = "ParentalLeave")]
        ParentalLeave = 30,
    
        [EnumMember(Value = "UnpaidLeave")]
        UnpaidLeave = 31,
    
        [EnumMember(Value = "PrivateRecurrencyTask")]
        PrivateRecurrencyTask = 32,
    
        [EnumMember(Value = "UnpaidIllness")]
        UnpaidIllness = 33,
    
    }

    [GeneratedCode("NSwag", "5.6.6124.29822")]
    public class FileParameter
    {
        public FileParameter(Stream data) 
            : this (data, null)
        {
        }

        public FileParameter(Stream data, string fileName)
        {
            Data = data;
            FileName = fileName;
        }

        public Stream Data { get; private set; }

        public string FileName { get; private set; }
    }

    [GeneratedCode("NSwag", "5.6.6124.29822")]
    public class SwaggerException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "5.6.6124.29822")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

}