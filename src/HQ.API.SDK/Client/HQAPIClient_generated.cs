//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v7.7.6305.38128 (NJsonSchema v6.0.6305.38127) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;

namespace HQ.API.SDK
{
#pragma warning disable // Disable all warnings

    [GeneratedCode("NSwag", "7.7.6305.38128")]
    public partial class HQAPIClient
    {
        private string _baseUrl = "https://api.hqlabs.de";

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        public HQAPIClient()
        {
        }

        public HQAPIClient(string baseUrl) : this()
        {
            this.BaseUrl = baseUrl;
        }


        partial void PrepareRequest(HttpClient request, ref string url);

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        /// <summary>Returns all article storages</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ArticleStorage>> ArticleStoragesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ArticleStoragesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all article storages</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ArticleStorage>> ArticleStoragesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ArticleStorages");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfArticleStorage);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfArticleStorage>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<ArticleStorage>);
        }

        /// <summary>Creates a new article storage</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ArticleStorage> ArticleStoragesV1_PostAsync(ArticleStorage articleStorage, string expand = null, string select = null)
        {
            return ArticleStoragesV1_PostAsync(CancellationToken.None, articleStorage, expand, select);
        }

        /// <summary>Creates a new article storage</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ArticleStorage> ArticleStoragesV1_PostAsync(CancellationToken cancellationToken, ArticleStorage articleStorage, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ArticleStorages");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(articleStorage));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(ArticleStorage);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ArticleStorage>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ArticleStorage);
        }

        /// <summary>Returns the article storage with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ArticleStorage> ArticleStoragesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ArticleStoragesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the article storage with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ArticleStorage> ArticleStoragesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ArticleStorages({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ArticleStorage);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ArticleStorage>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ArticleStorage);
        }

        /// <summary>Updates an existing article storage</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ArticleStorage> ArticleStoragesV1_PutByIdAsync(int id, ArticleStorage articleStorage, string expand = null, string select = null)
        {
            return ArticleStoragesV1_PutByIdAsync(CancellationToken.None, id, articleStorage, expand, select);
        }

        /// <summary>Updates an existing article storage</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ArticleStorage> ArticleStoragesV1_PutByIdAsync(CancellationToken cancellationToken, int id, ArticleStorage articleStorage, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ArticleStorages({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(articleStorage));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ArticleStorage);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ArticleStorage>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ArticleStorage);
        }

        /// <summary>Deletes an article storage</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> ArticleStoragesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return ArticleStoragesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }

        /// <summary>Deletes an article storage</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> ArticleStoragesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/ArticleStorages({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Headers.TryAddWithoutValidation("If-Match", if_Match);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all articles</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Article>> ArticlesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ArticlesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all articles</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Article>> ArticlesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfArticle);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfArticle>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<Article>);
        }

        /// <summary>Creates a new article</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Article> ArticlesV1_PostAsync(Article article, string expand = null, string select = null)
        {
            return ArticlesV1_PostAsync(CancellationToken.None, article, expand, select);
        }

        /// <summary>Creates a new article</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Article> ArticlesV1_PostAsync(CancellationToken cancellationToken, Article article, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(article));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(Article);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Article>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Article);
        }

        /// <summary>Returns the article with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Article> ArticlesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ArticlesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the article with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Article> ArticlesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Article);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Article>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Article);
        }

        /// <summary>Updates an existing article</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Article> ArticlesV1_PutByIdAsync(int id, Article article, string expand = null, string select = null)
        {
            return ArticlesV1_PutByIdAsync(CancellationToken.None, id, article, expand, select);
        }

        /// <summary>Updates an existing article</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Article> ArticlesV1_PutByIdAsync(CancellationToken cancellationToken, int id, Article article, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(article));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Article);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Article>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Article);
        }

        /// <summary>Deletes an article</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> ArticlesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return ArticlesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }

        /// <summary>Deletes an article</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> ArticlesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Articles({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Headers.TryAddWithoutValidation("If-Match", if_Match);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Creates an article stock transaction for the given article</summary>
        /// <param name="id">key: Id</param>
        /// <param name="articlesV1CreateTransactionParameters">Required parameters are Type, Quantity and StorageId. TargetStorageId is only required when the transaction is of type 'Rearrange'.</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ArticleStock> ArticlesV1_CreateTransactionByIdAsync(int id, ArticlesV1CreateTransactionParameters articlesV1CreateTransactionParameters, string expand = null, string select = null)
        {
            return ArticlesV1_CreateTransactionByIdAsync(CancellationToken.None, id, articlesV1CreateTransactionParameters, expand, select);
        }

        /// <summary>Creates an article stock transaction for the given article</summary>
        /// <param name="id">key: Id</param>
        /// <param name="articlesV1CreateTransactionParameters">Required parameters are Type, Quantity and StorageId. TargetStorageId is only required when the transaction is of type 'Rearrange'.</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ArticleStock> ArticlesV1_CreateTransactionByIdAsync(CancellationToken cancellationToken, int id, ArticlesV1CreateTransactionParameters articlesV1CreateTransactionParameters, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/do.CreateTransaction");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(articlesV1CreateTransactionParameters));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(ArticleStock);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ArticleStock>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ArticleStock);
        }

        /// <summary>Returns the article sales prices for the article with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ArticleSalesPrice>> ArticlesV1_GetSalesPricesByIdAsync(int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ArticlesV1_GetSalesPricesByIdAsync(CancellationToken.None, id, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns the article sales prices for the article with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ArticleSalesPrice>> ArticlesV1_GetSalesPricesByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/SalesPrices");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfArticleSalesPrice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfArticleSalesPrice>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<ArticleSalesPrice>);
        }

        /// <summary>Creates a new article sales price for the article with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ArticleSalesPrice> ArticlesV1_PostSalesPricesByIdAsync(int id, ArticleSalesPrice articleSalesPrice, string expand = null, string select = null)
        {
            return ArticlesV1_PostSalesPricesByIdAsync(CancellationToken.None, id, articleSalesPrice, expand, select);
        }

        /// <summary>Creates a new article sales price for the article with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ArticleSalesPrice> ArticlesV1_PostSalesPricesByIdAsync(CancellationToken cancellationToken, int id, ArticleSalesPrice articleSalesPrice, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/SalesPrices");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(articleSalesPrice));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(ArticleSalesPrice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ArticleSalesPrice>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ArticleSalesPrice);
        }

        /// <summary>Returns the article sales prices for the article with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ArticleSalesPrice> ArticlesV1_GetSalesPricesByIdAndSalespriceidAsync(int id, int salesPriceId, string expand = null, string select = null)
        {
            return ArticlesV1_GetSalesPricesByIdAndSalespriceidAsync(CancellationToken.None, id, salesPriceId, expand, select);
        }

        /// <summary>Returns the article sales prices for the article with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ArticleSalesPrice> ArticlesV1_GetSalesPricesByIdAndSalespriceidAsync(CancellationToken cancellationToken, int id, int salesPriceId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/SalesPrices({SalesPriceId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (salesPriceId == null)
                throw new ArgumentNullException("salesPriceId");
            url_ = url_.Replace("{SalesPriceId}", Uri.EscapeDataString(salesPriceId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ArticleSalesPrice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ArticleSalesPrice>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ArticleSalesPrice);
        }

        /// <summary>Updates an existing article sales price for the article with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ArticleSalesPrice> ArticlesV1_PutSalesPricesByIdAndSalespriceidAsync(int id, int salesPriceId, ArticleSalesPrice articleSalesPrice, string expand = null, string select = null)
        {
            return ArticlesV1_PutSalesPricesByIdAndSalespriceidAsync(CancellationToken.None, id, salesPriceId, articleSalesPrice, expand, select);
        }

        /// <summary>Updates an existing article sales price for the article with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ArticleSalesPrice> ArticlesV1_PutSalesPricesByIdAndSalespriceidAsync(CancellationToken cancellationToken, int id, int salesPriceId, ArticleSalesPrice articleSalesPrice, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/SalesPrices({SalesPriceId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (salesPriceId == null)
                throw new ArgumentNullException("salesPriceId");
            url_ = url_.Replace("{SalesPriceId}", Uri.EscapeDataString(salesPriceId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(articleSalesPrice));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(ArticleSalesPrice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ArticleSalesPrice>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ArticleSalesPrice);
        }

        /// <summary>Returns the article stocks of the selected article</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ArticleStock>> ArticlesV1_GetStocksByIdAsync(int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ArticlesV1_GetStocksByIdAsync(CancellationToken.None, id, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns the article stocks of the selected article</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ArticleStock>> ArticlesV1_GetStocksByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/Stocks");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfArticleStock);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfArticleStock>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<ArticleStock>);
        }

        /// <summary>Returns the article stock with the specified id of the selected article</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ArticleStock> ArticlesV1_GetStocksByIdAndStockidAsync(int id, int stockId, string expand = null, string select = null)
        {
            return ArticlesV1_GetStocksByIdAndStockidAsync(CancellationToken.None, id, stockId, expand, select);
        }

        /// <summary>Returns the article stock with the specified id of the selected article</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ArticleStock> ArticlesV1_GetStocksByIdAndStockidAsync(CancellationToken cancellationToken, int id, int stockId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/Stocks({StockId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (stockId == null)
                throw new ArgumentNullException("stockId");
            url_ = url_.Replace("{StockId}", Uri.EscapeDataString(stockId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ArticleStock);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ArticleStock>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ArticleStock);
        }

        /// <summary>Updates an existing article stock</summary>
        /// <param name="articleStock">The article stock to update</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ArticleStock> ArticlesV1_PutStocksByIdAndStockidAsync(int id, int stockId, ArticleStock articleStock, string expand = null, string select = null)
        {
            return ArticlesV1_PutStocksByIdAndStockidAsync(CancellationToken.None, id, stockId, articleStock, expand, select);
        }

        /// <summary>Updates an existing article stock</summary>
        /// <param name="articleStock">The article stock to update</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ArticleStock> ArticlesV1_PutStocksByIdAndStockidAsync(CancellationToken cancellationToken, int id, int stockId, ArticleStock articleStock, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/Stocks({StockId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (stockId == null)
                throw new ArgumentNullException("stockId");
            url_ = url_.Replace("{StockId}", Uri.EscapeDataString(stockId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(articleStock));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ArticleStock);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ArticleStock>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ArticleStock);
        }

        /// <summary>Returns the article stocks transactions of the selected article stock</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ArticleStockTransaction>> ArticlesV1_GetStocksTransactionsByIdAndStockidAsync(int id, int stockId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ArticlesV1_GetStocksTransactionsByIdAndStockidAsync(CancellationToken.None, id, stockId, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns the article stocks transactions of the selected article stock</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ArticleStockTransaction>> ArticlesV1_GetStocksTransactionsByIdAndStockidAsync(CancellationToken cancellationToken, int id, int stockId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/Stocks({StockId})/Transactions");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (stockId == null)
                throw new ArgumentNullException("stockId");
            url_ = url_.Replace("{StockId}", Uri.EscapeDataString(stockId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfArticleStockTransaction);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfArticleStockTransaction>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<ArticleStockTransaction>);
        }

        /// <summary>Returns the article stock with the specified id of the selected article</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ArticleStockTransaction> ArticlesV1_GetStocksTransactionsByIdAndStockidAndTransactionidAsync(int id, int stockId, int transactionId, string expand = null, string select = null)
        {
            return ArticlesV1_GetStocksTransactionsByIdAndStockidAndTransactionidAsync(CancellationToken.None, id, stockId, transactionId, expand, select);
        }

        /// <summary>Returns the article stock with the specified id of the selected article</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ArticleStockTransaction> ArticlesV1_GetStocksTransactionsByIdAndStockidAndTransactionidAsync(CancellationToken cancellationToken, int id, int stockId, int transactionId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/Stocks({StockId})/Transactions({TransactionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (stockId == null)
                throw new ArgumentNullException("stockId");
            url_ = url_.Replace("{StockId}", Uri.EscapeDataString(stockId.ToString()));

            if (transactionId == null)
                throw new ArgumentNullException("transactionId");
            url_ = url_.Replace("{TransactionId}", Uri.EscapeDataString(transactionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ArticleStockTransaction);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ArticleStockTransaction>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ArticleStockTransaction);
        }

        /// <summary>Returns all customfields of the article</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CustomField>> ArticlesV1_GetCustomFieldsByIdAsync(int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ArticlesV1_GetCustomFieldsByIdAsync(CancellationToken.None, id, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all customfields of the article</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CustomField>> ArticlesV1_GetCustomFieldsByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/CustomFields");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfCustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCustomField>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<CustomField>);
        }

        /// <summary>Returns the custom field with the specified id of the selected article</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> ArticlesV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(int id, int customFieldDefinitionId, string expand = null, string select = null)
        {
            return ArticlesV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken.None, id, customFieldDefinitionId, expand, select);
        }

        /// <summary>Returns the custom field with the specified id of the selected article</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> ArticlesV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int customFieldDefinitionId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Updates an existing customfield of the article</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> ArticlesV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(int id, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            return ArticlesV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken.None, id, customFieldDefinitionId, customField, expand, select);
        }

        /// <summary>Updates an existing customfield of the article</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> ArticlesV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Articles({Id})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(customField));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Returns all companies</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Company>> CompaniesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return CompaniesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all companies</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Company>> CompaniesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfCompany);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCompany>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<Company>);
        }

        /// <summary>Creates a new company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Company> CompaniesV1_PostAsync(Company company, string expand = null, string select = null)
        {
            return CompaniesV1_PostAsync(CancellationToken.None, company, expand, select);
        }

        /// <summary>Creates a new company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Company> CompaniesV1_PostAsync(CancellationToken cancellationToken, Company company, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(company));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(Company);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Company>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Company);
        }

        /// <summary>Returns the company with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Company> CompaniesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return CompaniesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the company with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Company> CompaniesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Company);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Company>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Company);
        }

        /// <summary>Updates an existing company</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Company> CompaniesV1_PutByIdAsync(int id, Company company, string expand = null, string select = null)
        {
            return CompaniesV1_PutByIdAsync(CancellationToken.None, id, company, expand, select);
        }

        /// <summary>Updates an existing company</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Company> CompaniesV1_PutByIdAsync(CancellationToken cancellationToken, int id, Company company, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(company));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Company);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Company>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Company);
        }

        /// <summary>Deletes a company</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> CompaniesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return CompaniesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }

        /// <summary>Deletes a company</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> CompaniesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Companies({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Headers.TryAddWithoutValidation("If-Match", if_Match);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all company addresses of the company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CompanyAddress>> CompaniesV1_GetAddressesByIdAsync(int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return CompaniesV1_GetAddressesByIdAsync(CancellationToken.None, id, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all company addresses of the company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CompanyAddress>> CompaniesV1_GetAddressesByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies({Id})/Addresses");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfCompanyAddress);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCompanyAddress>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<CompanyAddress>);
        }

        /// <summary>Returns the company address of the company with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CompanyAddress> CompaniesV1_GetAddressesByIdAndAddressidAsync(int id, int addressId, string expand = null, string select = null)
        {
            return CompaniesV1_GetAddressesByIdAndAddressidAsync(CancellationToken.None, id, addressId, expand, select);
        }

        /// <summary>Returns the company address of the company with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CompanyAddress> CompaniesV1_GetAddressesByIdAndAddressidAsync(CancellationToken cancellationToken, int id, int addressId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies({Id})/Addresses({AddressId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (addressId == null)
                throw new ArgumentNullException("addressId");
            url_ = url_.Replace("{AddressId}", Uri.EscapeDataString(addressId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CompanyAddress);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CompanyAddress>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CompanyAddress);
        }

        /// <summary>Returns all Files of the specified Company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<HQFile>> CompaniesV1_GetFilesByIdAsync(int id, string expand = null, string select = null)
        {
            return CompaniesV1_GetFilesByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns all Files of the specified Company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<HQFile>> CompaniesV1_GetFilesByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies({Id})/Files");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfHQFile);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfHQFile>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<HQFile>);
        }

        /// <summary>Creates a new File for the specified Company</summary>
        /// <param name="file">The new file</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> CompaniesV1_PostFilesByIdAsync(int id, HQFile file)
        {
            return CompaniesV1_PostFilesByIdAsync(CancellationToken.None, id, file);
        }

        /// <summary>Creates a new File for the specified Company</summary>
        /// <param name="file">The new file</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> CompaniesV1_PostFilesByIdAsync(CancellationToken cancellationToken, int id, HQFile file)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Companies({Id})/Files");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(file));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns the specified File of the specified Company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<HQFile> CompaniesV1_GetFilesByIdAndFileidAsync(int id, int fileId, string expand = null, string select = null)
        {
            return CompaniesV1_GetFilesByIdAndFileidAsync(CancellationToken.None, id, fileId, expand, select);
        }

        /// <summary>Returns the specified File of the specified Company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<HQFile> CompaniesV1_GetFilesByIdAndFileidAsync(CancellationToken cancellationToken, int id, int fileId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies({Id})/Files({FileId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (fileId == null)
                throw new ArgumentNullException("fileId");
            url_ = url_.Replace("{FileId}", Uri.EscapeDataString(fileId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(HQFile);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<HQFile>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(HQFile);
        }

        /// <summary>Updates the specified File of the specified Company</summary>
        /// <param name="file">The updated file</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<HQFile> CompaniesV1_PutFilesByIdAndFileidAsync(int id, int fileId, HQFile file)
        {
            return CompaniesV1_PutFilesByIdAndFileidAsync(CancellationToken.None, id, fileId, file);
        }

        /// <summary>Updates the specified File of the specified Company</summary>
        /// <param name="file">The updated file</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<HQFile> CompaniesV1_PutFilesByIdAndFileidAsync(CancellationToken cancellationToken, int id, int fileId, HQFile file)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Companies({Id})/Files({FileId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (fileId == null)
                throw new ArgumentNullException("fileId");
            url_ = url_.Replace("{FileId}", Uri.EscapeDataString(fileId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(file));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(HQFile);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<HQFile>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(HQFile);
        }

        /// <summary>Deletes the specified File of the specified Company</summary>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> CompaniesV1_DeleteFilesByIdAndFileidAsync(int id, int fileId)
        {
            return CompaniesV1_DeleteFilesByIdAndFileidAsync(CancellationToken.None, id, fileId);
        }

        /// <summary>Deletes the specified File of the specified Company</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> CompaniesV1_DeleteFilesByIdAndFileidAsync(CancellationToken cancellationToken, int id, int fileId)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Companies({Id})/Files({FileId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (fileId == null)
                throw new ArgumentNullException("fileId");
            url_ = url_.Replace("{FileId}", Uri.EscapeDataString(fileId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all customfields of the company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CustomField>> CompaniesV1_GetCustomFieldsByIdAsync(int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return CompaniesV1_GetCustomFieldsByIdAsync(CancellationToken.None, id, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all customfields of the company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CustomField>> CompaniesV1_GetCustomFieldsByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies({Id})/CustomFields");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfCustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCustomField>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<CustomField>);
        }

        /// <summary>Returns the custom field with the specified id of the selected company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> CompaniesV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(int id, int customFieldDefinitionId, string expand = null, string select = null)
        {
            return CompaniesV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken.None, id, customFieldDefinitionId, expand, select);
        }

        /// <summary>Returns the custom field with the specified id of the selected company</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> CompaniesV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int customFieldDefinitionId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies({Id})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Updates an existing customfield of the company</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> CompaniesV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(int id, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            return CompaniesV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken.None, id, customFieldDefinitionId, customField, expand, select);
        }

        /// <summary>Updates an existing customfield of the company</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> CompaniesV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Companies({Id})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(customField));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Returns all company types</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CompanyType>> CompanyTypesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return CompanyTypesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all company types</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CompanyType>> CompanyTypesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/CompanyTypes");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfCompanyType);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCompanyType>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<CompanyType>);
        }

        /// <summary>Returns the specified company type</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CompanyType> CompanyTypesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return CompanyTypesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the specified company type</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CompanyType> CompanyTypesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/CompanyTypes({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CompanyType);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CompanyType>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CompanyType);
        }

        /// <summary>Deletes the specified company type</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> CompanyTypesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return CompanyTypesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }

        /// <summary>Deletes the specified company type</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> CompanyTypesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/CompanyTypes({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Headers.TryAddWithoutValidation("If-Match", if_Match);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all internal companies</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<InternalCompany>> InternalCompaniesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return InternalCompaniesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all internal companies</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<InternalCompany>> InternalCompaniesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/InternalCompanies");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfInternalCompany);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfInternalCompany>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<InternalCompany>);
        }

        /// <summary>Returns the internal company with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<InternalCompany> InternalCompaniesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return InternalCompaniesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the internal company with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<InternalCompany> InternalCompaniesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/InternalCompanies({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(InternalCompany);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<InternalCompany>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(InternalCompany);
        }

        /// <summary>Returns all contact histories</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ContactHistory>> ContactHistoriesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ContactHistoriesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all contact histories</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ContactHistory>> ContactHistoriesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ContactHistories");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfContactHistory);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfContactHistory>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<ContactHistory>);
        }

        /// <summary>Creates a new contact history</summary>
        /// <param name="contactHistory">The contact history to be created</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> ContactHistoriesV1_PostAsync(ContactHistory contactHistory)
        {
            return ContactHistoriesV1_PostAsync(CancellationToken.None, contactHistory);
        }

        /// <summary>Creates a new contact history</summary>
        /// <param name="contactHistory">The contact history to be created</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> ContactHistoriesV1_PostAsync(CancellationToken cancellationToken, ContactHistory contactHistory)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/ContactHistories");

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(contactHistory));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns the contact history with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ContactHistory> ContactHistoriesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ContactHistoriesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the contact history with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ContactHistory> ContactHistoriesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ContactHistories({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ContactHistory);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ContactHistory>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ContactHistory);
        }

        /// <summary>Updates an existing contact history</summary>
        /// <param name="id">key: Id</param>
        /// <param name="contactHistory">The contact history to be updated</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ContactHistory> ContactHistoriesV1_PutByIdAsync(int id, ContactHistory contactHistory)
        {
            return ContactHistoriesV1_PutByIdAsync(CancellationToken.None, id, contactHistory);
        }

        /// <summary>Updates an existing contact history</summary>
        /// <param name="id">key: Id</param>
        /// <param name="contactHistory">The contact history to be updated</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ContactHistory> ContactHistoriesV1_PutByIdAsync(CancellationToken cancellationToken, int id, ContactHistory contactHistory)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/ContactHistories({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(contactHistory));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ContactHistory);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ContactHistory>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ContactHistory);
        }

        /// <summary>Deletes a contact history</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> ContactHistoriesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return ContactHistoriesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }

        /// <summary>Deletes a contact history</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> ContactHistoriesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/ContactHistories({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Headers.TryAddWithoutValidation("If-Match", if_Match);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all contact histories</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ContactPerson>> ContactPersonsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ContactPersonsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all contact histories</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ContactPerson>> ContactPersonsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ContactPersons");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfContactPerson);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfContactPerson>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<ContactPerson>);
        }

        /// <summary>Creates a new contact person</summary>
        /// <param name="contactPerson">The contact person to be created</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ContactPerson> ContactPersonsV1_PostAsync(ContactPerson contactPerson, string expand = null, string select = null)
        {
            return ContactPersonsV1_PostAsync(CancellationToken.None, contactPerson, expand, select);
        }

        /// <summary>Creates a new contact person</summary>
        /// <param name="contactPerson">The contact person to be created</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ContactPerson> ContactPersonsV1_PostAsync(CancellationToken cancellationToken, ContactPerson contactPerson, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ContactPersons");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(contactPerson));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(ContactPerson);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ContactPerson>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ContactPerson);
        }

        /// <summary>Returns the contact person with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ContactPerson> ContactPersonsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ContactPersonsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the contact person with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ContactPerson> ContactPersonsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ContactPersons({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ContactPerson);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ContactPerson>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ContactPerson);
        }

        /// <summary>Updates an existing contact person</summary>
        /// <param name="id">key: Id</param>
        /// <param name="contactPerson">The contact person to be updated</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ContactPerson> ContactPersonsV1_PutByIdAsync(int id, ContactPerson contactPerson, string expand = null, string select = null)
        {
            return ContactPersonsV1_PutByIdAsync(CancellationToken.None, id, contactPerson, expand, select);
        }

        /// <summary>Updates an existing contact person</summary>
        /// <param name="id">key: Id</param>
        /// <param name="contactPerson">The contact person to be updated</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ContactPerson> ContactPersonsV1_PutByIdAsync(CancellationToken cancellationToken, int id, ContactPerson contactPerson, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ContactPersons({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(contactPerson));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ContactPerson);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ContactPerson>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ContactPerson);
        }

        /// <summary>Deletes a contact person</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> ContactPersonsV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return ContactPersonsV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }

        /// <summary>Deletes a contact person</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> ContactPersonsV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/ContactPersons({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Headers.TryAddWithoutValidation("If-Match", if_Match);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all customfields of the contact person</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CustomField>> ContactPersonsV1_GetCustomFieldsByIdAsync(int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ContactPersonsV1_GetCustomFieldsByIdAsync(CancellationToken.None, id, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all customfields of the contact person</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CustomField>> ContactPersonsV1_GetCustomFieldsByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ContactPersons({Id})/CustomFields");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfCustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCustomField>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<CustomField>);
        }

        /// <summary>Returns the custom field with the specified id of the selected contact person</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> ContactPersonsV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(int id, int customFieldDefinitionId, string expand = null, string select = null)
        {
            return ContactPersonsV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken.None, id, customFieldDefinitionId, expand, select);
        }

        /// <summary>Returns the custom field with the specified id of the selected contact person</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> ContactPersonsV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int customFieldDefinitionId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ContactPersons({Id})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Updates an existing customfield of the contact person</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> ContactPersonsV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(int id, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            return ContactPersonsV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken.None, id, customFieldDefinitionId, customField, expand, select);
        }

        /// <summary>Updates an existing customfield of the contact person</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> ContactPersonsV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ContactPersons({Id})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(customField));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Returns all customfield definitions</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CustomFieldDefinition>> CustomFieldDefinitionsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return CustomFieldDefinitionsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all customfield definitions</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CustomFieldDefinition>> CustomFieldDefinitionsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/CustomFieldDefinitions");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfCustomFieldDefinition);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCustomFieldDefinition>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<CustomFieldDefinition>);
        }

        /// <summary>Returns the custom field definition with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomFieldDefinition> CustomFieldDefinitionsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return CustomFieldDefinitionsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the custom field definition with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomFieldDefinition> CustomFieldDefinitionsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/CustomFieldDefinitions({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomFieldDefinition);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomFieldDefinition>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomFieldDefinition);
        }

        /// <summary>Returns all document conditions</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<DocumentCondition>> DocumentConditionsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return DocumentConditionsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all document conditions</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<DocumentCondition>> DocumentConditionsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/DocumentConditions");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfDocumentCondition);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfDocumentCondition>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<DocumentCondition>);
        }

        /// <summary>Returns document conditions with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<DocumentCondition> DocumentConditionsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return DocumentConditionsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns document conditions with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<DocumentCondition> DocumentConditionsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/DocumentConditions({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(DocumentCondition);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<DocumentCondition>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(DocumentCondition);
        }

        /// <summary>Returns all document templates</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<DocumentTemplate>> DocumentTemplatesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return DocumentTemplatesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all document templates</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<DocumentTemplate>> DocumentTemplatesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/DocumentTemplates");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfDocumentTemplate);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfDocumentTemplate>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<DocumentTemplate>);
        }

        /// <summary>Returns document template with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CompanyType> DocumentTemplatesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return DocumentTemplatesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns document template with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CompanyType> DocumentTemplatesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/DocumentTemplates({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CompanyType);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CompanyType>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CompanyType);
        }

        /// <summary>Returns all invoices</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Invoice>> InvoicesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return InvoicesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all invoices</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Invoice>> InvoicesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfInvoice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfInvoice>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<Invoice>);
        }

        /// <summary>Creates a new invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Invoice> InvoicesV1_PostAsync(Invoice invoice, string expand = null, string select = null)
        {
            return InvoicesV1_PostAsync(CancellationToken.None, invoice, expand, select);
        }

        /// <summary>Creates a new invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Invoice> InvoicesV1_PostAsync(CancellationToken cancellationToken, Invoice invoice, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(invoice));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(Invoice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Invoice>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Invoice);
        }

        /// <summary>Returns the invoice with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Invoice> InvoicesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return InvoicesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the invoice with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Invoice> InvoicesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Invoice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Invoice>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Invoice);
        }

        /// <summary>Updates an existing invoice</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Invoice> InvoicesV1_PutByIdAsync(int id, Invoice invoice, string expand = null, string select = null)
        {
            return InvoicesV1_PutByIdAsync(CancellationToken.None, id, invoice, expand, select);
        }

        /// <summary>Updates an existing invoice</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Invoice> InvoicesV1_PutByIdAsync(CancellationToken cancellationToken, int id, Invoice invoice, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(invoice));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Invoice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Invoice>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Invoice);
        }

        /// <summary>Deletes an invoice</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> InvoicesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return InvoicesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }

        /// <summary>Deletes an invoice</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> InvoicesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Invoices({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Headers.TryAddWithoutValidation("If-Match", if_Match);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Changes the status of an invoice</summary>
        /// <param name="id">key: Id</param>
        /// <param name="invoicesV1SetStatusParameters">The parameter object, where 'status' is the new status to set</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> InvoicesV1_SetStatusByIdAsync(int id, InvoicesV1SetStatusParameters invoicesV1SetStatusParameters)
        {
            return InvoicesV1_SetStatusByIdAsync(CancellationToken.None, id, invoicesV1SetStatusParameters);
        }

        /// <summary>Changes the status of an invoice</summary>
        /// <param name="id">key: Id</param>
        /// <param name="invoicesV1SetStatusParameters">The parameter object, where 'status' is the new status to set</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> InvoicesV1_SetStatusByIdAsync(CancellationToken cancellationToken, int id, InvoicesV1SetStatusParameters invoicesV1SetStatusParameters)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Invoices({Id})/do.SetStatus");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(invoicesV1SetStatusParameters));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Creates a cancellation of a given invoice</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Invoice> InvoicesV1_CreateCancellationByIdAsync(int id, string expand = null, string select = null)
        {
            return InvoicesV1_CreateCancellationByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Creates a cancellation of a given invoice</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Invoice> InvoicesV1_CreateCancellationByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices({Id})/do.CreateCancellation");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(Invoice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Invoice>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Invoice);
        }

        /// <summary>Creates a copy of the invoice</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Invoice> InvoicesV1_CopyInvoiceByIdAsync(int id, string expand = null, string select = null)
        {
            return InvoicesV1_CopyInvoiceByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Creates a copy of the invoice</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Invoice> InvoicesV1_CopyInvoiceByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices({Id})/do.CopyInvoice");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(Invoice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Invoice>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Invoice);
        }

        /// <summary>Attaches an advance invoice to the given invoice</summary>
        /// <param name="id">key: Id</param>
        /// <param name="invoicesV1AttachAdvanceInvoiceParameters">The parameter object, where 'advanceInvoiceId' is required and represents the Id of the advance invoice that should be attached to the invoice.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> InvoicesV1_AttachAdvanceInvoiceByIdAsync(int id, InvoicesV1AttachAdvanceInvoiceParameters invoicesV1AttachAdvanceInvoiceParameters)
        {
            return InvoicesV1_AttachAdvanceInvoiceByIdAsync(CancellationToken.None, id, invoicesV1AttachAdvanceInvoiceParameters);
        }

        /// <summary>Attaches an advance invoice to the given invoice</summary>
        /// <param name="id">key: Id</param>
        /// <param name="invoicesV1AttachAdvanceInvoiceParameters">The parameter object, where 'advanceInvoiceId' is required and represents the Id of the advance invoice that should be attached to the invoice.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> InvoicesV1_AttachAdvanceInvoiceByIdAsync(CancellationToken cancellationToken, int id, InvoicesV1AttachAdvanceInvoiceParameters invoicesV1AttachAdvanceInvoiceParameters)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Invoices({Id})/do.AttachAdvanceInvoice");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(invoicesV1AttachAdvanceInvoiceParameters));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all customfields of the invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CustomField>> InvoicesV1_GetPositionsCustomFieldsByIdAndPositionidAsync(int id, int positionId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return InvoicesV1_GetPositionsCustomFieldsByIdAndPositionidAsync(CancellationToken.None, id, positionId, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all customfields of the invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CustomField>> InvoicesV1_GetPositionsCustomFieldsByIdAndPositionidAsync(CancellationToken cancellationToken, int id, int positionId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices({Id})/Positions({PositionId})/CustomFields");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (positionId == null)
                throw new ArgumentNullException("positionId");
            url_ = url_.Replace("{PositionId}", Uri.EscapeDataString(positionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfCustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCustomField>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<CustomField>);
        }

        /// <summary>Returns the custom field with the specified id of the selected invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> InvoicesV1_GetPositionsCustomFieldsByIdAndPositionidAndCustomfielddefinitionidAsync(int id, int positionId, int customFieldDefinitionId, string expand = null, string select = null)
        {
            return InvoicesV1_GetPositionsCustomFieldsByIdAndPositionidAndCustomfielddefinitionidAsync(CancellationToken.None, id, positionId, customFieldDefinitionId, expand, select);
        }

        /// <summary>Returns the custom field with the specified id of the selected invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> InvoicesV1_GetPositionsCustomFieldsByIdAndPositionidAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int positionId, int customFieldDefinitionId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices({Id})/Positions({PositionId})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (positionId == null)
                throw new ArgumentNullException("positionId");
            url_ = url_.Replace("{PositionId}", Uri.EscapeDataString(positionId.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Updates an existing customfield of the invoice</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> InvoicesV1_PutPositionsCustomFieldsByIdAndPositionidAndCustomfielddefinitionidAsync(int id, int positionId, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            return InvoicesV1_PutPositionsCustomFieldsByIdAndPositionidAndCustomfielddefinitionidAsync(CancellationToken.None, id, positionId, customFieldDefinitionId, customField, expand, select);
        }

        /// <summary>Updates an existing customfield of the invoice</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> InvoicesV1_PutPositionsCustomFieldsByIdAndPositionidAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int positionId, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices({Id})/Positions({PositionId})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (positionId == null)
                throw new ArgumentNullException("positionId");
            url_ = url_.Replace("{PositionId}", Uri.EscapeDataString(positionId.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(customField));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Returns all document positions on the specified invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<DocumentPosition>> InvoicesV1_GetPositionsByIdAsync(int id, string expand = null, string select = null)
        {
            return InvoicesV1_GetPositionsByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns all document positions on the specified invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<DocumentPosition>> InvoicesV1_GetPositionsByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices({Id})/Positions");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfDocumentPosition);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfDocumentPosition>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<DocumentPosition>);
        }

        /// <summary>Creates a new position on the specified invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<DocumentPosition> InvoicesV1_PostPositionsByIdAsync(int id, DocumentPosition position, string expand = null, string select = null)
        {
            return InvoicesV1_PostPositionsByIdAsync(CancellationToken.None, id, position, expand, select);
        }

        /// <summary>Creates a new position on the specified invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<DocumentPosition> InvoicesV1_PostPositionsByIdAsync(CancellationToken cancellationToken, int id, DocumentPosition position, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices({Id})/Positions");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(position));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(DocumentPosition);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<DocumentPosition>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(DocumentPosition);
        }

        /// <summary>Returns a position on the specified invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<DocumentPosition> InvoicesV1_GetPositionsByIdAndPositionidAsync(int id, int positionId, string expand = null, string select = null)
        {
            return InvoicesV1_GetPositionsByIdAndPositionidAsync(CancellationToken.None, id, positionId, expand, select);
        }

        /// <summary>Returns a position on the specified invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<DocumentPosition> InvoicesV1_GetPositionsByIdAndPositionidAsync(CancellationToken cancellationToken, int id, int positionId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices({Id})/Positions({PositionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (positionId == null)
                throw new ArgumentNullException("positionId");
            url_ = url_.Replace("{PositionId}", Uri.EscapeDataString(positionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(DocumentPosition);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<DocumentPosition>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(DocumentPosition);
        }

        /// <summary>Updates an existing position on the specified invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<DocumentPosition> InvoicesV1_PutPositionsByIdAndPositionidAsync(int id, int positionId, DocumentPosition position, string expand = null, string select = null)
        {
            return InvoicesV1_PutPositionsByIdAndPositionidAsync(CancellationToken.None, id, positionId, position, expand, select);
        }

        /// <summary>Updates an existing position on the specified invoice</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<DocumentPosition> InvoicesV1_PutPositionsByIdAndPositionidAsync(CancellationToken cancellationToken, int id, int positionId, DocumentPosition position, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Invoices({Id})/Positions({PositionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (positionId == null)
                throw new ArgumentNullException("positionId");
            url_ = url_.Replace("{PositionId}", Uri.EscapeDataString(positionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(position));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(DocumentPosition);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<DocumentPosition>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(DocumentPosition);
        }

        /// <summary>Deletes a position on the specified invoice</summary>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> InvoicesV1_DeletePositionsByIdAndPositionidAsync(int id, int positionId)
        {
            return InvoicesV1_DeletePositionsByIdAndPositionidAsync(CancellationToken.None, id, positionId);
        }

        /// <summary>Deletes a position on the specified invoice</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> InvoicesV1_DeletePositionsByIdAndPositionidAsync(CancellationToken cancellationToken, int id, int positionId)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Invoices({Id})/Positions({PositionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (positionId == null)
                throw new ArgumentNullException("positionId");
            url_ = url_.Replace("{PositionId}", Uri.EscapeDataString(positionId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns the real binary data of the pdf file</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> InvoicesV1_GetValueFromInvoicesDocumentFileByIdAsync(int id)
        {
            return InvoicesV1_GetValueFromInvoicesDocumentFileByIdAsync(CancellationToken.None, id);
        }

        /// <summary>Returns the real binary data of the pdf file</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> InvoicesV1_GetValueFromInvoicesDocumentFileByIdAsync(CancellationToken cancellationToken, int id)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Invoices({Id})/DocumentFile/$value");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                return responseData_;
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return null;
        }

        /// <summary>Returns all quotations</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Quotation>> QuotationsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return QuotationsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all quotations</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Quotation>> QuotationsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfQuotation);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfQuotation>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<Quotation>);
        }

        /// <summary>Creates a new quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Quotation> QuotationsV1_PostAsync(Quotation quotation, string expand = null, string select = null)
        {
            return QuotationsV1_PostAsync(CancellationToken.None, quotation, expand, select);
        }

        /// <summary>Creates a new quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Quotation> QuotationsV1_PostAsync(CancellationToken cancellationToken, Quotation quotation, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(quotation));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(Quotation);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Quotation>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Quotation);
        }

        /// <summary>Returns the quotation with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Quotation> QuotationsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return QuotationsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the quotation with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Quotation> QuotationsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Quotation);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Quotation>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Quotation);
        }

        /// <summary>Updates an existing quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Quotation> QuotationsV1_PutByIdAsync(int id, Quotation quotation, string expand = null, string select = null)
        {
            return QuotationsV1_PutByIdAsync(CancellationToken.None, id, quotation, expand, select);
        }

        /// <summary>Updates an existing quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Quotation> QuotationsV1_PutByIdAsync(CancellationToken cancellationToken, int id, Quotation quotation, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(quotation));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Quotation);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Quotation>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Quotation);
        }

        /// <summary>Deletes a quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> QuotationsV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return QuotationsV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }

        /// <summary>Deletes a quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> QuotationsV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Quotations({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Headers.TryAddWithoutValidation("If-Match", if_Match);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Changes the status of a quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="quotationsV1SetStatusParameters">The parameter object, where 'status' is the new status to set</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> QuotationsV1_SetStatusByIdAsync(int id, QuotationsV1SetStatusParameters quotationsV1SetStatusParameters)
        {
            return QuotationsV1_SetStatusByIdAsync(CancellationToken.None, id, quotationsV1SetStatusParameters);
        }

        /// <summary>Changes the status of a quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="quotationsV1SetStatusParameters">The parameter object, where 'status' is the new status to set</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> QuotationsV1_SetStatusByIdAsync(CancellationToken cancellationToken, int id, QuotationsV1SetStatusParameters quotationsV1SetStatusParameters)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Quotations({Id})/do.SetStatus");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(quotationsV1SetStatusParameters));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Creates the final invoice for a quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Invoice> QuotationsV1_CreateFinalInvoiceByIdAsync(int id, string expand = null, string select = null)
        {
            return QuotationsV1_CreateFinalInvoiceByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Creates the final invoice for a quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Invoice> QuotationsV1_CreateFinalInvoiceByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})/do.CreateFinalInvoice");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(Invoice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Invoice>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Invoice);
        }

        /// <summary>Creates a copy of a quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Quotation> QuotationsV1_CopyQuotationByIdAsync(int id, string expand = null, string select = null)
        {
            return QuotationsV1_CopyQuotationByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Creates a copy of a quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Quotation> QuotationsV1_CopyQuotationByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})/do.CopyQuotation");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(Quotation);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Quotation>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Quotation);
        }

        /// <summary>Creates an advance invoice for a quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="quotationsV1CreateAdvanceInvoiceParameters">The parameter object, where 'invoiceType' and 'advanceInvoiceValue' are required. 'invoiceType' can either be '1' (take a certain percentage of the whole invoice for the advance invoice) or '2' (make an advance invoice with a fixed sum in the invoice currency). In case of a percentage, 'advanceInvoiceValue' represents the percentage value 0-100. In case of a fixed sum, it represents the net sum of the advance invoice, which must be less or equal to the quotation total.</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Invoice> QuotationsV1_CreateAdvanceInvoiceByIdAsync(int id, QuotationsV1CreateAdvanceInvoiceParameters quotationsV1CreateAdvanceInvoiceParameters, string expand = null, string select = null)
        {
            return QuotationsV1_CreateAdvanceInvoiceByIdAsync(CancellationToken.None, id, quotationsV1CreateAdvanceInvoiceParameters, expand, select);
        }

        /// <summary>Creates an advance invoice for a quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="quotationsV1CreateAdvanceInvoiceParameters">The parameter object, where 'invoiceType' and 'advanceInvoiceValue' are required. 'invoiceType' can either be '1' (take a certain percentage of the whole invoice for the advance invoice) or '2' (make an advance invoice with a fixed sum in the invoice currency). In case of a percentage, 'advanceInvoiceValue' represents the percentage value 0-100. In case of a fixed sum, it represents the net sum of the advance invoice, which must be less or equal to the quotation total.</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Invoice> QuotationsV1_CreateAdvanceInvoiceByIdAsync(CancellationToken cancellationToken, int id, QuotationsV1CreateAdvanceInvoiceParameters quotationsV1CreateAdvanceInvoiceParameters, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})/do.CreateAdvanceInvoice");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(quotationsV1CreateAdvanceInvoiceParameters));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(Invoice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Invoice>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Invoice);
        }

        /// <summary>Creates an invoice for a quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Invoice> QuotationsV1_CreateInvoiceByIdAsync(int id, string expand = null, string select = null)
        {
            return QuotationsV1_CreateInvoiceByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Creates an invoice for a quotation</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Invoice> QuotationsV1_CreateInvoiceByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})/do.CreateInvoice");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(Invoice);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Invoice>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Invoice);
        }

        /// <summary>Returns all customfields of the quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CustomField>> QuotationsV1_GetPositionsCustomFieldsByIdAndPositionidAsync(int id, int positionId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return QuotationsV1_GetPositionsCustomFieldsByIdAndPositionidAsync(CancellationToken.None, id, positionId, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all customfields of the quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CustomField>> QuotationsV1_GetPositionsCustomFieldsByIdAndPositionidAsync(CancellationToken cancellationToken, int id, int positionId, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})/Positions({PositionId})/CustomFields");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (positionId == null)
                throw new ArgumentNullException("positionId");
            url_ = url_.Replace("{PositionId}", Uri.EscapeDataString(positionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfCustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCustomField>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<CustomField>);
        }

        /// <summary>Returns the custom field with the specified id of the selected quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> QuotationsV1_GetPositionsCustomFieldsByIdAndPositionidAndCustomfielddefinitionidAsync(int id, int positionId, int customFieldDefinitionId, string expand = null, string select = null)
        {
            return QuotationsV1_GetPositionsCustomFieldsByIdAndPositionidAndCustomfielddefinitionidAsync(CancellationToken.None, id, positionId, customFieldDefinitionId, expand, select);
        }

        /// <summary>Returns the custom field with the specified id of the selected quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> QuotationsV1_GetPositionsCustomFieldsByIdAndPositionidAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int positionId, int customFieldDefinitionId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})/Positions({PositionId})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (positionId == null)
                throw new ArgumentNullException("positionId");
            url_ = url_.Replace("{PositionId}", Uri.EscapeDataString(positionId.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Updates an existing customfield of the quotation</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> QuotationsV1_PutPositionsCustomFieldsByIdAndPositionidAndCustomfielddefinitionidAsync(int id, int positionId, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            return QuotationsV1_PutPositionsCustomFieldsByIdAndPositionidAndCustomfielddefinitionidAsync(CancellationToken.None, id, positionId, customFieldDefinitionId, customField, expand, select);
        }

        /// <summary>Updates an existing customfield of the quotation</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> QuotationsV1_PutPositionsCustomFieldsByIdAndPositionidAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int positionId, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})/Positions({PositionId})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (positionId == null)
                throw new ArgumentNullException("positionId");
            url_ = url_.Replace("{PositionId}", Uri.EscapeDataString(positionId.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(customField));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Returns all positions on the specified quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<DocumentPosition>> QuotationsV1_GetPositionsByIdAsync(int id, string expand = null, string select = null)
        {
            return QuotationsV1_GetPositionsByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns all positions on the specified quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<DocumentPosition>> QuotationsV1_GetPositionsByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})/Positions");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfDocumentPosition);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfDocumentPosition>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<DocumentPosition>);
        }

        /// <summary>Creates a new position on the specified quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<DocumentPosition> QuotationsV1_PostPositionsByIdAsync(int id, DocumentPosition position, string expand = null, string select = null)
        {
            return QuotationsV1_PostPositionsByIdAsync(CancellationToken.None, id, position, expand, select);
        }

        /// <summary>Creates a new position on the specified quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<DocumentPosition> QuotationsV1_PostPositionsByIdAsync(CancellationToken cancellationToken, int id, DocumentPosition position, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})/Positions");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(position));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(DocumentPosition);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<DocumentPosition>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(DocumentPosition);
        }

        /// <summary>Returns a position on the specified quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<DocumentPosition> QuotationsV1_GetPositionsByIdAndPositionidAsync(int id, int positionId, string expand = null, string select = null)
        {
            return QuotationsV1_GetPositionsByIdAndPositionidAsync(CancellationToken.None, id, positionId, expand, select);
        }

        /// <summary>Returns a position on the specified quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<DocumentPosition> QuotationsV1_GetPositionsByIdAndPositionidAsync(CancellationToken cancellationToken, int id, int positionId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})/Positions({PositionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (positionId == null)
                throw new ArgumentNullException("positionId");
            url_ = url_.Replace("{PositionId}", Uri.EscapeDataString(positionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(DocumentPosition);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<DocumentPosition>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(DocumentPosition);
        }

        /// <summary>Updates an existing position on the specified quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<DocumentPosition> QuotationsV1_PutPositionsByIdAndPositionidAsync(int id, int positionId, DocumentPosition position, string expand = null, string select = null)
        {
            return QuotationsV1_PutPositionsByIdAndPositionidAsync(CancellationToken.None, id, positionId, position, expand, select);
        }

        /// <summary>Updates an existing position on the specified quotation</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<DocumentPosition> QuotationsV1_PutPositionsByIdAndPositionidAsync(CancellationToken cancellationToken, int id, int positionId, DocumentPosition position, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Quotations({Id})/Positions({PositionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (positionId == null)
                throw new ArgumentNullException("positionId");
            url_ = url_.Replace("{PositionId}", Uri.EscapeDataString(positionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(position));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(DocumentPosition);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<DocumentPosition>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(DocumentPosition);
        }

        /// <summary>Deletes a position on the specified quotation</summary>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> QuotationsV1_DeletePositionsByIdAndPositionidAsync(int id, int positionId)
        {
            return QuotationsV1_DeletePositionsByIdAndPositionidAsync(CancellationToken.None, id, positionId);
        }

        /// <summary>Deletes a position on the specified quotation</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> QuotationsV1_DeletePositionsByIdAndPositionidAsync(CancellationToken cancellationToken, int id, int positionId)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Quotations({Id})/Positions({PositionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (positionId == null)
                throw new ArgumentNullException("positionId");
            url_ = url_.Replace("{PositionId}", Uri.EscapeDataString(positionId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all file meta data</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<HQFile> FilesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return FilesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all file meta data</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<HQFile> FilesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Files");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(HQFile);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<HQFile>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(HQFile);
        }

        /// <summary>Creates new file meta data</summary>
        /// <param name="hQFile">The entity to post</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> FilesV1_PostAsync(HQFile hQFile)
        {
            return FilesV1_PostAsync(CancellationToken.None, hQFile);
        }

        /// <summary>Creates new file meta data</summary>
        /// <param name="hQFile">The entity to post</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> FilesV1_PostAsync(CancellationToken cancellationToken, HQFile hQFile)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Files");

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(hQFile));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns the meta data of the file</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<HQFile> FilesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return FilesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the meta data of the file</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<HQFile> FilesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Files({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(HQFile);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<HQFile>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(HQFile);
        }

        /// <summary>Updates existing file meta data</summary>
        /// <param name="id">key: Id</param>
        /// <param name="hQFile">The entity to put</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<HQFile> FilesV1_PutByIdAsync(int id, HQFile hQFile)
        {
            return FilesV1_PutByIdAsync(CancellationToken.None, id, hQFile);
        }

        /// <summary>Updates existing file meta data</summary>
        /// <param name="id">key: Id</param>
        /// <param name="hQFile">The entity to put</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<HQFile> FilesV1_PutByIdAsync(CancellationToken cancellationToken, int id, HQFile hQFile)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Files({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(hQFile));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(HQFile);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<HQFile>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(HQFile);
        }

        /// <summary>Deletes a file (meta data and binary content)</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> FilesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return FilesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }

        /// <summary>Deletes a file (meta data and binary content)</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> FilesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Files({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Headers.TryAddWithoutValidation("If-Match", if_Match);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Uploads the binary data of the file</summary>
        /// <param name="id">key: Id</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> FilesV1_UploadByIdAsync(int id)
        {
            return FilesV1_UploadByIdAsync(CancellationToken.None, id);
        }

        /// <summary>Uploads the binary data of the file</summary>
        /// <param name="id">key: Id</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> FilesV1_UploadByIdAsync(CancellationToken cancellationToken, int id)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Files({Id})/do.Upload");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Downloads the binary data of the file</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> FilesV1_GetValueFromFilesByIdAsync(int id)
        {
            return FilesV1_GetValueFromFilesByIdAsync(CancellationToken.None, id);
        }

        /// <summary>Downloads the binary data of the file</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> FilesV1_GetValueFromFilesByIdAsync(CancellationToken cancellationToken, int id)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Files({Id})/$value");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(byte[]);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<byte[]>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(byte[]);
        }

        /// <summary>Returns all lead status</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<LeadStatus>> LeadStatusesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return LeadStatusesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all lead status</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<LeadStatus>> LeadStatusesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/LeadStatuses");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfLeadStatus);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfLeadStatus>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<LeadStatus>);
        }

        /// <summary>Returns the lead status with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<LeadStatus> LeadStatusesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return LeadStatusesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the lead status with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<LeadStatus> LeadStatusesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/LeadStatuses({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(LeadStatus);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<LeadStatus>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(LeadStatus);
        }

        /// <summary>Returns all leads</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Lead>> LeadsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return LeadsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all leads</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Lead>> LeadsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Leads");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfLead);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfLead>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<Lead>);
        }

        /// <summary>Returns the lead with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Lead> LeadsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return LeadsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the lead with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Lead> LeadsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Leads({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Lead);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Lead>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Lead);
        }

        /// <summary>Returns all customfields of the lead</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CustomField>> LeadsV1_GetCustomFieldsByIdAsync(int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return LeadsV1_GetCustomFieldsByIdAsync(CancellationToken.None, id, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all customfields of the lead</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CustomField>> LeadsV1_GetCustomFieldsByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Leads({Id})/CustomFields");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfCustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCustomField>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<CustomField>);
        }

        /// <summary>Returns the custom field with the specified id of the selected lead</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> LeadsV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(int id, int customFieldDefinitionId, string expand = null, string select = null)
        {
            return LeadsV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken.None, id, customFieldDefinitionId, expand, select);
        }

        /// <summary>Returns the custom field with the specified id of the selected lead</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> LeadsV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int customFieldDefinitionId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Leads({Id})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Updates an existing customfield of the lead</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> LeadsV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(int id, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            return LeadsV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken.None, id, customFieldDefinitionId, customField, expand, select);
        }

        /// <summary>Updates an existing customfield of the lead</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> LeadsV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Leads({Id})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(customField));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Returns all project roles</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ProjectRole>> ProjectRolesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ProjectRolesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all project roles</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ProjectRole>> ProjectRolesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectRoles");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfProjectRole);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfProjectRole>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<ProjectRole>);
        }

        /// <summary>Returns the project role with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ProjectRole> ProjectRolesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectRolesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the project role with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ProjectRole> ProjectRolesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectRoles({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ProjectRole);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ProjectRole>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ProjectRole);
        }

        /// <summary>Deletes a project role</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> ProjectRolesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return ProjectRolesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }

        /// <summary>Deletes a project role</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> ProjectRolesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/ProjectRoles({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Headers.TryAddWithoutValidation("If-Match", if_Match);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all project status</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ProjectStatus>> ProjectStatusesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ProjectStatusesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all project status</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ProjectStatus>> ProjectStatusesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectStatuses");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfProjectStatus);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfProjectStatus>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<ProjectStatus>);
        }

        /// <summary>Returns the project status with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ProjectStatus> ProjectStatusesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectStatusesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the project status with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ProjectStatus> ProjectStatusesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectStatuses({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ProjectStatus);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ProjectStatus>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ProjectStatus);
        }

        /// <summary>Deletes a project status</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> ProjectStatusesV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return ProjectStatusesV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }

        /// <summary>Deletes a project status</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> ProjectStatusesV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/ProjectStatuses({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Headers.TryAddWithoutValidation("If-Match", if_Match);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all project tasks</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Task>> ProjectTasksV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ProjectTasksV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all project tasks</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Task>> ProjectTasksV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfTask);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfTask>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<Task>);
        }

        /// <summary>Creates a new project task</summary>
        /// <param name="task">The entity to post</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Task> ProjectTasksV1_PostAsync(Task task, string expand = null, string select = null)
        {
            return ProjectTasksV1_PostAsync(CancellationToken.None, task, expand, select);
        }

        /// <summary>Creates a new project task</summary>
        /// <param name="task">The entity to post</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Task> ProjectTasksV1_PostAsync(CancellationToken cancellationToken, Task task, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(task));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(Task);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Task>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Task);
        }

        /// <summary>Returns the project task with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Task> ProjectTasksV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectTasksV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the project task with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Task> ProjectTasksV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Task);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Task>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Task);
        }

        /// <summary>Updates an existing project task</summary>
        /// <param name="id">key: Id</param>
        /// <param name="task">The entity to put</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Task> ProjectTasksV1_PutByIdAsync(int id, Task task, string expand = null, string select = null)
        {
            return ProjectTasksV1_PutByIdAsync(CancellationToken.None, id, task, expand, select);
        }

        /// <summary>Updates an existing project task</summary>
        /// <param name="id">key: Id</param>
        /// <param name="task">The entity to put</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Task> ProjectTasksV1_PutByIdAsync(CancellationToken cancellationToken, int id, Task task, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(task));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Task);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Task>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Task);
        }

        /// <summary>Deletes a project task</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> ProjectTasksV1_DeleteByIdAsync(int id, string if_Match = null)
        {
            return ProjectTasksV1_DeleteByIdAsync(CancellationToken.None, id, if_Match);
        }

        /// <summary>Deletes a project task</summary>
        /// <param name="id">key: Id</param>
        /// <param name="if_Match">If-Match header</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>NoContent</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> ProjectTasksV1_DeleteByIdAsync(CancellationToken cancellationToken, int id, string if_Match = null)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/ProjectTasks({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Headers.TryAddWithoutValidation("If-Match", if_Match);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Marks the project task as finished</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Task> ProjectTasksV1_FinishByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectTasksV1_FinishByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Marks the project task as finished</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Task> ProjectTasksV1_FinishByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks({Id})/do.Finish");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Task);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Task>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Task);
        }

        /// <summary>Marks the project task as open</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Task> ProjectTasksV1_OpenByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectTasksV1_OpenByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Marks the project task as open</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Task> ProjectTasksV1_OpenByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks({Id})/do.Open");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Task);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Task>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Task);
        }

        /// <summary>Changes the status of a task</summary>
        /// <param name="id">key: Id</param>
        /// <param name="projectTaskV1SetStatusParams">Contains the status to set</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Task> ProjectTasksV1_SetStatusByIdAsync(int id, ProjectTaskV1SetStatusParams projectTaskV1SetStatusParams, string expand = null, string select = null)
        {
            return ProjectTasksV1_SetStatusByIdAsync(CancellationToken.None, id, projectTaskV1SetStatusParams, expand, select);
        }

        /// <summary>Changes the status of a task</summary>
        /// <param name="id">key: Id</param>
        /// <param name="projectTaskV1SetStatusParams">Contains the status to set</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Task> ProjectTasksV1_SetStatusByIdAsync(CancellationToken cancellationToken, int id, ProjectTaskV1SetStatusParams projectTaskV1SetStatusParams, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks({Id})/do.SetStatus");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(projectTaskV1SetStatusParams));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Task);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Task>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Task);
        }

        /// <summary>Returns all task dependencies of the selected task</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<TaskDependency>> ProjectTasksV1_GetDependenciesByIdAsync(int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ProjectTasksV1_GetDependenciesByIdAsync(CancellationToken.None, id, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all task dependencies of the selected task</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<TaskDependency>> ProjectTasksV1_GetDependenciesByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks({Id})/Dependencies");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfTaskDependency);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfTaskDependency>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<TaskDependency>);
        }

        /// <summary>Returns the taskassignment of the selected task with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<TaskDependency> ProjectTasksV1_GetDependenciesByIdAndDependencyidAsync(int id, int dependencyId, string expand = null, string select = null)
        {
            return ProjectTasksV1_GetDependenciesByIdAndDependencyidAsync(CancellationToken.None, id, dependencyId, expand, select);
        }

        /// <summary>Returns the taskassignment of the selected task with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<TaskDependency> ProjectTasksV1_GetDependenciesByIdAndDependencyidAsync(CancellationToken cancellationToken, int id, int dependencyId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks({Id})/Dependencies({DependencyId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (dependencyId == null)
                throw new ArgumentNullException("dependencyId");
            url_ = url_.Replace("{DependencyId}", Uri.EscapeDataString(dependencyId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(TaskDependency);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<TaskDependency>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(TaskDependency);
        }

        /// <summary>Returns all task assignments of the selected task</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<TaskAssignment>> ProjectTasksV1_GetAssignmentsByIdAsync(int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ProjectTasksV1_GetAssignmentsByIdAsync(CancellationToken.None, id, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all task assignments of the selected task</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<TaskAssignment>> ProjectTasksV1_GetAssignmentsByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks({Id})/Assignments");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfTaskAssignment);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfTaskAssignment>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<TaskAssignment>);
        }

        /// <summary>Returns the task assignment of the selected task</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<TaskAssignment> ProjectTasksV1_GetAssignmentsByIdAndAssignmentidAsync(int id, int assignmentId, string expand = null, string select = null)
        {
            return ProjectTasksV1_GetAssignmentsByIdAndAssignmentidAsync(CancellationToken.None, id, assignmentId, expand, select);
        }

        /// <summary>Returns the task assignment of the selected task</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<TaskAssignment> ProjectTasksV1_GetAssignmentsByIdAndAssignmentidAsync(CancellationToken cancellationToken, int id, int assignmentId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTasks({Id})/Assignments({AssignmentId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (assignmentId == null)
                throw new ArgumentNullException("assignmentId");
            url_ = url_.Replace("{AssignmentId}", Uri.EscapeDataString(assignmentId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(TaskAssignment);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<TaskAssignment>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(TaskAssignment);
        }

        /// <summary>Returns all project templates</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ProjectTemplate>> ProjectTemplatesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ProjectTemplatesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all project templates</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ProjectTemplate>> ProjectTemplatesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTemplates");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfProjectTemplate);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfProjectTemplate>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<ProjectTemplate>);
        }

        /// <summary>Returns the project status with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ProjectTemplate> ProjectTemplatesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectTemplatesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the project status with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ProjectTemplate> ProjectTemplatesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/ProjectTemplates({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ProjectTemplate);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ProjectTemplate>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ProjectTemplate);
        }

        /// <summary>Returns all projects</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<Project>> ProjectsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return ProjectsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all projects</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<Project>> ProjectsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfProject);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfProject>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<Project>);
        }

        /// <summary>Returns the project with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Project> ProjectsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the project with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Project> ProjectsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(Project);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<Project>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(Project);
        }

        /// <summary>Creates a new project.
        ///             The parameter requirements are depending on the template.
        ///             
        ///             External Projects require:
        ///             - CompanyId
        ///             
        ///             Internal Projects Require:
        ///             - ResponsibleUserId
        ///             
        ///             External Projects also allow a contactPerson to be set.
        ///             
        ///             If the template has a number schema, any number parameter will be ignored. If there is no 
        ///             number schema, the number parameter is optional as the next valid project number will be 
        ///             generated and used.
        ///             
        ///             The ProjectStatusId is optional. If none is provided, the first valid ProjectStatus for 
        ///             the given template will be used.
        ///             
        ///             The StartDate will be used as the PlannendStartDate and for the start date of the first project
        ///             plan task.</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> ProjectsV1_CreateAsync(ProjectV1CreateParameters projectV1CreateParameters, string expand = null, string select = null)
        {
            return ProjectsV1_CreateAsync(CancellationToken.None, projectV1CreateParameters, expand, select);
        }

        /// <summary>Creates a new project.
        ///             The parameter requirements are depending on the template.
        ///             
        ///             External Projects require:
        ///             - CompanyId
        ///             
        ///             Internal Projects Require:
        ///             - ResponsibleUserId
        ///             
        ///             External Projects also allow a contactPerson to be set.
        ///             
        ///             If the template has a number schema, any number parameter will be ignored. If there is no 
        ///             number schema, the number parameter is optional as the next valid project number will be 
        ///             generated and used.
        ///             
        ///             The ProjectStatusId is optional. If none is provided, the first valid ProjectStatus for 
        ///             the given template will be used.
        ///             
        ///             The StartDate will be used as the PlannendStartDate and for the start date of the first project
        ///             plan task.</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> ProjectsV1_CreateAsync(CancellationToken cancellationToken, ProjectV1CreateParameters projectV1CreateParameters, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects/do.Create");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(projectV1CreateParameters));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ == "201")
            {
                var result_ = default(ODataResponseOfListOfProject);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfProject>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Adds a new member for the given project</summary>
        /// <param name="id">key: Id</param>
        /// <param name="projectV1AddMemberParameters">Required parameters are UserId and ProjectRoleId. Optional parameters are ExternalChargeRateId, ExternalChargeRateValue and ExternalChargeRateCurrency.</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ProjectMember> ProjectsV1_AddMemberByIdAsync(int id, ProjectV1AddMemberParameters projectV1AddMemberParameters, string expand = null, string select = null)
        {
            return ProjectsV1_AddMemberByIdAsync(CancellationToken.None, id, projectV1AddMemberParameters, expand, select);
        }

        /// <summary>Adds a new member for the given project</summary>
        /// <param name="id">key: Id</param>
        /// <param name="projectV1AddMemberParameters">Required parameters are UserId and ProjectRoleId. Optional parameters are ExternalChargeRateId, ExternalChargeRateValue and ExternalChargeRateCurrency.</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ProjectMember> ProjectsV1_AddMemberByIdAsync(CancellationToken cancellationToken, int id, ProjectV1AddMemberParameters projectV1AddMemberParameters, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects({Id})/do.AddMember");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(projectV1AddMemberParameters));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(ProjectMember);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ProjectMember>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ProjectMember);
        }

        /// <summary>Creates a reporting for the given project</summary>
        /// <param name="id">key: Id</param>
        /// <param name="projectV1CreateReportingParameters">Required parameters are userId, startDate, duration (in hours). Optional parameters are taskId and the description text.</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserReporting> ProjectsV1_CreateReportingByIdAsync(int id, ProjectV1CreateReportingParameters projectV1CreateReportingParameters, string expand = null, string select = null)
        {
            return ProjectsV1_CreateReportingByIdAsync(CancellationToken.None, id, projectV1CreateReportingParameters, expand, select);
        }

        /// <summary>Creates a reporting for the given project</summary>
        /// <param name="id">key: Id</param>
        /// <param name="projectV1CreateReportingParameters">Required parameters are userId, startDate, duration (in hours). Optional parameters are taskId and the description text.</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserReporting> ProjectsV1_CreateReportingByIdAsync(CancellationToken cancellationToken, int id, ProjectV1CreateReportingParameters projectV1CreateReportingParameters, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects({Id})/do.CreateReporting");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(projectV1CreateReportingParameters));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(UserReporting);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<UserReporting>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(UserReporting);
        }

        /// <summary>Returns all customfields of the project</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CustomField>> ProjectsV1_GetCustomFieldsByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectsV1_GetCustomFieldsByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns all customfields of the project</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CustomField>> ProjectsV1_GetCustomFieldsByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects({Id})/CustomFields");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfCustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCustomField>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<CustomField>);
        }

        /// <summary>Returns the custom field with the specified id of the selected project</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> ProjectsV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(int id, int customFieldDefinitionId, string expand = null, string select = null)
        {
            return ProjectsV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken.None, id, customFieldDefinitionId, expand, select);
        }

        /// <summary>Returns the custom field with the specified id of the selected project</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> ProjectsV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int customFieldDefinitionId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects({Id})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Updates an existing customfield of the project</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> ProjectsV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(int id, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            return ProjectsV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken.None, id, customFieldDefinitionId, customField, expand, select);
        }

        /// <summary>Updates an existing customfield of the project</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> ProjectsV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects({Id})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(customField));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Returns all Files of the specified Project</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<HQFile>> ProjectsV1_GetFilesByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectsV1_GetFilesByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns all Files of the specified Project</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<HQFile>> ProjectsV1_GetFilesByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects({Id})/Files");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfHQFile);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfHQFile>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<HQFile>);
        }

        /// <summary>Creates a new File for the specified Project</summary>
        /// <param name="file">The new file</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> ProjectsV1_PostFilesByIdAsync(int id, HQFile file)
        {
            return ProjectsV1_PostFilesByIdAsync(CancellationToken.None, id, file);
        }

        /// <summary>Creates a new File for the specified Project</summary>
        /// <param name="file">The new file</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> ProjectsV1_PostFilesByIdAsync(CancellationToken cancellationToken, int id, HQFile file)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Projects({Id})/Files");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(file));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns the specified File of the specified Project</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<HQFile> ProjectsV1_GetFilesByIdAndFileidAsync(int id, int fileId, string expand = null, string select = null)
        {
            return ProjectsV1_GetFilesByIdAndFileidAsync(CancellationToken.None, id, fileId, expand, select);
        }

        /// <summary>Returns the specified File of the specified Project</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<HQFile> ProjectsV1_GetFilesByIdAndFileidAsync(CancellationToken cancellationToken, int id, int fileId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects({Id})/Files({FileId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (fileId == null)
                throw new ArgumentNullException("fileId");
            url_ = url_.Replace("{FileId}", Uri.EscapeDataString(fileId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(HQFile);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<HQFile>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(HQFile);
        }

        /// <summary>Updates the specified File of the specified Project</summary>
        /// <param name="file">The updated file</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<HQFile> ProjectsV1_PutFilesByIdAndFileidAsync(int id, int fileId, HQFile file)
        {
            return ProjectsV1_PutFilesByIdAndFileidAsync(CancellationToken.None, id, fileId, file);
        }

        /// <summary>Updates the specified File of the specified Project</summary>
        /// <param name="file">The updated file</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<HQFile> ProjectsV1_PutFilesByIdAndFileidAsync(CancellationToken cancellationToken, int id, int fileId, HQFile file)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Projects({Id})/Files({FileId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (fileId == null)
                throw new ArgumentNullException("fileId");
            url_ = url_.Replace("{FileId}", Uri.EscapeDataString(fileId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(file));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(HQFile);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<HQFile>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(HQFile);
        }

        /// <summary>Deletes the specified File of the specified Project</summary>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> ProjectsV1_DeleteFilesByIdAndFileidAsync(int id, int fileId)
        {
            return ProjectsV1_DeleteFilesByIdAndFileidAsync(CancellationToken.None, id, fileId);
        }

        /// <summary>Deletes the specified File of the specified Project</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> ProjectsV1_DeleteFilesByIdAndFileidAsync(CancellationToken cancellationToken, int id, int fileId)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Projects({Id})/Files({FileId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (fileId == null)
                throw new ArgumentNullException("fileId");
            url_ = url_.Replace("{FileId}", Uri.EscapeDataString(fileId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns the binary content of the specified File of the specified Project</summary>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> ProjectsV1_GetValueFromFilesByIdAndFileidAsync(int id, int fileId)
        {
            return ProjectsV1_GetValueFromFilesByIdAndFileidAsync(CancellationToken.None, id, fileId);
        }

        /// <summary>Returns the binary content of the specified File of the specified Project</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> ProjectsV1_GetValueFromFilesByIdAndFileidAsync(CancellationToken cancellationToken, int id, int fileId)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Projects({Id})/Files({FileId})/$value");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (fileId == null)
                throw new ArgumentNullException("fileId");
            url_ = url_.Replace("{FileId}", Uri.EscapeDataString(fileId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(byte[]);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<byte[]>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(byte[]);
        }

        /// <summary>Returns all project members of a selected project</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<UserReporting>> ProjectsV1_GetMembersByIdAsync(int id, string expand = null, string select = null)
        {
            return ProjectsV1_GetMembersByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns all project members of a selected project</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<UserReporting>> ProjectsV1_GetMembersByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects({Id})/Members");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfUserReporting);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfUserReporting>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<UserReporting>);
        }

        /// <summary>Returns the member of a selected project with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserReporting> ProjectsV1_GetMembersByIdAndMemberidAsync(int id, int memberId, string expand = null, string select = null)
        {
            return ProjectsV1_GetMembersByIdAndMemberidAsync(CancellationToken.None, id, memberId, expand, select);
        }

        /// <summary>Returns the member of a selected project with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserReporting> ProjectsV1_GetMembersByIdAndMemberidAsync(CancellationToken cancellationToken, int id, int memberId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Projects({Id})/Members({MemberId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (memberId == null)
                throw new ArgumentNullException("memberId");
            url_ = url_.Replace("{MemberId}", Uri.EscapeDataString(memberId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(UserReporting);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<UserReporting>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(UserReporting);
        }

        /// <summary>Deletes a project member of a selected project</summary>
        /// <returns>No content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> ProjectsV1_DeleteMembersByIdAndMemberidAsync(int id, int memberId)
        {
            return ProjectsV1_DeleteMembersByIdAndMemberidAsync(CancellationToken.None, id, memberId);
        }

        /// <summary>Deletes a project member of a selected project</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> ProjectsV1_DeleteMembersByIdAndMemberidAsync(CancellationToken cancellationToken, int id, int memberId)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Projects({Id})/Members({MemberId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (memberId == null)
                throw new ArgumentNullException("memberId");
            url_ = url_.Replace("{MemberId}", Uri.EscapeDataString(memberId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all task types</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<TaskType>> TaskTypesV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return TaskTypesV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all task types</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<TaskType>> TaskTypesV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/TaskTypes");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfTaskType);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfTaskType>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<TaskType>);
        }

        /// <summary>Returns the task type for a given id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<TaskType> TaskTypesV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return TaskTypesV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the task type for a given id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<TaskType> TaskTypesV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/TaskTypes({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(TaskType);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<TaskType>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(TaskType);
        }

        /// <summary>Returns all user reportings</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<UserReporting>> UserReportingsV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return UserReportingsV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all user reportings</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<UserReporting>> UserReportingsV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/UserReportings");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfUserReporting);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfUserReporting>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<UserReporting>);
        }

        /// <summary>Returns the user reporting with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserReporting> UserReportingsV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return UserReportingsV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the user reporting with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserReporting> UserReportingsV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/UserReportings({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(UserReporting);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<UserReporting>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(UserReporting);
        }

        /// <summary>Returns all users</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<User>> UsersV1_GetAsync(string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return UsersV1_GetAsync(CancellationToken.None, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all users</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<User>> UsersV1_GetAsync(CancellationToken cancellationToken, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users");

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfUser);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfUser>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<User>);
        }

        /// <summary>Returns the user with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<User> UsersV1_GetByIdAsync(int id, string expand = null, string select = null)
        {
            return UsersV1_GetByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns the user with the specified id</summary>
        /// <param name="id">key: Id</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<User> UsersV1_GetByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(User);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<User>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(User);
        }

        /// <summary>Returns the currently authenticated user</summary>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<User> MeV1_GetAsync(string select = null)
        {
            return MeV1_GetAsync(CancellationToken.None, select);
        }

        /// <summary>Returns the currently authenticated user</summary>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<User> MeV1_GetAsync(CancellationToken cancellationToken, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Me");

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(User);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<User>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(User);
        }

        /// <summary>Returns all customfields of the user</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<CustomField>> UsersV1_GetCustomFieldsByIdAsync(int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return UsersV1_GetCustomFieldsByIdAsync(CancellationToken.None, id, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all customfields of the user</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<CustomField>> UsersV1_GetCustomFieldsByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/CustomFields");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfCustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfCustomField>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<CustomField>);
        }

        /// <summary>Returns the custom field with the specified id of the selected user</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> UsersV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(int id, int customFieldDefinitionId, string expand = null, string select = null)
        {
            return UsersV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken.None, id, customFieldDefinitionId, expand, select);
        }

        /// <summary>Returns the custom field with the specified id of the selected user</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> UsersV1_GetCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int customFieldDefinitionId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Updates an existing customfield of the user</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<CustomField> UsersV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(int id, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            return UsersV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken.None, id, customFieldDefinitionId, customField, expand, select);
        }

        /// <summary>Updates an existing customfield of the user</summary>
        /// <param name="customField">The customfield body</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<CustomField> UsersV1_PutCustomFieldsByIdAndCustomfielddefinitionidAsync(CancellationToken cancellationToken, int id, int customFieldDefinitionId, CustomField customField, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/CustomFields({CustomFieldDefinitionId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (customFieldDefinitionId == null)
                throw new ArgumentNullException("customFieldDefinitionId");
            url_ = url_.Replace("{CustomFieldDefinitionId}", Uri.EscapeDataString(customFieldDefinitionId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(customField));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(CustomField);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<CustomField>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(CustomField);
        }

        /// <summary>Returns all project members of a selected user</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<UserReporting>> UsersV1_GetProjectMembersByIdAsync(int id, string expand = null, string select = null)
        {
            return UsersV1_GetProjectMembersByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns all project members of a selected user</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<UserReporting>> UsersV1_GetProjectMembersByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/ProjectMembers");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfUserReporting);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfUserReporting>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<UserReporting>);
        }

        /// <summary>Returns the member of a selected project with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserReporting> UsersV1_GetProjectMembersByIdAndMemberidAsync(int id, int memberId, string expand = null, string select = null)
        {
            return UsersV1_GetProjectMembersByIdAndMemberidAsync(CancellationToken.None, id, memberId, expand, select);
        }

        /// <summary>Returns the member of a selected project with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserReporting> UsersV1_GetProjectMembersByIdAndMemberidAsync(CancellationToken cancellationToken, int id, int memberId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/ProjectMembers({MemberId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (memberId == null)
                throw new ArgumentNullException("memberId");
            url_ = url_.Replace("{MemberId}", Uri.EscapeDataString(memberId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(UserReporting);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<UserReporting>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(UserReporting);
        }

        /// <summary>Deletes a project member of a selected user</summary>
        /// <returns>No content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> UsersV1_DeleteProjectMembersByIdAndMemberidAsync(int id, int memberId)
        {
            return UsersV1_DeleteProjectMembersByIdAndMemberidAsync(CancellationToken.None, id, memberId);
        }

        /// <summary>Deletes a project member of a selected user</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> UsersV1_DeleteProjectMembersByIdAndMemberidAsync(CancellationToken cancellationToken, int id, int memberId)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Users({Id})/ProjectMembers({MemberId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (memberId == null)
                throw new ArgumentNullException("memberId");
            url_ = url_.Replace("{MemberId}", Uri.EscapeDataString(memberId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all task assignments of the selected user</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<TaskAssignment>> UsersV1_GetAssignmentsByIdAsync(int id, string expand = null, string select = null)
        {
            return UsersV1_GetAssignmentsByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns all task assignments of the selected user</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<TaskAssignment>> UsersV1_GetAssignmentsByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/Assignments");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfTaskAssignment);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfTaskAssignment>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<TaskAssignment>);
        }

        /// <summary>Returns the task assignment of the selected user with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<TaskAssignment> UsersV1_GetAssignmentsByIdAndAssignmentidAsync(int id, int assignmentId, string expand = null, string select = null)
        {
            return UsersV1_GetAssignmentsByIdAndAssignmentidAsync(CancellationToken.None, id, assignmentId, expand, select);
        }

        /// <summary>Returns the task assignment of the selected user with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<TaskAssignment> UsersV1_GetAssignmentsByIdAndAssignmentidAsync(CancellationToken cancellationToken, int id, int assignmentId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/Assignments({AssignmentId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (assignmentId == null)
                throw new ArgumentNullException("assignmentId");
            url_ = url_.Replace("{AssignmentId}", Uri.EscapeDataString(assignmentId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(TaskAssignment);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<TaskAssignment>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(TaskAssignment);
        }

        /// <summary>Returns all absences</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<UserAbsence>> UsersV1_GetAbsencesByIdAsync(int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            return UsersV1_GetAbsencesByIdAsync(CancellationToken.None, id, expand, filter, select, orderby, top, skip, count);
        }

        /// <summary>Returns all absences</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="filter">Filters the results, based on a Boolean condition.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="orderby">Sorts the results.</param>
        /// <param name="top">Returns only the first n results.</param>
        /// <param name="skip">Skips the first n results.</param>
        /// <param name="count">Includes a count of the matching results in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<UserAbsence>> UsersV1_GetAbsencesByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string filter = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/Absences");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (filter != null)
                url_ += string.Format("$filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            if (orderby != null)
                url_ += string.Format("$orderby={0}&", Uri.EscapeDataString(orderby.ToString()));

            if (top != null)
                url_ += string.Format("$top={0}&", Uri.EscapeDataString(top.Value.ToString()));

            if (skip != null)
                url_ += string.Format("$skip={0}&", Uri.EscapeDataString(skip.Value.ToString()));

            if (count != null)
                url_ += string.Format("$count={0}&", Uri.EscapeDataString(count.Value.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfUserAbsence);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfUserAbsence>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<UserAbsence>);
        }

        /// <summary>Creates a new absence for a user</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserAbsence> UsersV1_PostAbsencesByIdAsync(int id, UserAbsence absence, string expand = null, string select = null)
        {
            return UsersV1_PostAbsencesByIdAsync(CancellationToken.None, id, absence, expand, select);
        }

        /// <summary>Creates a new absence for a user</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserAbsence> UsersV1_PostAbsencesByIdAsync(CancellationToken cancellationToken, int id, UserAbsence absence, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/Absences");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(absence));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "201")
            {
                var result_ = default(UserAbsence);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<UserAbsence>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(UserAbsence);
        }

        /// <summary>Returns the absence with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserAbsence> UsersV1_GetAbsencesByIdAndAbsenceidAsync(int id, int absenceId, string expand = null, string select = null)
        {
            return UsersV1_GetAbsencesByIdAndAbsenceidAsync(CancellationToken.None, id, absenceId, expand, select);
        }

        /// <summary>Returns the absence with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserAbsence> UsersV1_GetAbsencesByIdAndAbsenceidAsync(CancellationToken cancellationToken, int id, int absenceId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/Absences({AbsenceId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (absenceId == null)
                throw new ArgumentNullException("absenceId");
            url_ = url_.Replace("{AbsenceId}", Uri.EscapeDataString(absenceId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(UserAbsence);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<UserAbsence>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(UserAbsence);
        }

        /// <summary>Deletes an absence of a user</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> UsersV1_DeleteAbsencesByIdAndAbsenceidAsync(int id, int absenceId)
        {
            return UsersV1_DeleteAbsencesByIdAndAbsenceidAsync(CancellationToken.None, id, absenceId);
        }

        /// <summary>Deletes an absence of a user</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> UsersV1_DeleteAbsencesByIdAndAbsenceidAsync(CancellationToken cancellationToken, int id, int absenceId)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Users({Id})/Absences({AbsenceId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (absenceId == null)
                throw new ArgumentNullException("absenceId");
            url_ = url_.Replace("{AbsenceId}", Uri.EscapeDataString(absenceId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

        /// <summary>Returns all user reportings of a selected user</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<UserReporting>> UsersV1_GetReportingsByIdAsync(int id, string expand = null, string select = null)
        {
            return UsersV1_GetReportingsByIdAsync(CancellationToken.None, id, expand, select);
        }

        /// <summary>Returns all user reportings of a selected user</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<UserReporting>> UsersV1_GetReportingsByIdAsync(CancellationToken cancellationToken, int id, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/Reportings");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(ODataResponseOfListOfUserReporting);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<ODataResponseOfListOfUserReporting>(value);
                    }
                    return result_.Value;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(ObservableCollection<UserReporting>);
        }

        /// <summary>Returns the user reporting of a selected user with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserReporting> UsersV1_GetReportingsByIdAndReportingidAsync(int id, int reportingId, string expand = null, string select = null)
        {
            return UsersV1_GetReportingsByIdAndReportingidAsync(CancellationToken.None, id, reportingId, expand, select);
        }

        /// <summary>Returns the user reporting of a selected user with the specified id</summary>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserReporting> UsersV1_GetReportingsByIdAndReportingidAsync(CancellationToken cancellationToken, int id, int reportingId, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/Reportings({ReportingId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (reportingId == null)
                throw new ArgumentNullException("reportingId");
            url_ = url_.Replace("{ReportingId}", Uri.EscapeDataString(reportingId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(UserReporting);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<UserReporting>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(UserReporting);
        }

        /// <summary>Updates an existing reporting of a selected user</summary>
        /// <param name="reporting">The UserReporting object</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserReporting> UsersV1_PutReportingsByIdAndReportingidAsync(int id, int reportingId, UserReporting reporting, string expand = null, string select = null)
        {
            return UsersV1_PutReportingsByIdAndReportingidAsync(CancellationToken.None, id, reportingId, reporting, expand, select);
        }

        /// <summary>Updates an existing reporting of a selected user</summary>
        /// <param name="reporting">The UserReporting object</param>
        /// <param name="expand">Expands related entities inline.</param>
        /// <param name="select">Selects which properties to include in the response.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserReporting> UsersV1_PutReportingsByIdAndReportingidAsync(CancellationToken cancellationToken, int id, int reportingId, UserReporting reporting, string expand = null, string select = null)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "v1/Users({Id})/Reportings({ReportingId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (reportingId == null)
                throw new ArgumentNullException("reportingId");
            url_ = url_.Replace("{ReportingId}", Uri.EscapeDataString(reportingId.ToString()));

            if (expand != null)
                url_ += string.Format("$expand={0}&", Uri.EscapeDataString(expand.ToString()));

            if (select != null)
                url_ += string.Format("$select={0}&", Uri.EscapeDataString(select.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(reporting));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "200")
            {
                var result_ = default(UserReporting);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<UserReporting>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(UserReporting);
        }

        /// <summary>Deletes a user reporting of a selected user</summary>
        /// <returns>No content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> UsersV1_DeleteReportingsByIdAndReportingidAsync(int id, int reportingId)
        {
            return UsersV1_DeleteReportingsByIdAndReportingidAsync(CancellationToken.None, id, reportingId);
        }

        /// <summary>Deletes a user reporting of a selected user</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> UsersV1_DeleteReportingsByIdAndReportingidAsync(CancellationToken cancellationToken, int id, int reportingId)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "v1/Users({Id})/Reportings({ReportingId})");

            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{Id}", Uri.EscapeDataString(id.ToString()));

            if (reportingId == null)
                throw new ArgumentNullException("reportingId");
            url_ = url_.Replace("{ReportingId}", Uri.EscapeDataString(reportingId.ToString()));

            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();
            var value = string.Empty;
            if (responseData_.Length > 0)
            {
                value = Encoding.UTF8.GetString(responseData_, 0, responseData_.Length);
            }

            if (status_ == "204")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                    {
                        result_ = JsonConvert.DeserializeObject<object>(value);
                    }
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            if (status_ != "200" && status_ != "204")
                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);

            return default(object);
        }

    }



    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfArticleStorage
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ArticleStorage> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfArticleStorage FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfArticleStorage>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ArticleStorage
    {

        /// <summary>The name of the storage</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The storage number</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ArticleStorage FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ArticleStorage>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class Object
    {

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Object FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Object>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfArticle
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Article> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfArticle FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfArticle>(data);
        }
    }

    /// <summary>An article is a stock item that your company sells, for example a digital camera. 
    ///             An article can also be a service or activity that your company performs, for example a digital design. 
    ///             Articles can be used to create positions on invoices or quotations, among others.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class Article
    {

        /// <summary>The name of this article</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The number as identifier of the article</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>The description of the article</summary>
        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The baset ype of the article</summary>
        [JsonProperty("BaseType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public ArticleBaseType? BaseType { get; set; }

        /// <summary>The category ID of the article</summary>
        [JsonProperty("CategoryId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CategoryId { get; set; }

        /// <summary>The article category</summary>
        [JsonProperty("Category", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ArticleCategory Category { get; set; } = new ArticleCategory();

        /// <summary>The list of possible sales prices</summary>
        [JsonProperty("SalesPrices", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ArticleSalesPrice> SalesPrices { get; set; }

        /// <summary>The list of stocks this article can be stored in</summary>
        [JsonProperty("Stocks", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ArticleStock> Stocks { get; set; }

        /// <summary>The customfields associated with this article</summary>
        [JsonProperty("CustomFields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomField> CustomFields { get; set; }

        /// <summary>The files associated to the article</summary>
        [JsonProperty("Files", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<HQFile> Files { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Article FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Article>(data);
        }
    }

    /// <summary>An article category represents a type of an article.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ArticleCategory
    {

        /// <summary>The name of the category</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The reference to the parent category</summary>
        [JsonProperty("ParentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ParentId { get; set; }

        /// <summary>The description of the category</summary>
        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The short name of the category</summary>
        [JsonProperty("Abbreviation", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Abbreviation { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ArticleCategory FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ArticleCategory>(data);
        }
    }

    /// <summary>An article sales price represents a price of the article which can be used for creating a quotation or invoice.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ArticleSalesPrice
    {

        /// <summary>The price to sell the article for</summary>
        [JsonProperty("Price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>The ISO 4217 code of the currency of the sales price</summary>
        [JsonProperty("Currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>The tax rate of the sales price</summary>
        [JsonProperty("TaxRate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TaxRate { get; set; }

        /// <summary>The amount for the specific price</summary>
        [JsonProperty("Amount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Amount { get; set; }

        /// <summary>The article the price is for</summary>
        [JsonProperty("ArticleId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ArticleId { get; set; }

        /// <summary>The possible discounts for the sales price</summary>
        [JsonProperty("ArticleDiscounts", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ArticleDiscount> ArticleDiscounts { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ArticleSalesPrice FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ArticleSalesPrice>(data);
        }
    }

    /// <summary>Represents the current stock of an article in a specific storage. Articles can have multiple stocks, one for each storage they are located in.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ArticleStock
    {

        /// <summary>The Safety stock (also called buffer stock) is the minimal stock which should always be available</summary>
        [JsonProperty("SafetyStock", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? SafetyStock { get; set; }

        /// <summary>The max stock for this article</summary>
        [JsonProperty("MaxStock", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxStock { get; set; }

        /// <summary>The level, where an article should be reorderd</summary>
        [JsonProperty("ReorderLevel", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ReorderLevel { get; set; }

        /// <summary>The current stock of the article</summary>
        [JsonProperty("CurrentStock", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? CurrentStock { get; set; }

        /// <summary>The id of the article</summary>
        [JsonProperty("ArticleId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ArticleId { get; set; }

        /// <summary>The article the stock belongs to</summary>
        [JsonProperty("Article", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Article Article { get; set; } = new Article();

        /// <summary>The id of the Storage the article is stored</summary>
        [JsonProperty("StorageId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? StorageId { get; set; }

        /// <summary>The Storage the article is stored at</summary>
        [JsonProperty("Storage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ArticleStorage Storage { get; set; } = new ArticleStorage();

        /// <summary>All transactions on the stock</summary>
        [JsonProperty("Transactions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ArticleStockTransaction> Transactions { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ArticleStock FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ArticleStock>(data);
        }
    }

    /// <summary>A custom field contains a value for a certain custom field definition and is always linked to a certain entity that has custom fields, like a project.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class CustomField
    {

        /// <summary>The name of this custom field</summary>
        [JsonProperty("Name", Required = Required.Always)]
        [Required]
        public string Name { get; set; }

        /// <summary>The value of this custom field</summary>
        [JsonProperty("Value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>The type of this custom field</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public CustomFieldType? Type { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static CustomField FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CustomField>(data);
        }
    }

    /// <summary>A file represents a user upload or HQ-generated PDF documents.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class HQFile
    {

        /// <summary>The name of the file</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The size in bytes</summary>
        [JsonProperty("Size", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Size { get; set; }

        /// <summary>Returns true if the file has content (was uploaded yet)</summary>
        [JsonProperty("HasContent", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasContent { get; set; }

        /// <summary>Returns true if the file entity is a directory, otherwise false</summary>
        [JsonProperty("IsDirectory", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDirectory { get; set; }

        /// <summary>The id of the parent directory</summary>
        [JsonProperty("DirectoryId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DirectoryId { get; set; }

        /// <summary>List of all relations of a</summary>
        [JsonProperty("FileRelations", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<FileRelation> FileRelations { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static HQFile FromJson(string data)
        {
            return JsonConvert.DeserializeObject<HQFile>(data);
        }
    }

    /// <summary>An article discount represents a discount rule on an article when the customer orders a certain threshold quantity.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ArticleDiscount
    {

        /// <summary>The value of the discount</summary>
        [JsonProperty("Value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }

        /// <summary>The threshold to decide if the discount is applied</summary>
        [JsonProperty("Threshold", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Threshold { get; set; }

        /// <summary>The type, if its percentige or net value for the threshold decision</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public ArticleDiscountType? Type { get; set; }

        /// <summary>If set, the discount is just assigned for a specifc company</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId { get; set; }

        /// <summary>The salesprices, where the discount is assigned to</summary>
        [JsonProperty("ArticleSalesPriceId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ArticleSalesPriceId { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ArticleDiscount FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ArticleDiscount>(data);
        }
    }

    /// <summary>Represents a change in an article stock, for example incoming goods or used goods.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ArticleStockTransaction
    {

        /// <summary>The change of quantity in stock made by this transaction</summary>
        [JsonProperty("Change", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Change { get; set; }

        /// <summary>The execution date of the transaction</summary>
        [JsonProperty("ExecutedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? ExecutedOn { get; set; }

        /// <summary>The type of the transaction</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public ArticleStockTransactionType? Type { get; set; }

        [JsonProperty("Article", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Article Article { get; set; } = new Article();

        [JsonProperty("ArticleId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ArticleId { get; set; }

        /// <summary>The id of the articlestock</summary>
        [JsonProperty("ArticleStockId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ArticleStockId { get; set; }

        /// <summary>The article stock of the transaciton</summary>
        [JsonProperty("ArticleStock", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ArticleStock ArticleStock { get; set; } = new ArticleStock();

        /// <summary>The description of the transaction</summary>
        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ArticleStockTransaction FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ArticleStockTransaction>(data);
        }
    }

    /// <summary>A file relation represents a link between a file and another entity like a project or article.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class FileRelation
    {

        /// <summary>The id of the project this file belongs to</summary>
        [JsonProperty("ProjectId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectId { get; set; }

        /// <summary>The project this file belongs to</summary>
        [JsonProperty("Project", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Project Project { get; set; } = new Project();

        /// <summary>The article this file belongs to</summary>
        [JsonProperty("Article", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Article Article { get; set; } = new Article();

        /// <summary>The id of the article this files belongs to</summary>
        [JsonProperty("ArticleId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ArticleId { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static FileRelation FromJson(string data)
        {
            return JsonConvert.DeserializeObject<FileRelation>(data);
        }
    }

    /// <summary>A project represents a service you are performing for a customer, like a job or any other project-based service.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class Project
    {

        /// <summary>The number of the project</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>The name of the project</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The current status description of the project</summary>
        [JsonProperty("Status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>The planned start date of the project</summary>
        [JsonProperty("PlannedStartDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? PlannedStartDate { get; set; }

        /// <summary>The planned end date of the project</summary>
        [JsonProperty("PlannedEndDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? PlannedEndDate { get; set; }

        /// <summary>The subsystems this project is associated with</summary>
        [JsonProperty("Subsystems", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Subsystem> Subsystems { get; set; }

        /// <summary>The id of the project template</summary>
        [JsonProperty("ProjectTemplateId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectTemplateId { get; set; }

        /// <summary>The template of this project</summary>
        [JsonProperty("ProjectTemplate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ProjectTemplate ProjectTemplate { get; set; } = new ProjectTemplate();

        /// <summary>The id of the project status</summary>
        [JsonProperty("ProjectStatusId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectStatusId { get; set; }

        /// <summary>The id of the company</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId { get; set; }

        /// <summary>The Id of the lead</summary>
        [JsonProperty("LeadId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LeadId { get; set; }

        /// <summary>Id of the address for invoices of this project</summary>
        [JsonProperty("InvoiceAddressId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InvoiceAddressId { get; set; }

        /// <summary>Id of the address for the deliveries of this project</summary>
        [JsonProperty("DeliveryAddressId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DeliveryAddressId { get; set; }

        /// <summary>The id of the user which is responsible for this (internal) project</summary>
        [JsonProperty("ResponsibleUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ResponsibleUserId { get; set; }

        /// <summary>The status of the project</summary>
        [JsonProperty("ProjectStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ProjectStatus ProjectStatus { get; set; } = new ProjectStatus();

        /// <summary>The company this project is associated with</summary>
        [JsonProperty("Company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Company Company { get; set; } = new Company();

        /// <summary>The user which is responsible for this (internal) project</summary>
        [JsonProperty("ResponsibleUser", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User ResponsibleUser { get; set; } = new User();

        /// <summary>The address for delvieries of this project</summary>
        [JsonProperty("DeliveryAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress DeliveryAddress { get; set; } = new CompanyAddress();

        /// <summary>The address for delvieries of this project</summary>
        [JsonProperty("InvoiceAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress InvoiceAddress { get; set; } = new CompanyAddress();

        /// <summary>The lead of the project</summary>
        [JsonProperty("Lead", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Lead Lead { get; set; } = new Lead();

        /// <summary>The custom fields of this project</summary>
        [JsonProperty("CustomFields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomField> CustomFields { get; set; }

        /// <summary>The user reportings of this project</summary>
        [JsonProperty("Reportings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<UserReporting> Reportings { get; set; }

        /// <summary>The files of this project</summary>
        [JsonProperty("Files", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<HQFile> Files { get; set; }

        /// <summary>The members of this project</summary>
        [JsonProperty("Members", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ProjectMember> Members { get; set; }

        /// <summary>Contact histories linked to this project.</summary>
        [JsonProperty("ContactHistories", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ContactHistory> ContactHistories { get; set; }

        /// <summary>Contact persons linked to this project.</summary>
        [JsonProperty("ContactPersons", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ContactPerson> ContactPersons { get; set; }

        /// <summary>All articles linked to the project</summary>
        [JsonProperty("Articles", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Article> Articles { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Project FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Project>(data);
        }
    }

    /// <summary>A subsystem represents a tenant within a customer's HQ</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class Subsystem
    {

        /// <summary>The name of the subsystem</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Whether this is the master subsystem</summary>
        [JsonProperty("IsMaster", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsMaster { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Subsystem FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Subsystem>(data);
        }
    }

    /// <summary>A project template defines the default tasks of this project and whether the project is internal or external.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ProjectTemplate
    {

        /// <summary>The name of the project template</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Whether this is an internal project template without a company or with a company</summary>
        [JsonProperty("IsInternal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsInternal { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ProjectTemplate FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ProjectTemplate>(data);
        }
    }

    /// <summary>Represents the status of a project</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ProjectStatus
    {

        /// <summary>The name of the project status</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Whether this project is in progress or not</summary>
        [JsonProperty("IsInProgress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsInProgress { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ProjectStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ProjectStatus>(data);
        }
    }

    /// <summary>A company represents any entity you do business with, for example a customer, a supplier or a partner.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class Company
    {

        /// <summary>The name of the company</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The company's industrial sector</summary>
        [JsonProperty("IndustrialSector", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string IndustrialSector { get; set; }

        /// <summary>A longer description of the company</summary>
        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The company's debitor number</summary>
        [JsonProperty("DebitorNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DebitorNumber { get; set; }

        /// <summary>The company's creditor number</summary>
        [JsonProperty("CreditorNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreditorNumber { get; set; }

        /// <summary>The company's tax id</summary>
        [JsonProperty("TaxId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TaxId { get; set; }

        /// <summary>The id of the default delivery condition of this company</summary>
        [JsonProperty("DefaultDeliveryConditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DefaultDeliveryConditionId { get; set; }

        /// <summary>The default delivery condition of this company</summary>
        [JsonProperty("DefaultDeliveryCondition", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DocumentCondition DefaultDeliveryCondition { get; set; } = new DocumentCondition();

        /// <summary>The id of the default payment condition of this company</summary>
        [JsonProperty("DefaultPaymentConditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DefaultPaymentConditionId { get; set; }

        /// <summary>The default payment condition of this company</summary>
        [JsonProperty("DefaultPaymentCondition", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DocumentCondition DefaultPaymentCondition { get; set; } = new DocumentCondition();

        /// <summary>The default address of this company</summary>
        [JsonProperty("DefaultAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress DefaultAddress { get; set; } = new CompanyAddress();

        /// <summary>All addresses of the company</summary>
        [JsonProperty("Addresses", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CompanyAddress> Addresses { get; set; }

        /// <summary>The customfields associated with this company</summary>
        [JsonProperty("CustomFields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomField> CustomFields { get; set; }

        /// <summary>The company types associated with this company</summary>
        [JsonProperty("CompanyTypes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CompanyTypeOfCompany> CompanyTypes { get; set; }

        /// <summary>The files associated with this company</summary>
        [JsonProperty("Files", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<HQFile> Files { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Company FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Company>(data);
        }
    }

    /// <summary>A user represents a user in your HQ system.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class User
    {

        /// <summary>The first name of the user</summary>
        [JsonProperty("FirstName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>The last name of the user</summary>
        [JsonProperty("LastName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>The user's user name in HQ</summary>
        [JsonProperty("UserName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

        /// <summary>The work email of the user</summary>
        [JsonProperty("EMailWork", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EMailWork { get; set; }

        /// <summary>The salutation of the user, i.e. Mrs. or Mr.</summary>
        [JsonProperty("Salutation", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Salutation { get; set; }

        /// <summary>The professional title of the user</summary>
        [JsonProperty("Title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>The birth date of the user</summary>
        [JsonProperty("BirthDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? BirthDate { get; set; }

        /// <summary>The custom fields of the user</summary>
        [JsonProperty("CustomFields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomField> CustomFields { get; set; }

        /// <summary>The absences of the user</summary>
        [JsonProperty("Absences", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<UserAbsence> Absences { get; set; }

        /// <summary>The tasks the user is assigned to</summary>
        [JsonProperty("Assignments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<TaskAssignment> Assignments { get; set; }

        /// <summary>The reportings of this user</summary>
        [JsonProperty("Reportings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<UserReporting> Reportings { get; set; }

        /// <summary>The allocations of this user to projects</summary>
        [JsonProperty("ProjectMembers", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ProjectMember> ProjectMembers { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static User FromJson(string data)
        {
            return JsonConvert.DeserializeObject<User>(data);
        }
    }

    /// <summary>A company address represents one of many addresses of companies.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class CompanyAddress
    {

        /// <summary>The city of this address</summary>
        [JsonProperty("City", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>The street name of this address</summary>
        [JsonProperty("Street", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Street { get; set; }

        /// <summary>The house number of this address</summary>
        [JsonProperty("HouseNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HouseNumber { get; set; }

        /// <summary>The ZIP or Postal Code of this address</summary>
        [JsonProperty("ZipCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ZipCode { get; set; }

        /// <summary>The secondary address line, c/o details, etc.</summary>
        [JsonProperty("AddressLine2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddressLine2 { get; set; }

        /// <summary>The description of this address</summary>
        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The ISO 3166-1 alpha-2 country code of this address</summary>
        [JsonProperty("Country", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>The phone number of this address</summary>
        [JsonProperty("Phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Phone { get; set; }

        /// <summary>The fax number of this address</summary>
        [JsonProperty("Fax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Fax { get; set; }

        /// <summary>The email address of this address</summary>
        [JsonProperty("Email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>The website of this address</summary>
        [JsonProperty("Website", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Website { get; set; }

        /// <summary>Whether this address is the standard address of a company</summary>
        [JsonProperty("IsStandard", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsStandard { get; set; }

        /// <summary>The document type this address should be used as a standard for</summary>
        [JsonProperty("DefaultForDocumentType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public CompanyAddressDefaultForDocumentType? DefaultForDocumentType { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static CompanyAddress FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CompanyAddress>(data);
        }
    }

    /// <summary>A lead represents a deal or prospective customer that you are in contact with.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class Lead
    {

        /// <summary>The number of the lead</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>The company this lead belongs to</summary>
        [JsonProperty("Company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Company Company { get; set; } = new Company();

        /// <summary>The status of the lead</summary>
        [JsonProperty("Status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public LeadStatus Status { get; set; } = new LeadStatus();

        /// <summary>The Id of the status of the lead</summary>
        [JsonProperty("StatusId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? StatusId { get; set; }

        /// <summary>The expected sales date</summary>
        [JsonProperty("CashOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CashOn { get; set; }

        /// <summary>The probability of closing the lead, in percent</summary>
        [JsonProperty("ClosingProbability", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ClosingProbability { get; set; }

        /// <summary>The ISO 4217 code of the currency of the lead volume</summary>
        [JsonProperty("Currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>The financial volume when closing the lead</summary>
        [JsonProperty("Volume", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Volume { get; set; }

        /// <summary>The Id of the company this lead belongs to</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId { get; set; }

        /// <summary>The custom fields of this lead</summary>
        [JsonProperty("CustomFields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomField> CustomFields { get; set; }

        /// <summary>The user id of the HQ user responsible for this lead</summary>
        [JsonProperty("ResponsibleUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ResponsibleUserId { get; set; }

        /// <summary>The HQ user responsible for this lead</summary>
        [JsonProperty("ResponsibleUser", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User ResponsibleUser { get; set; } = new User();

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Lead FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Lead>(data);
        }
    }

    /// <summary>A user reporting represents a logged time of a user on a specific task in HQ.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class UserReporting
    {

        /// <summary>The user-provided note of this reporting</summary>
        [JsonProperty("Note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        /// <summary>The reporting duration, in seconds</summary>
        [JsonProperty("Duration", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Duration { get; set; }

        /// <summary>The id of the user this reporting is for</summary>
        [JsonProperty("UserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UserId { get; set; }

        /// <summary>The user this reporting is for</summary>
        [JsonProperty("User", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User User { get; set; } = new User();

        /// <summary>The external charge rate value</summary>
        [JsonProperty("ChargeRateValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ChargeRateValue { get; set; }

        /// <summary>The internal charge rate value</summary>
        [JsonProperty("InternalChargeRateValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? InternalChargeRateValue { get; set; }

        /// <summary>Whether this reporting was approved</summary>
        [JsonProperty("IsApproved", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsApproved { get; set; }

        /// <summary>The date of the reporting</summary>
        [JsonProperty("StartOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? StartOn { get; set; }

        /// <summary>The break duration of this reporting, in seconds</summary>
        [JsonProperty("BreakDuration", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? BreakDuration { get; set; }

        /// <summary>The id of the project that this reporting belongs to</summary>
        [JsonProperty("ProjectId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectId { get; set; }

        /// <summary>The project that this reporting belongs to</summary>
        [JsonProperty("Project", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Project Project { get; set; } = new Project();

        /// <summary>The id of the task this reporting was created for</summary>
        [JsonProperty("TaskId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TaskId { get; set; }

        /// <summary>The task this reporting was created for</summary>
        [JsonProperty("Task", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Task Task { get; set; } = new Task();

        /// <summary>The ISO 4217 code of the currency of the internal charge rate value</summary>
        [JsonProperty("CurrencyInternalChargeRateValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CurrencyInternalChargeRateValue { get; set; }

        /// <summary>The ISO 4217 code of the currency of the external charge rate</summary>
        [JsonProperty("CurrencyChargeRateValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CurrencyChargeRateValue { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static UserReporting FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UserReporting>(data);
        }
    }

    /// <summary>A project member links a user to a project. It includes the project role and the charge rates
    ///             for the link.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ProjectMember
    {

        /// <summary>Id of the User which is working on the project</summary>
        [JsonProperty("UserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UserId { get; set; }

        /// <summary>Id of the project role with which the user is working on the project</summary>
        [JsonProperty("ProjectRoleId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectRoleId { get; set; }

        /// <summary>The id of the linked project</summary>
        [JsonProperty("ProjectId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectId { get; set; }

        /// <summary>The project role with which the user is working on the project</summary>
        [JsonProperty("ProjectRole", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ProjectRole ProjectRole { get; set; } = new ProjectRole();

        /// <summary>The project this member is working on</summary>
        [JsonProperty("Project", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Project Project { get; set; } = new Project();

        /// <summary>The User which is working on the project</summary>
        [JsonProperty("User", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User User { get; set; } = new User();

        /// <summary>The external rate with which the users time will be charged to the customer</summary>
        [JsonProperty("ExternalChargeRateValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ExternalChargeRateValue { get; set; }

        /// <summary>The Currency of the external charge rate value</summary>
        [JsonProperty("ExternalChargeRateCurrency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ExternalChargeRateCurrency { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ProjectMember FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ProjectMember>(data);
        }
    }

    /// <summary>The contact history represents any contact you had with a contact person. For example, any meeting, phone call or email can be a contact history entry.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ContactHistory
    {

        /// <summary>The date and time the contact was made</summary>
        [JsonProperty("ContactOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? ContactOn { get; set; }

        /// <summary>The content of the contact entry</summary>
        [JsonProperty("Content", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>The main subject of the contact</summary>
        [JsonProperty("Subject", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Subject { get; set; }

        /// <summary>How the contact took place, for example 'E-Mail' or 'Meeting'</summary>
        [JsonProperty("ContactType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ContactType { get; set; }

        /// <summary>The Id of user of your own company who was in contact with the contact person</summary>
        [JsonProperty("UserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UserId { get; set; }

        /// <summary>The user of your own company who was in contact with the contact person</summary>
        [JsonProperty("User", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User User { get; set; } = new User();

        /// <summary>The Id of the project that this contact was about</summary>
        [JsonProperty("ProjectId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectId { get; set; }

        /// <summary>The project that this contact was about</summary>
        [JsonProperty("Project", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Project Project { get; set; } = new Project();

        /// <summary>The Id of the lead that this contact was about</summary>
        [JsonProperty("LeadId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LeadId { get; set; }

        /// <summary>The lead that this contact was about</summary>
        [JsonProperty("Lead", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Lead Lead { get; set; } = new Lead();

        /// <summary>The Id of the company that this contact was about</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId { get; set; }

        /// <summary>The company that this contact was about</summary>
        [JsonProperty("Company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Company Company { get; set; } = new Company();

        /// <summary>The Id of the contact person that this contact was with</summary>
        [JsonProperty("ContactPersonId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ContactPersonId { get; set; }

        /// <summary>The contact person that this contact was with</summary>
        [JsonProperty("ContactPerson", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ContactPerson ContactPerson { get; set; } = new ContactPerson();

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ContactHistory FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ContactHistory>(data);
        }
    }

    /// <summary>A contact person represents a person that works for a company you do business with. A company can have many contact persons.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ContactPerson
    {

        /// <summary>The first name of the contact person</summary>
        [JsonProperty("FirstName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>The last name of the contact person</summary>
        [JsonProperty("LastName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>The position of the contact person</summary>
        [JsonProperty("Position", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Position { get; set; }

        /// <summary>The Id of the company that the contact person belongs to</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId { get; set; }

        /// <summary>The landline phone number of the contact person</summary>
        [JsonProperty("PhoneLandline", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneLandline { get; set; }

        /// <summary>The mobile phone number of the contact person</summary>
        [JsonProperty("PhoneMobile", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneMobile { get; set; }

        /// <summary>The salutation form of the contact person</summary>
        [JsonProperty("Salutation", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Salutation { get; set; }

        /// <summary>The academic title of the contact person</summary>
        [JsonProperty("Title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>The preferred contact language of this contact person, in two-letter ISO-Code, for example 'DE'</summary>
        [JsonProperty("Language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>The id of the default address of this contact person</summary>
        [JsonProperty("DefaultAddressId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DefaultAddressId { get; set; }

        /// <summary>All addresses of the contact person</summary>
        [JsonProperty("Addresses", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CompanyAddress> Addresses { get; set; }

        /// <summary>The default address of this contact person</summary>
        [JsonProperty("DefaultAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress DefaultAddress { get; set; } = new CompanyAddress();

        /// <summary>The customfields associated with this contact person</summary>
        [JsonProperty("CustomFields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomField> CustomFields { get; set; }

        /// <summary>The company that the contact person belongs to</summary>
        [JsonProperty("Company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Company Company { get; set; } = new Company();

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ContactPerson FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ContactPerson>(data);
        }
    }

    /// <summary>A document condition is either a delivery condition or a payment condition. 
    ///             These conditions contain information about legal texts and due dates that should be displayed on the document.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class DocumentCondition
    {

        /// <summary>The name of document condition</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The text of condition</summary>
        [JsonProperty("Text", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>The text with replaced due days</summary>
        [JsonProperty("DisplayText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayText { get; set; }

        /// <summary>The payment due date in days</summary>
        [JsonProperty("DueInDays", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DueInDays { get; set; }

        /// <summary>The type of this condition</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public DocumentConditionType? Type { get; set; }

        /// <summary>The payment due date in days of a warning document</summary>
        [JsonProperty("WarningDays", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? WarningDays { get; set; }

        /// <summary>The payment due date in days of a reminder document</summary>
        [JsonProperty("ReminderDays", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ReminderDays { get; set; }

        /// <summary>The language of the condition, as two-letter ISO-Code, for example 'DE'</summary>
        [JsonProperty("Language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>The list of early payment conditions that belong to this document condition (i.e. Skonto)</summary>
        [JsonProperty("DocumentEarlyPayments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentEarlyPayment> DocumentEarlyPayments { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DocumentCondition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentCondition>(data);
        }
    }

    /// <summary>This is a connection between a company and a company type.
    ///             A company can have more than one type and can have a different company number for each type.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class CompanyTypeOfCompany
    {

        /// <summary>The name of this company type</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The number of the company for this type</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static CompanyTypeOfCompany FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CompanyTypeOfCompany>(data);
        }
    }

    /// <summary>An absence represents a time of absence from work, for example holidays or sickness. 
    ///             Absences can be either paid or unpaid.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class UserAbsence
    {

        /// <summary>The start date or date time of this absence, depending on the type. In ISO 8601 format.</summary>
        [JsonProperty("Start", Required = Required.Always)]
        [Required]
        public DateTime Start { get; set; }

        /// <summary>The end date or date time of this absence, depending on the type. In ISO 8601 format.</summary>
        [JsonProperty("End", Required = Required.Always)]
        [Required]
        public DateTime End { get; set; }

        /// <summary>The type of this absence</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public UserAbsenceType? Type { get; set; }

        /// <summary>The user-provided note for this absence</summary>
        [JsonProperty("Note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        /// <summary>The id of the user this absence is for</summary>
        [JsonProperty("UserId", Required = Required.Always)]
        public int UserId { get; set; }

        /// <summary>The user this absence is for</summary>
        [JsonProperty("User", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User User { get; set; } = new User();

        /// <summary>Whether this absence was approved</summary>
        [JsonProperty("IsApproved", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsApproved { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static UserAbsence FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UserAbsence>(data);
        }
    }

    /// <summary>The assignment of a user to a task</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class TaskAssignment
    {

        /// <summary>The type of the assignment value. Percentage not allowed</summary>
        [JsonProperty("AssignmentUnit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public TaskAssignmentAssignmentUnit? AssignmentUnit { get; set; }

        /// <summary>The value of the assignment. The value is stored in the unit specified in AssignmentUnit</summary>
        [JsonProperty("AssignmentValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? AssignmentValue { get; set; }

        /// <summary>The id of the task the assignment is for</summary>
        [JsonProperty("TaskId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TaskId { get; set; }

        /// <summary>The task the assignment is for</summary>
        [JsonProperty("Task", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Task Task { get; set; } = new Task();

        /// <summary>The id of the user assigned to the task</summary>
        [JsonProperty("UserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UserId { get; set; }

        /// <summary>The user assigned to the task</summary>
        [JsonProperty("User", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User User { get; set; } = new User();

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TaskAssignment FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TaskAssignment>(data);
        }
    }

    /// <summary>Represents the status a lead is in</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class LeadStatus
    {

        /// <summary>The name of the status</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Whether this lead status is open, successful or lost</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public LeadStatusType? Type { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static LeadStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<LeadStatus>(data);
        }
    }

    /// <summary>A task represents a To-Do or other forms of tasks, usually of a project</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class Task
    {

        /// <summary>The name of the task</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The sssignments of users to a specific task</summary>
        [JsonProperty("Assignments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<TaskAssignment> Assignments { get; set; }

        /// <summary>The order of the task within one project</summary>
        [JsonProperty("Order", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Order { get; set; }

        /// <summary>The Id of the parent task of this task, used for building a hierarchy</summary>
        [JsonProperty("ParentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ParentId { get; set; }

        /// <summary>The Id of the project this task belongs to</summary>
        [JsonProperty("ProjectId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectId { get; set; }

        /// <summary>The project this task belongs to</summary>
        [JsonProperty("Project", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Project Project { get; set; } = new Project();

        /// <summary>Whether this task is open or done</summary>
        [JsonProperty("IsDone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDone { get; set; }

        /// <summary>The planned effort, in  hours</summary>
        [JsonProperty("PlannedEffort", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? PlannedEffort { get; set; }

        /// <summary>The description of the task</summary>
        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The start time of the task</summary>
        [JsonProperty("StartOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? StartOn { get; set; }

        /// <summary>The endt ime of the task</summary>
        [JsonProperty("EndOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? EndOn { get; set; }

        /// <summary>The Id of the task type</summary>
        [JsonProperty("TaskTypeId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TaskTypeId { get; set; }

        /// <summary>The type of the task</summary>
        [JsonProperty("TaskType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public TaskType TaskType { get; set; } = new TaskType();

        /// <summary>The id of the status of the task</summary>
        [JsonProperty("TaskTypeStatusId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TaskTypeStatusId { get; set; }

        /// <summary>The status of the task</summary>
        [JsonProperty("TaskTypeStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public TaskTypeStatus TaskTypeStatus { get; set; } = new TaskTypeStatus();

        /// <summary>The dependencies to another task</summary>
        [JsonProperty("Dependencies", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<TaskDependency> Dependencies { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Task FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Task>(data);
        }
    }

    /// <summary>A project role defines the responsibilities and permissions of a user on a project
    ///             on which they are a member of.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ProjectRole
    {

        /// <summary>The name of this project role</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Tells if this a required role on projects.</summary>
        [JsonProperty("IsRequired", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRequired { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ProjectRole FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ProjectRole>(data);
        }
    }

    /// <summary>The document early payment entry represents a rule in days before which a discount is granted on an invoice.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class DocumentEarlyPayment
    {

        /// <summary>The value of discount granted</summary>
        [JsonProperty("CashDiscount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? CashDiscount { get; set; }

        /// <summary>The days this early payment discount is valid</summary>
        [JsonProperty("PaymentPeriod", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? PaymentPeriod { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DocumentEarlyPayment FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentEarlyPayment>(data);
        }
    }

    /// <summary>Every task in HQ has a type. This is a task classification and often used for different external invoicing charge rates.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class TaskType
    {

        /// <summary>The name of the task type</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Whether this is the default task type</summary>
        [JsonProperty("IsDefault", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>All task type status from this type</summary>
        [JsonProperty("TaskTypeStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<TaskTypeStatus> TaskTypeStatus { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TaskType FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TaskType>(data);
        }
    }

    /// <summary>Represents a task status which depends on the task type. 
    ///             Depending on the task type, the task can be in one of several status.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class TaskTypeStatus
    {

        [JsonProperty("IsFinishedState", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsFinishedState { get; set; }

        /// <summary>The name of the task type status</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The id of the task type</summary>
        [JsonProperty("TaskTypeId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TaskTypeId { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TaskTypeStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TaskTypeStatus>(data);
        }
    }

    /// <summary>A task dependency represents a dependency between two tasks, where one task needs to be finished before the other can be started.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class TaskDependency
    {

        /// <summary>The task which is the predecessor to the successor task</summary>
        [JsonProperty("FromTask", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Task FromTask { get; set; } = new Task();

        /// <summary>The id of the task which is the predecessor to the successor task</summary>
        [JsonProperty("FromTaskId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? FromTaskId { get; set; }

        /// <summary>The task which is the successor to the predecessor task</summary>
        [JsonProperty("ToTask", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Task ToTask { get; set; } = new Task();

        /// <summary>The id of the task which is the successor to the predecessor task</summary>
        [JsonProperty("ToTaskId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ToTaskId { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TaskDependency FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TaskDependency>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfArticleSalesPrice
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ArticleSalesPrice> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfArticleSalesPrice FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfArticleSalesPrice>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfArticleStock
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ArticleStock> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfArticleStock FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfArticleStock>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfArticleStockTransaction
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ArticleStockTransaction> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfArticleStockTransaction FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfArticleStockTransaction>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfCustomField
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomField> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfCustomField FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfCustomField>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfCompany
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Company> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfCompany FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfCompany>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfCompanyAddress
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CompanyAddress> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfCompanyAddress FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfCompanyAddress>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfCompanyType
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CompanyType> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfCompanyType FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfCompanyType>(data);
        }
    }

    /// <summary>A company type represents the type of a company, for example 'Customer' or 'Supplier'.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class CompanyType
    {

        /// <summary>The name of this company type</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static CompanyType FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CompanyType>(data);
        }
    }

    /// <summary>This class contains some details about the current Azure configuration and is used to monitor and manage Azure.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class AzureConfig
    {

        [JsonProperty("Id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>The host name this login config is valid for</summary>
        [JsonProperty("AccessToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessToken { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static AzureConfig FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AzureConfig>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfConfigSystemEvent
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ConfigSystemEvent> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfConfigSystemEvent FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfConfigSystemEvent>(data);
        }
    }

    /// <summary>A system audit log event</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ConfigSystemEvent
    {

        /// <summary>The name of the property that changed</summary>
        [JsonProperty("PropertyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PropertyName { get; set; }

        /// <summary>The id of the object that changed</summary>
        [JsonProperty("EntityId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? EntityId { get; set; }

        /// <summary>The old value of the property</summary>
        [JsonProperty("OldValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OldValue { get; set; }

        /// <summary>The new value of the property</summary>
        [JsonProperty("NewValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NewValue { get; set; }

        /// <summary>The operation type, for example changed, created or removed</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public ConfigSystemEventType? Type { get; set; }

        /// <summary>The name of the database object that changed</summary>
        [JsonProperty("DatabaseObject", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DatabaseObject { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ConfigSystemEvent FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ConfigSystemEvent>(data);
        }
    }

    /// <summary>Hangfire statistics</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class HangfireStats
    {

        /// <summary>A stringified object containing the succeeded jobs of the last 24 hours</summary>
        [JsonProperty("Succeeded", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Succeeded { get; set; }

        /// <summary>A stringified object containing the failed jobs of the last 24 hours</summary>
        [JsonProperty("Failed", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Failed { get; set; }

        /// <summary>The amount of currently active Hangfire servers</summary>
        [JsonProperty("ServerCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ServerCount { get; set; }

        /// <summary>The amount of currently scheduled recurring jobs</summary>
        [JsonProperty("RecurringCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? RecurringCount { get; set; }

        /// <summary>The current amount of jobs in the retry queue</summary>
        [JsonProperty("RetriesCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? RetriesCount { get; set; }

        /// <summary>The current amount of jobs in all queues</summary>
        [JsonProperty("EnqueuedCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? EnqueuedCount { get; set; }

        /// <summary>The total amount of succeeded jobs</summary>
        [JsonProperty("SucceededCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? SucceededCount { get; set; }

        /// <summary>The total amount of failed jobs</summary>
        [JsonProperty("FailedCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? FailedCount { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static HangfireStats FromJson(string data)
        {
            return JsonConvert.DeserializeObject<HangfireStats>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfInternalCompany
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<InternalCompany> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfInternalCompany FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfInternalCompany>(data);
        }
    }

    /// <summary>Represents internal companies that can have different document templates and tax information.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class InternalCompany
    {

        /// <summary>The name of the company</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The tax number of the company</summary>
        [JsonProperty("TaxNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TaxNumber { get; set; }

        /// <summary>The tax id of the company</summary>
        [JsonProperty("TaxId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TaxId { get; set; }

        /// <summary>Whether the company is liable to pay taxes</summary>
        [JsonProperty("IsTaxExempt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsTaxExempt { get; set; }

        /// <summary>The default address of the company</summary>
        [JsonProperty("DefaultAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress DefaultAddress { get; set; } = new CompanyAddress();

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static InternalCompany FromJson(string data)
        {
            return JsonConvert.DeserializeObject<InternalCompany>(data);
        }
    }

    /// <summary>The settings of the system with the specified hostname. This is used for customizing the login screen of the customer's HQ.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class LoginConfig
    {

        /// <summary>The host name this login config is valid for</summary>
        [JsonProperty("Hostname", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Hostname { get; set; }

        /// <summary>The display name of the customer's system</summary>
        [JsonProperty("DisplayName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>The URL of the login image of the customer's system</summary>
        [JsonProperty("DisplayImageUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayImageUrl { get; set; }

        /// <summary>The customer's Id</summary>
        [JsonProperty("CustomerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CustomerId { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static LoginConfig FromJson(string data)
        {
            return JsonConvert.DeserializeObject<LoginConfig>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfMenuItem
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<MenuItem> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfMenuItem FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfMenuItem>(data);
        }
    }

    /// <summary>Represents an entry in the menu structure of the system for the current users</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class MenuItem
    {

        /// <summary>The displayed title of the menu item</summary>
        [JsonProperty("Title", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>The displayed icon of the menu item</summary>
        [JsonProperty("Icon", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }

        /// <summary>The URL of the module to load</summary>
        [JsonProperty("Url", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>The sub-menu items</summary>
        [JsonProperty("Children", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<MenuItem> Children { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static MenuItem FromJson(string data)
        {
            return JsonConvert.DeserializeObject<MenuItem>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfResponseTimeLog
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ResponseTimeLog> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfResponseTimeLog FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfResponseTimeLog>(data);
        }
    }

    /// <summary>A response time log represents the time it takes for module to load.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ResponseTimeLog
    {

        /// <summary>The url of the measured time</summary>
        [JsonProperty("Url", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>The user name of the user of this measurement</summary>
        [JsonProperty("UserName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

        /// <summary>The name of the customer the user belongs to</summary>
        [JsonProperty("CustomerName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        /// <summary>The id of the customer the user belongs to</summary>
        [JsonProperty("CustomerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CustomerId { get; set; }

        /// <summary>The actual response time of the module</summary>
        [JsonProperty("ResponseTime", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ResponseTime { get; set; }

        /// <summary>The time the response time measurement was taken</summary>
        [JsonProperty("TimeStamp", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? TimeStamp { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ResponseTimeLog FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ResponseTimeLog>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfContactHistory
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ContactHistory> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfContactHistory FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfContactHistory>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfContactPerson
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ContactPerson> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfContactPerson FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfContactPerson>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfCustomFieldDefinition
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomFieldDefinition> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfCustomFieldDefinition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfCustomFieldDefinition>(data);
        }
    }

    /// <summary>A custom field definition is a customer-specific value field which extends certain entities.
    ///             Custom field definitions can currently only be created in the HQ, but can be accessed and modified in the API.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class CustomFieldDefinition
    {

        /// <summary>The name of this custom field definition</summary>
        [JsonProperty("Name", Required = Required.Always)]
        [Required]
        public string Name { get; set; }

        /// <summary>The description of this custom field definition</summary>
        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The display order of this custom field definition</summary>
        [JsonProperty("Order", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Order { get; set; }

        /// <summary>The required right level to read this custom field</summary>
        [JsonProperty("RightLevelRead", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? RightLevelRead { get; set; }

        /// <summary>The required right level to write this custom field</summary>
        [JsonProperty("RightLevelWrite", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? RightLevelWrite { get; set; }

        /// <summary>Whether this is a required field</summary>
        [JsonProperty("IsRequired", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRequired { get; set; }

        /// <summary>The textual representation of the type</summary>
        [JsonProperty("TypeText", Required = Required.Always)]
        [Required]
        public string TypeText { get; set; }

        /// <summary>The textual representation of the category</summary>
        [JsonProperty("Category", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public CustomFieldDefinitionCategory? Category { get; set; }

        /// <summary>A list of selectable options for custom fields of multi-select types</summary>
        [JsonProperty("Options", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomFieldOption> Options { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static CustomFieldDefinition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CustomFieldDefinition>(data);
        }
    }

    /// <summary>A selectable option of a multi-select custom field definition</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class CustomFieldOption
    {

        /// <summary>The custom field option</summary>
        [JsonProperty("OptionValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OptionValue { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static CustomFieldOption FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CustomFieldOption>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfDocumentCondition
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentCondition> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfDocumentCondition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfDocumentCondition>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfDocumentPosition
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentPosition> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfDocumentPosition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfDocumentPosition>(data);
        }
    }

    /// <summary>A document position represents a position on a quotation or invoice.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class DocumentPosition
    {

        /// <summary>Whether this position is optional. Only valid in quotations.</summary>
        [JsonProperty("IsOptional", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsOptional { get; set; }

        /// <summary>The position text, as HTML</summary>
        [JsonProperty("Text", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>The position unit</summary>
        [JsonProperty("Unit", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Unit { get; set; }

        /// <summary>The position tax rate, for example 19%</summary>
        [JsonProperty("Tax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Tax { get; set; }

        /// <summary>The position price, in the currency of the document</summary>
        [JsonProperty("Price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Price { get; set; }

        /// <summary>The percentage discount that should be applied to this position sum</summary>
        [JsonProperty("Discount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Discount { get; set; }

        /// <summary>The margin that should be applied to this position sum</summary>
        [JsonProperty("Margin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Margin { get; set; }

        /// <summary>The type of this position</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public DocumentPositionType? Type { get; set; }

        /// <summary>The order of this position in the document</summary>
        [JsonProperty("Order", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Order { get; set; }

        /// <summary>The Id of the article that is associated with this position</summary>
        [JsonProperty("ArticleId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ArticleId { get; set; }

        /// <summary>The article that is associated with this position</summary>
        [JsonProperty("Article", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Article Article { get; set; } = new Article();

        /// <summary>The amount of this position in this document</summary>
        [JsonProperty("Amount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>The booking account this position is associated with</summary>
        [JsonProperty("BookingAccount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string BookingAccount { get; set; }

        /// <summary>The cost center 1 this position is associated with</summary>
        [JsonProperty("CostCenter1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CostCenter1 { get; set; }

        /// <summary>The cost center 2 this position is associated with</summary>
        [JsonProperty("CostCenter2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CostCenter2 { get; set; }

        /// <summary>Whether this position should be excluded from early payment discount calculations</summary>
        [JsonProperty("ExcludeFromEarlyPayment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? ExcludeFromEarlyPayment { get; set; }

        /// <summary>The total price under consideration of margin and discount</summary>
        [JsonProperty("TotalPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalPrice { get; set; }

        /// <summary>The total unit price under consideration of margin and discount</summary>
        [JsonProperty("TotalUnitPrice", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalUnitPrice { get; set; }

        /// <summary>The total VAT of this position under consideration of margin and discount</summary>
        [JsonProperty("TotalVat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalVat { get; set; }

        /// <summary>The custom fields of this document position</summary>
        [JsonProperty("CustomFields", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CustomField> CustomFields { get; set; }

        /// <summary>The Id of the document the position belongs to</summary>
        [JsonProperty("DocumentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DocumentId { get; set; }

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DocumentPosition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentPosition>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfDocumentTemplate
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentTemplate> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfDocumentTemplate FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfDocumentTemplate>(data);
        }
    }

    /// <summary>A document template represents the templates you designed in your HQ.
    ///             They contain your stationary, fonts and texts for invoices, quotations and other types of documents.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class DocumentTemplate
    {

        /// <summary>The name of the document template</summary>
        [JsonProperty("Name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The type of document this template is for</summary>
        [JsonProperty("DocumentType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public DocumentTemplateDocumentType? DocumentType { get; set; }

        /// <summary>The language of this template</summary>
        [JsonProperty("Language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>The id of the internal company this document template belongs to</summary>
        [JsonProperty("InternalCompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InternalCompanyId { get; set; }

        /// <summary>The internal company this document template belongs to</summary>
        [JsonProperty("InternalCompany", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public InternalCompany InternalCompany { get; set; } = new InternalCompany();

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DocumentTemplate FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentTemplate>(data);
        }
    }

    /// <summary>A generic document, used for internal purposes only</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class Document
    {

        /// <summary>The type of the document</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public DocumentType? Type { get; set; }

        /// <summary>The receiver address text of the document</summary>
        [JsonProperty("AddressText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddressText { get; set; }

        /// <summary>The id of the postal address of the receiving company</summary>
        [JsonProperty("CompanyAddressId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyAddressId { get; set; }

        /// <summary>The postal address of the receiving company</summary>
        [JsonProperty("CompanyAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress CompanyAddress { get; set; } = new CompanyAddress();

        /// <summary>The subject of the document</summary>
        [JsonProperty("Subject", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Subject { get; set; }

        /// <summary>The header text on the document</summary>
        [JsonProperty("Header", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Header { get; set; }

        /// <summary>The footer text on the document</summary>
        [JsonProperty("Footer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Footer { get; set; }

        /// <summary>The document template id</summary>
        [JsonProperty("DocumentTemplateId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DocumentTemplateId { get; set; }

        /// <summary>The number of the document, auto generated by the HQ</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>The id of the responsible contact person at the receiving company</summary>
        [JsonProperty("ContactPersonId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ContactPersonId { get; set; }

        /// <summary>The responsible contact person at the receiving company</summary>
        [JsonProperty("ContactPerson", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ContactPerson ContactPerson { get; set; } = new ContactPerson();

        /// <summary>The id of the company which is the receiver of the document</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId { get; set; }

        /// <summary>The company which is the receiver of the document</summary>
        [JsonProperty("Company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Company Company { get; set; } = new Company();

        /// <summary>The id of the HQ user responsible for this document</summary>
        [JsonProperty("InternalContactPersonId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InternalContactPersonId { get; set; }

        /// <summary>The HQ user repsonsible for this document</summary>
        [JsonProperty("InternalContactPerson", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User InternalContactPerson { get; set; } = new User();

        /// <summary>The id of the lead related to the document</summary>
        [JsonProperty("LeadId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LeadId { get; set; }

        /// <summary>The lead related to the document</summary>
        [JsonProperty("Lead", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Lead Lead { get; set; } = new Lead();

        /// <summary>A unique identifier for other sync clients</summary>
        [JsonProperty("SyncId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SyncId { get; set; }

        /// <summary>the id of the project related to the document</summary>
        [JsonProperty("ProjectId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectId { get; set; }

        /// <summary>The project related to the document</summary>
        [JsonProperty("Project", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Project Project { get; set; } = new Project();

        /// <summary>The comment on the document</summary>
        [JsonProperty("Note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        /// <summary>The language of the document as two-letter ISOCode, for example 'DE'</summary>
        [JsonProperty("Language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>The generated pdf file</summary>
        [JsonProperty("DocumentFile", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public HQFile DocumentFile { get; set; } = new HQFile();

        /// <summary>The generated pdf file, as an image</summary>
        [JsonProperty("DocumentImage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public HQFile DocumentImage { get; set; } = new HQFile();

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Document FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Document>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfInvoice
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Invoice> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfInvoice FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfInvoice>(data);
        }
    }

    /// <summary>An invoice represents an outgoing invoice, cancellation or advance payment invoice you send to your customers.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class Invoice
    {

        /// <summary>The date of this invoice</summary>
        [JsonProperty("InvoiceDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>The payment due date of this invoice</summary>
        [JsonProperty("DueDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? DueDate { get; set; }

        /// <summary>The date this invoice was booked</summary>
        [JsonProperty("BookingDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? BookingDate { get; set; }

        /// <summary>The status of this invoice</summary>
        [JsonProperty("Status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public InvoiceStatus? Status { get; set; }

        /// <summary>The positions of this invoice</summary>
        [JsonProperty("Positions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentPosition> Positions { get; set; }

        /// <summary>The ISO 4217 code of the currency of this document.</summary>
        [JsonProperty("Currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>The exchange rate to Euro.
        ///             While the document is in a draft state, the exchange rate reflects the current exchange rate of ECB.
        ///             After the document has been sent, the exchange rate at that date will be returned.</summary>
        [JsonProperty("ExchangeRate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; }

        /// <summary>The date of the delivery of the products or services.</summary>
        [JsonProperty("DeliveryDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? DeliveryDate { get; set; }

        /// <summary>The Id of the payment condition.</summary>
        [JsonProperty("PaymentConditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? PaymentConditionId { get; set; }

        /// <summary>The Id of the delivery condition.</summary>
        [JsonProperty("DeliveryConditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DeliveryConditionId { get; set; }

        /// <summary>The payment condition that applies to this document</summary>
        [JsonProperty("PaymentCondition", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DocumentCondition PaymentCondition { get; set; } = new DocumentCondition();

        /// <summary>The delivery condition that applies to this document</summary>
        [JsonProperty("DeliveryCondition", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DocumentCondition DeliveryCondition { get; set; } = new DocumentCondition();

        /// <summary>Whether the document discount is specified as a total or a percentage.</summary>
        [JsonProperty("DiscountType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public InvoiceDiscountType? DiscountType { get; set; }

        /// <summary>A discount that should be applied to the total sum.
        ///             This is either a total or a percantage value, depending on the DiscountType.</summary>
        [JsonProperty("Discount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Discount { get; set; }

        /// <summary>A margin (as a percentage) that should be applied to the total sum.
        ///             This margin will be equally distributed over all positions.</summary>
        [JsonProperty("Margin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Margin { get; set; }

        /// <summary>The tax rule that should apply to this document.
        ///             VAT is most commonly used for documents within the same country.</summary>
        [JsonProperty("TaxOption", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public InvoiceTaxOption? TaxOption { get; set; }

        /// <summary>Whether the positions in this document are a delivery or any other kind of service.</summary>
        [JsonProperty("ServiceOption", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public InvoiceServiceOption? ServiceOption { get; set; }

        /// <summary>The net sum of the document. This is calculated considering all positions, position and document margin as well as position and document discount.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("NetTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? NetTotal { get; set; }

        /// <summary>The gross sum of the document. This is calculated considering all positions, position taxes, position and document margin as well as position and document discount.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("GrossTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? GrossTotal { get; set; }

        /// <summary>The sum of the position VAT.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("VatTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? VatTotal { get; set; }

        /// <summary>The sum of received payments for this document.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("PaidTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? PaidTotal { get; set; }

        /// <summary>The type of the document</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public InvoiceType? Type { get; set; }

        /// <summary>The receiver address text of the document</summary>
        [JsonProperty("AddressText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddressText { get; set; }

        /// <summary>The id of the postal address of the receiving company</summary>
        [JsonProperty("CompanyAddressId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyAddressId { get; set; }

        /// <summary>The postal address of the receiving company</summary>
        [JsonProperty("CompanyAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress CompanyAddress { get; set; } = new CompanyAddress();

        /// <summary>The subject of the document</summary>
        [JsonProperty("Subject", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Subject { get; set; }

        /// <summary>The header text on the document</summary>
        [JsonProperty("Header", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Header { get; set; }

        /// <summary>The footer text on the document</summary>
        [JsonProperty("Footer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Footer { get; set; }

        /// <summary>The document template id</summary>
        [JsonProperty("DocumentTemplateId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DocumentTemplateId { get; set; }

        /// <summary>The number of the document, auto generated by the HQ</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>The id of the responsible contact person at the receiving company</summary>
        [JsonProperty("ContactPersonId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ContactPersonId { get; set; }

        /// <summary>The responsible contact person at the receiving company</summary>
        [JsonProperty("ContactPerson", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ContactPerson ContactPerson { get; set; } = new ContactPerson();

        /// <summary>The id of the company which is the receiver of the document</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId { get; set; }

        /// <summary>The company which is the receiver of the document</summary>
        [JsonProperty("Company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Company Company { get; set; } = new Company();

        /// <summary>The id of the HQ user responsible for this document</summary>
        [JsonProperty("InternalContactPersonId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InternalContactPersonId { get; set; }

        /// <summary>The HQ user repsonsible for this document</summary>
        [JsonProperty("InternalContactPerson", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User InternalContactPerson { get; set; } = new User();

        /// <summary>The id of the lead related to the document</summary>
        [JsonProperty("LeadId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LeadId { get; set; }

        /// <summary>The lead related to the document</summary>
        [JsonProperty("Lead", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Lead Lead { get; set; } = new Lead();

        /// <summary>A unique identifier for other sync clients</summary>
        [JsonProperty("SyncId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SyncId { get; set; }

        /// <summary>the id of the project related to the document</summary>
        [JsonProperty("ProjectId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectId { get; set; }

        /// <summary>The project related to the document</summary>
        [JsonProperty("Project", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Project Project { get; set; } = new Project();

        /// <summary>The comment on the document</summary>
        [JsonProperty("Note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        /// <summary>The language of the document as two-letter ISOCode, for example 'DE'</summary>
        [JsonProperty("Language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>The generated pdf file</summary>
        [JsonProperty("DocumentFile", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public HQFile DocumentFile { get; set; } = new HQFile();

        /// <summary>The generated pdf file, as an image</summary>
        [JsonProperty("DocumentImage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public HQFile DocumentImage { get; set; } = new HQFile();

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Invoice FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Invoice>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfQuotation
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Quotation> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfQuotation FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfQuotation>(data);
        }
    }

    /// <summary>A quotation represents an outgoing quotation you send to your customers.</summary>
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class Quotation
    {

        /// <summary>The date of this quotation</summary>
        [JsonProperty("QuotationDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? QuotationDate { get; set; }

        /// <summary>The date this quotation is valid to</summary>
        [JsonProperty("ValidUntilDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? ValidUntilDate { get; set; }

        /// <summary>The status of this quotation</summary>
        [JsonProperty("Status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public QuotationStatus? Status { get; set; }

        /// <summary>The positions of this quotation</summary>
        [JsonProperty("Positions", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentPosition> Positions { get; set; }

        /// <summary>The ISO 4217 code of the currency of this document.</summary>
        [JsonProperty("Currency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>The exchange rate to Euro.
        ///             While the document is in a draft state, the exchange rate reflects the current exchange rate of ECB.
        ///             After the document has been sent, the exchange rate at that date will be returned.</summary>
        [JsonProperty("ExchangeRate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; }

        /// <summary>The date of the delivery of the products or services.</summary>
        [JsonProperty("DeliveryDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? DeliveryDate { get; set; }

        /// <summary>The Id of the payment condition.</summary>
        [JsonProperty("PaymentConditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? PaymentConditionId { get; set; }

        /// <summary>The Id of the delivery condition.</summary>
        [JsonProperty("DeliveryConditionId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DeliveryConditionId { get; set; }

        /// <summary>The payment condition that applies to this document</summary>
        [JsonProperty("PaymentCondition", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DocumentCondition PaymentCondition { get; set; } = new DocumentCondition();

        /// <summary>The delivery condition that applies to this document</summary>
        [JsonProperty("DeliveryCondition", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DocumentCondition DeliveryCondition { get; set; } = new DocumentCondition();

        /// <summary>Whether the document discount is specified as a total or a percentage.</summary>
        [JsonProperty("DiscountType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public QuotationDiscountType? DiscountType { get; set; }

        /// <summary>A discount that should be applied to the total sum.
        ///             This is either a total or a percantage value, depending on the DiscountType.</summary>
        [JsonProperty("Discount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Discount { get; set; }

        /// <summary>A margin (as a percentage) that should be applied to the total sum.
        ///             This margin will be equally distributed over all positions.</summary>
        [JsonProperty("Margin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Margin { get; set; }

        /// <summary>The tax rule that should apply to this document.
        ///             VAT is most commonly used for documents within the same country.</summary>
        [JsonProperty("TaxOption", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public QuotationTaxOption? TaxOption { get; set; }

        /// <summary>Whether the positions in this document are a delivery or any other kind of service.</summary>
        [JsonProperty("ServiceOption", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public QuotationServiceOption? ServiceOption { get; set; }

        /// <summary>The net sum of the document. This is calculated considering all positions, position and document margin as well as position and document discount.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("NetTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? NetTotal { get; set; }

        /// <summary>The gross sum of the document. This is calculated considering all positions, position taxes, position and document margin as well as position and document discount.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("GrossTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? GrossTotal { get; set; }

        /// <summary>The sum of the position VAT.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("VatTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? VatTotal { get; set; }

        /// <summary>The sum of received payments for this document.
        ///             The sum is to be interpreted in the document currency.
        ///             Read-only.</summary>
        [JsonProperty("PaidTotal", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? PaidTotal { get; set; }

        /// <summary>The type of the document</summary>
        [JsonProperty("Type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public QuotationType? Type { get; set; }

        /// <summary>The receiver address text of the document</summary>
        [JsonProperty("AddressText", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AddressText { get; set; }

        /// <summary>The id of the postal address of the receiving company</summary>
        [JsonProperty("CompanyAddressId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyAddressId { get; set; }

        /// <summary>The postal address of the receiving company</summary>
        [JsonProperty("CompanyAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CompanyAddress CompanyAddress { get; set; } = new CompanyAddress();

        /// <summary>The subject of the document</summary>
        [JsonProperty("Subject", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Subject { get; set; }

        /// <summary>The header text on the document</summary>
        [JsonProperty("Header", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Header { get; set; }

        /// <summary>The footer text on the document</summary>
        [JsonProperty("Footer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Footer { get; set; }

        /// <summary>The document template id</summary>
        [JsonProperty("DocumentTemplateId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DocumentTemplateId { get; set; }

        /// <summary>The number of the document, auto generated by the HQ</summary>
        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>The id of the responsible contact person at the receiving company</summary>
        [JsonProperty("ContactPersonId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ContactPersonId { get; set; }

        /// <summary>The responsible contact person at the receiving company</summary>
        [JsonProperty("ContactPerson", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ContactPerson ContactPerson { get; set; } = new ContactPerson();

        /// <summary>The id of the company which is the receiver of the document</summary>
        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId { get; set; }

        /// <summary>The company which is the receiver of the document</summary>
        [JsonProperty("Company", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Company Company { get; set; } = new Company();

        /// <summary>The id of the HQ user responsible for this document</summary>
        [JsonProperty("InternalContactPersonId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? InternalContactPersonId { get; set; }

        /// <summary>The HQ user repsonsible for this document</summary>
        [JsonProperty("InternalContactPerson", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public User InternalContactPerson { get; set; } = new User();

        /// <summary>The id of the lead related to the document</summary>
        [JsonProperty("LeadId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LeadId { get; set; }

        /// <summary>The lead related to the document</summary>
        [JsonProperty("Lead", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Lead Lead { get; set; } = new Lead();

        /// <summary>A unique identifier for other sync clients</summary>
        [JsonProperty("SyncId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SyncId { get; set; }

        /// <summary>the id of the project related to the document</summary>
        [JsonProperty("ProjectId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectId { get; set; }

        /// <summary>The project related to the document</summary>
        [JsonProperty("Project", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Project Project { get; set; } = new Project();

        /// <summary>The comment on the document</summary>
        [JsonProperty("Note", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        /// <summary>The language of the document as two-letter ISOCode, for example 'DE'</summary>
        [JsonProperty("Language", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>The generated pdf file</summary>
        [JsonProperty("DocumentFile", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public HQFile DocumentFile { get; set; } = new HQFile();

        /// <summary>The generated pdf file, as an image</summary>
        [JsonProperty("DocumentImage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public HQFile DocumentImage { get; set; } = new HQFile();

        /// <summary>The unique identifier of this entity</summary>
        [JsonProperty("Id", Required = Required.Always)]
        public int Id { get; set; }

        /// <summary>The id of the user who created this entity</summary>
        [JsonProperty("CreatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CreatedBy { get; set; }

        /// <summary>The id of the last user who modified this entity</summary>
        [JsonProperty("UpdatedBy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? UpdatedBy { get; set; }

        /// <summary>The date and time this entity was created, in UTC</summary>
        [JsonProperty("CreatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>The last date and time this entity was updated, in UTC</summary>
        [JsonProperty("UpdatedOn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? UpdatedOn { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Quotation FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Quotation>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfHQFile
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<HQFile> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfHQFile FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfHQFile>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfLeadStatus
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<LeadStatus> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfLeadStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfLeadStatus>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfLead
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Lead> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfLead FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfLead>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfProjectRole
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ProjectRole> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfProjectRole FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfProjectRole>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfProjectStatus
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ProjectStatus> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfProjectStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfProjectStatus>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfTask
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Task> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfTask FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfTask>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfTaskDependency
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<TaskDependency> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfTaskDependency FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfTaskDependency>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfTaskAssignment
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<TaskAssignment> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfTaskAssignment FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfTaskAssignment>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfProjectTemplate
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ProjectTemplate> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfProjectTemplate FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfProjectTemplate>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfProject
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Project> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfProject FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfProject>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfTaskType
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<TaskType> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfTaskType FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfTaskType>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfUserReporting
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<UserReporting> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfUserReporting FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfUserReporting>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfUser
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<User> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfUser FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfUser>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ODataResponseOfListOfUserAbsence
    {

        [JsonProperty("@odata.context", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ODataContext { get; set; }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<UserAbsence> Value { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ODataResponseOfListOfUserAbsence FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ODataResponseOfListOfUserAbsence>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ArticlesV1CreateTransactionParameters
    {

        [JsonProperty("Type", Required = Required.Always)]
        [Required]
        [JsonConverter(typeof(StringEnumConverter))]
        public ArticlesV1CreateTransactionParametersType Type { get; set; }

        [JsonProperty("Quantity", Required = Required.Always)]
        public double Quantity { get; set; }

        [JsonProperty("StorageId", Required = Required.Always)]
        public int StorageId { get; set; }

        [JsonProperty("TargetStorageId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TargetStorageId { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ArticlesV1CreateTransactionParameters FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ArticlesV1CreateTransactionParameters>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class InvoicesV1SetStatusParameters
    {

        [JsonProperty("Status", Required = Required.Always)]
        [Required]
        [JsonConverter(typeof(StringEnumConverter))]
        public InvoicesV1SetStatusParametersStatus Status { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static InvoicesV1SetStatusParameters FromJson(string data)
        {
            return JsonConvert.DeserializeObject<InvoicesV1SetStatusParameters>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class InvoicesV1AttachAdvanceInvoiceParameters
    {

        [JsonProperty("AdvanceInvoiceId", Required = Required.Always)]
        public double AdvanceInvoiceId { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static InvoicesV1AttachAdvanceInvoiceParameters FromJson(string data)
        {
            return JsonConvert.DeserializeObject<InvoicesV1AttachAdvanceInvoiceParameters>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class QuotationsV1SetStatusParameters
    {

        [JsonProperty("Status", Required = Required.Always)]
        [Required]
        [JsonConverter(typeof(StringEnumConverter))]
        public QuotationsV1SetStatusParametersStatus Status { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static QuotationsV1SetStatusParameters FromJson(string data)
        {
            return JsonConvert.DeserializeObject<QuotationsV1SetStatusParameters>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class QuotationsV1CreateAdvanceInvoiceParameters
    {

        [JsonProperty("InvoiceType", Required = Required.Always)]
        [Required]
        [JsonConverter(typeof(StringEnumConverter))]
        public QuotationsV1CreateAdvanceInvoiceParametersInvoiceType InvoiceType { get; set; }

        [JsonProperty("AdvanceInvoiceValue", Required = Required.Always)]
        public double AdvanceInvoiceValue { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static QuotationsV1CreateAdvanceInvoiceParameters FromJson(string data)
        {
            return JsonConvert.DeserializeObject<QuotationsV1CreateAdvanceInvoiceParameters>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ProjectTaskV1SetStatusParams
    {

        [JsonProperty("Status", Required = Required.Always)]
        public int Status { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ProjectTaskV1SetStatusParams FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ProjectTaskV1SetStatusParams>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ProjectV1CreateParameters
    {

        [JsonProperty("ProjectTemplateId", Required = Required.Always)]
        public int ProjectTemplateId { get; set; }

        [JsonProperty("Name", Required = Required.Always)]
        [Required]
        public string Name { get; set; }

        [JsonProperty("Number", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        [JsonProperty("CompanyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CompanyId { get; set; }

        [JsonProperty("ContactPersonId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ContactPersonId { get; set; }

        [JsonProperty("ResponsibleUserId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ResponsibleUserId { get; set; }

        [JsonProperty("LeadId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? LeadId { get; set; }

        [JsonProperty("StartDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? StartDate { get; set; }

        [JsonProperty("ProjectStatusId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ProjectStatusId { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ProjectV1CreateParameters FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ProjectV1CreateParameters>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ProjectV1AddMemberParameters
    {

        [JsonProperty("UserId", Required = Required.Always)]
        public int UserId { get; set; }

        [JsonProperty("ProjectRoleId", Required = Required.Always)]
        public int ProjectRoleId { get; set; }

        [JsonProperty("ExternalChargeRateId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? ExternalChargeRateId { get; set; }

        [JsonProperty("ExternalChargeRateValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? ExternalChargeRateValue { get; set; }

        [JsonProperty("ExternalChargeRateCurrency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ExternalChargeRateCurrency { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ProjectV1AddMemberParameters FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ProjectV1AddMemberParameters>(data);
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public partial class ProjectV1CreateReportingParameters
    {

        [JsonProperty("UserId", Required = Required.Always)]
        public int UserId { get; set; }

        [JsonProperty("TaskId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TaskId { get; set; }

        [JsonProperty("StartDate", Required = Required.Always)]
        [Required]
        public DateTimeOffset StartDate { get; set; }

        [JsonProperty("Duration", Required = Required.Always)]
        public double Duration { get; set; }

        [JsonProperty("Description", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ProjectV1CreateReportingParameters FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ProjectV1CreateReportingParameters>(data);
        }
    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum ArticleBaseType
    {
        [EnumMember(Value = "Stock")]
        Stock = 0,

        [EnumMember(Value = "Action")]
        Action = 1,

        [EnumMember(Value = "Material")]
        Material = 2,

        [EnumMember(Value = "NotSet")]
        NotSet = 3,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum CustomFieldType
    {
        [EnumMember(Value = "Text")]
        Text = 0,

        [EnumMember(Value = "TextMultiline")]
        TextMultiline = 1,

        [EnumMember(Value = "Date")]
        Date = 2,

        [EnumMember(Value = "Dropdown")]
        Dropdown = 3,

        [EnumMember(Value = "DropdownCheckbox")]
        DropdownCheckbox = 4,

        [EnumMember(Value = "Boolean")]
        Boolean = 5,

        [EnumMember(Value = "Upload")]
        Upload = 6,

        [EnumMember(Value = "UserSelection")]
        UserSelection = 7,

        [EnumMember(Value = "CompanySelection")]
        CompanySelection = 8,

        [EnumMember(Value = "ProjectSelection")]
        ProjectSelection = 9,

        [EnumMember(Value = "ResourceSelection")]
        ResourceSelection = 10,

        [EnumMember(Value = "ContactSelection")]
        ContactSelection = 11,

        [EnumMember(Value = "Link")]
        Link = 12,

        [EnumMember(Value = "Float")]
        Float = 13,

        [EnumMember(Value = "Integer")]
        Integer = 14,

        [EnumMember(Value = "Token")]
        Token = 15,

        [EnumMember(Value = "NumericText")]
        NumericText = 16,

        [EnumMember(Value = "NotSet")]
        NotSet = 17,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum ArticleDiscountType
    {
        [EnumMember(Value = "Percent")]
        Percent = 0,

        [EnumMember(Value = "NetValue")]
        NetValue = 1,

        [EnumMember(Value = "NotSet")]
        NotSet = 2,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum ArticleStockTransactionType
    {
        [EnumMember(Value = "GoodsIn")]
        GoodsIn = 0,

        [EnumMember(Value = "GoodsOut")]
        GoodsOut = 1,

        [EnumMember(Value = "Used")]
        Used = 2,

        [EnumMember(Value = "Loss")]
        Loss = 3,

        [EnumMember(Value = "Broken")]
        Broken = 4,

        [EnumMember(Value = "Rearrange")]
        Rearrange = 5,

        [EnumMember(Value = "Correction")]
        Correction = 6,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum CompanyAddressDefaultForDocumentType
    {
        [EnumMember(Value = "Quotation")]
        Quotation = 0,

        [EnumMember(Value = "Invoice")]
        Invoice = 1,

        [EnumMember(Value = "DeliveryNote")]
        DeliveryNote = 2,

        [EnumMember(Value = "Warning")]
        Warning = 3,

        [EnumMember(Value = "Reminder")]
        Reminder = 4,

        [EnumMember(Value = "Cancellation")]
        Cancellation = 5,

        [EnumMember(Value = "CreditNote")]
        CreditNote = 6,

        [EnumMember(Value = "Confirmation")]
        Confirmation = 7,

        [EnumMember(Value = "IncomingInvoice")]
        IncomingInvoice = 8,

        [EnumMember(Value = "Undefined")]
        Undefined = 9,

        [EnumMember(Value = "Order")]
        Order = 10,

        [EnumMember(Value = "PriceInquery")]
        PriceInquery = 11,

        [EnumMember(Value = "Letter")]
        Letter = 12,

        [EnumMember(Value = "Minute")]
        Minute = 13,

        [EnumMember(Value = "Akonto")]
        Akonto = 14,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum DocumentConditionType
    {
        [EnumMember(Value = "PaymentConditions")]
        PaymentConditions = 0,

        [EnumMember(Value = "DeliveryConditions")]
        DeliveryConditions = 1,

        [EnumMember(Value = "NotDefined")]
        NotDefined = 2,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum UserAbsenceType
    {
        [EnumMember(Value = "Vacation")]
        Vacation = 0,

        [EnumMember(Value = "PrivateAbsence")]
        PrivateAbsence = 1,

        [EnumMember(Value = "CompanyAbsence")]
        CompanyAbsence = 2,

        [EnumMember(Value = "SickLeave")]
        SickLeave = 3,

        [EnumMember(Value = "SickLeaveUnpaid")]
        SickLeaveUnpaid = 4,

        [EnumMember(Value = "OvertimeCompensation")]
        OvertimeCompensation = 5,

        [EnumMember(Value = "ProfessionalEducation")]
        ProfessionalEducation = 6,

        [EnumMember(Value = "TradeSchool")]
        TradeSchool = 7,

        [EnumMember(Value = "SpecialLeave")]
        SpecialLeave = 8,

        [EnumMember(Value = "ParentalLeave")]
        ParentalLeave = 9,

        [EnumMember(Value = "VacationUnpaid")]
        VacationUnpaid = 10,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum TaskAssignmentAssignmentUnit
    {
        [EnumMember(Value = "Percent")]
        Percent = 0,

        [EnumMember(Value = "Hours")]
        Hours = 1,

        [EnumMember(Value = "Days")]
        Days = 2,

        [EnumMember(Value = "Minutes")]
        Minutes = 3,

        [EnumMember(Value = "Weeks")]
        Weeks = 4,

        [EnumMember(Value = "NotSet")]
        NotSet = 5,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum LeadStatusType
    {
        [EnumMember(Value = "NotSet")]
        NotSet = 0,

        [EnumMember(Value = "Successful")]
        Successful = 1,

        [EnumMember(Value = "Unsuccessful")]
        Unsuccessful = 2,

        [EnumMember(Value = "Open")]
        Open = 3,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum ConfigSystemEventType
    {
        [EnumMember(Value = "EntityCreated")]
        EntityCreated = 0,

        [EnumMember(Value = "PropertyChanged")]
        PropertyChanged = 1,

        [EnumMember(Value = "EntityDeleted")]
        EntityDeleted = 2,

        [EnumMember(Value = "NotSet")]
        NotSet = 3,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum CustomFieldDefinitionCategory
    {
        [EnumMember(Value = "Undefined")]
        Undefined = 0,

        [EnumMember(Value = "Contact")]
        Contact = 1,

        [EnumMember(Value = "ContactHistory")]
        ContactHistory = 2,

        [EnumMember(Value = "User")]
        User = 3,

        [EnumMember(Value = "Company")]
        Company = 4,

        [EnumMember(Value = "Lead")]
        Lead = 5,

        [EnumMember(Value = "Article")]
        Article = 6,

        [EnumMember(Value = "ArticleVersion")]
        ArticleVersion = 7,

        [EnumMember(Value = "Project")]
        Project = 8,

        [EnumMember(Value = "OrganisedEvent")]
        OrganisedEvent = 9,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum DocumentPositionType
    {
        [EnumMember(Value = "Article")]
        Article = 0,

        [EnumMember(Value = "Freetext")]
        Freetext = 1,

        [EnumMember(Value = "OpenPosition")]
        OpenPosition = 2,

        [EnumMember(Value = "UserReporting")]
        UserReporting = 3,

        [EnumMember(Value = "ProjectInvoice")]
        ProjectInvoice = 4,

        [EnumMember(Value = "ProjectArticle")]
        ProjectArticle = 5,

        [EnumMember(Value = "ProjectPlan")]
        ProjectPlan = 6,

        [EnumMember(Value = "Subtotal")]
        Subtotal = 7,

        [EnumMember(Value = "PositionGroup")]
        PositionGroup = 8,

        [EnumMember(Value = "GroupHeader")]
        GroupHeader = 9,

        [EnumMember(Value = "Textline")]
        Textline = 10,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum DocumentTemplateDocumentType
    {
        [EnumMember(Value = "Quotation")]
        Quotation = 0,

        [EnumMember(Value = "Invoice")]
        Invoice = 1,

        [EnumMember(Value = "DeliveryNote")]
        DeliveryNote = 2,

        [EnumMember(Value = "Warning")]
        Warning = 3,

        [EnumMember(Value = "Reminder")]
        Reminder = 4,

        [EnumMember(Value = "Cancellation")]
        Cancellation = 5,

        [EnumMember(Value = "CreditNote")]
        CreditNote = 6,

        [EnumMember(Value = "Confirmation")]
        Confirmation = 7,

        [EnumMember(Value = "IncomingInvoice")]
        IncomingInvoice = 8,

        [EnumMember(Value = "Undefined")]
        Undefined = 9,

        [EnumMember(Value = "Order")]
        Order = 10,

        [EnumMember(Value = "PriceInquery")]
        PriceInquery = 11,

        [EnumMember(Value = "Letter")]
        Letter = 12,

        [EnumMember(Value = "Minute")]
        Minute = 13,

        [EnumMember(Value = "Akonto")]
        Akonto = 14,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum DocumentType
    {
        [EnumMember(Value = "Quotation")]
        Quotation = 0,

        [EnumMember(Value = "Invoice")]
        Invoice = 1,

        [EnumMember(Value = "DeliveryNote")]
        DeliveryNote = 2,

        [EnumMember(Value = "Warning")]
        Warning = 3,

        [EnumMember(Value = "Reminder")]
        Reminder = 4,

        [EnumMember(Value = "Cancellation")]
        Cancellation = 5,

        [EnumMember(Value = "CreditNote")]
        CreditNote = 6,

        [EnumMember(Value = "Confirmation")]
        Confirmation = 7,

        [EnumMember(Value = "IncomingInvoice")]
        IncomingInvoice = 8,

        [EnumMember(Value = "Undefined")]
        Undefined = 9,

        [EnumMember(Value = "Order")]
        Order = 10,

        [EnumMember(Value = "PriceInquery")]
        PriceInquery = 11,

        [EnumMember(Value = "Letter")]
        Letter = 12,

        [EnumMember(Value = "Minute")]
        Minute = 13,

        [EnumMember(Value = "Akonto")]
        Akonto = 14,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum InvoiceStatus
    {
        [EnumMember(Value = "Draft")]
        Draft = 0,

        [EnumMember(Value = "WaitingForReview")]
        WaitingForReview = 1,

        [EnumMember(Value = "Sent")]
        Sent = 2,

        [EnumMember(Value = "PartlyPaid")]
        PartlyPaid = 3,

        [EnumMember(Value = "CompletelyPaid")]
        CompletelyPaid = 4,

        [EnumMember(Value = "Canceled")]
        Canceled = 5,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum InvoiceDiscountType
    {
        [EnumMember(Value = "Percent")]
        Percent = 0,

        [EnumMember(Value = "NetValue")]
        NetValue = 1,

        [EnumMember(Value = "NotSet")]
        NotSet = 2,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum InvoiceTaxOption
    {
        [EnumMember(Value = "VatApplicable")]
        VatApplicable = 0,

        [EnumMember(Value = "FreeThirdCountryTerritory")]
        FreeThirdCountryTerritory = 1,

        [EnumMember(Value = "FreeEuropeanUnionWithVatId")]
        FreeEuropeanUnionWithVatId = 2,

        [EnumMember(Value = "FreeEuropeanUnionNoVatId")]
        FreeEuropeanUnionNoVatId = 3,

        [EnumMember(Value = "Inverse")]
        Inverse = 4,

        [EnumMember(Value = "IntraCommunityDelivery")]
        IntraCommunityDelivery = 5,

        [EnumMember(Value = "ExportDelivery")]
        ExportDelivery = 6,

        [EnumMember(Value = "FreeOther")]
        FreeOther = 7,

        [EnumMember(Value = "FreeYouthSupport")]
        FreeYouthSupport = 8,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum InvoiceServiceOption
    {
        [EnumMember(Value = "None")]
        None = 0,

        [EnumMember(Value = "Delivery")]
        Delivery = 1,

        [EnumMember(Value = "Service")]
        Service = 2,

        [EnumMember(Value = "DeliveryAndService")]
        DeliveryAndService = 3,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum InvoiceType
    {
        [EnumMember(Value = "Quotation")]
        Quotation = 0,

        [EnumMember(Value = "Invoice")]
        Invoice = 1,

        [EnumMember(Value = "DeliveryNote")]
        DeliveryNote = 2,

        [EnumMember(Value = "Warning")]
        Warning = 3,

        [EnumMember(Value = "Reminder")]
        Reminder = 4,

        [EnumMember(Value = "Cancellation")]
        Cancellation = 5,

        [EnumMember(Value = "CreditNote")]
        CreditNote = 6,

        [EnumMember(Value = "Confirmation")]
        Confirmation = 7,

        [EnumMember(Value = "IncomingInvoice")]
        IncomingInvoice = 8,

        [EnumMember(Value = "Undefined")]
        Undefined = 9,

        [EnumMember(Value = "Order")]
        Order = 10,

        [EnumMember(Value = "PriceInquery")]
        PriceInquery = 11,

        [EnumMember(Value = "Letter")]
        Letter = 12,

        [EnumMember(Value = "Minute")]
        Minute = 13,

        [EnumMember(Value = "Akonto")]
        Akonto = 14,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum QuotationStatus
    {
        [EnumMember(Value = "Draft")]
        Draft = 0,

        [EnumMember(Value = "WaitingForReview")]
        WaitingForReview = 1,

        [EnumMember(Value = "Sent")]
        Sent = 2,

        [EnumMember(Value = "Accepted")]
        Accepted = 3,

        [EnumMember(Value = "Declined")]
        Declined = 4,

        [EnumMember(Value = "Canceled")]
        Canceled = 5,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum QuotationDiscountType
    {
        [EnumMember(Value = "Percent")]
        Percent = 0,

        [EnumMember(Value = "NetValue")]
        NetValue = 1,

        [EnumMember(Value = "NotSet")]
        NotSet = 2,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum QuotationTaxOption
    {
        [EnumMember(Value = "VatApplicable")]
        VatApplicable = 0,

        [EnumMember(Value = "FreeThirdCountryTerritory")]
        FreeThirdCountryTerritory = 1,

        [EnumMember(Value = "FreeEuropeanUnionWithVatId")]
        FreeEuropeanUnionWithVatId = 2,

        [EnumMember(Value = "FreeEuropeanUnionNoVatId")]
        FreeEuropeanUnionNoVatId = 3,

        [EnumMember(Value = "Inverse")]
        Inverse = 4,

        [EnumMember(Value = "IntraCommunityDelivery")]
        IntraCommunityDelivery = 5,

        [EnumMember(Value = "ExportDelivery")]
        ExportDelivery = 6,

        [EnumMember(Value = "FreeOther")]
        FreeOther = 7,

        [EnumMember(Value = "FreeYouthSupport")]
        FreeYouthSupport = 8,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum QuotationServiceOption
    {
        [EnumMember(Value = "None")]
        None = 0,

        [EnumMember(Value = "Delivery")]
        Delivery = 1,

        [EnumMember(Value = "Service")]
        Service = 2,

        [EnumMember(Value = "DeliveryAndService")]
        DeliveryAndService = 3,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum QuotationType
    {
        [EnumMember(Value = "Quotation")]
        Quotation = 0,

        [EnumMember(Value = "Invoice")]
        Invoice = 1,

        [EnumMember(Value = "DeliveryNote")]
        DeliveryNote = 2,

        [EnumMember(Value = "Warning")]
        Warning = 3,

        [EnumMember(Value = "Reminder")]
        Reminder = 4,

        [EnumMember(Value = "Cancellation")]
        Cancellation = 5,

        [EnumMember(Value = "CreditNote")]
        CreditNote = 6,

        [EnumMember(Value = "Confirmation")]
        Confirmation = 7,

        [EnumMember(Value = "IncomingInvoice")]
        IncomingInvoice = 8,

        [EnumMember(Value = "Undefined")]
        Undefined = 9,

        [EnumMember(Value = "Order")]
        Order = 10,

        [EnumMember(Value = "PriceInquery")]
        PriceInquery = 11,

        [EnumMember(Value = "Letter")]
        Letter = 12,

        [EnumMember(Value = "Minute")]
        Minute = 13,

        [EnumMember(Value = "Akonto")]
        Akonto = 14,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum ArticlesV1CreateTransactionParametersType
    {
        [EnumMember(Value = "GoodsIn")]
        GoodsIn = 0,

        [EnumMember(Value = "GoodsOut")]
        GoodsOut = 1,

        [EnumMember(Value = "Used")]
        Used = 2,

        [EnumMember(Value = "Loss")]
        Loss = 3,

        [EnumMember(Value = "Broken")]
        Broken = 4,

        [EnumMember(Value = "Rearrange")]
        Rearrange = 5,

        [EnumMember(Value = "Correction")]
        Correction = 6,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum InvoicesV1SetStatusParametersStatus
    {
        [EnumMember(Value = "Draft")]
        Draft = 0,

        [EnumMember(Value = "WaitingForReview")]
        WaitingForReview = 1,

        [EnumMember(Value = "Sent")]
        Sent = 2,

        [EnumMember(Value = "PartlyPaid")]
        PartlyPaid = 3,

        [EnumMember(Value = "CompletelyPaid")]
        CompletelyPaid = 4,

        [EnumMember(Value = "Canceled")]
        Canceled = 5,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum QuotationsV1SetStatusParametersStatus
    {
        [EnumMember(Value = "Draft")]
        Draft = 0,

        [EnumMember(Value = "WaitingForReview")]
        WaitingForReview = 1,

        [EnumMember(Value = "Sent")]
        Sent = 2,

        [EnumMember(Value = "Accepted")]
        Accepted = 3,

        [EnumMember(Value = "Declined")]
        Declined = 4,

        [EnumMember(Value = "Canceled")]
        Canceled = 5,

    }

    [GeneratedCode("NJsonSchema", "6.0.6305.38127")]
    public enum QuotationsV1CreateAdvanceInvoiceParametersInvoiceType
    {
        [EnumMember(Value = "Finish")]
        Finish = 0,

        [EnumMember(Value = "Positions")]
        Positions = 1,

        [EnumMember(Value = "Percentage")]
        Percentage = 2,

        [EnumMember(Value = "Absolute")]
        Absolute = 3,

    }

    [GeneratedCode("NSwag", "7.7.6305.38128")]
    public class SwaggerException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "7.7.6305.38128")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException)
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

}