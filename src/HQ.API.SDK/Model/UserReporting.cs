/* 
 * HQ API Entities
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace HQSB.API.SDK.Model
{
    /// <summary>
    /// A User Reporting represents a logged time of a User on a specific Task in HQ.
    /// </summary>
    [DataContract]
    public partial class UserReporting :  IEquatable<UserReporting>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserReporting" /> class.
        /// </summary>
        /// <param name="Note">The user-provided note of this reporting.</param>
        /// <param name="Duration">The reporting duration, in seconds.</param>
        /// <param name="Task">Task.</param>
        /// <param name="UserId">The id of the user this reporting is for.</param>
        /// <param name="User">The user this reporting is for.</param>
        /// <param name="ChargeRateValue">The external charge rate value.</param>
        /// <param name="InternalChargeRateValue">The interbal charge rate value.</param>
        /// <param name="IsApproved">Whether this reporting was approved.</param>
        /// <param name="StartOn">The date of the reporting.</param>
        /// <param name="BreakDuration">The break duration of this reporting, in seconds.</param>
        /// <param name="ProjectId">The id of the project.</param>
        /// <param name="Project">The Project of the reporting.</param>
        /// <param name="TaskId">The id of the tas.</param>
        /// <param name="Id">The unique identifier of this entity.</param>
        /// <param name="CreatedBy">The id of the user who created this entity.</param>
        /// <param name="UpdatedBy">The id of the last user who modified this entity.</param>
        /// <param name="CreatedOn">The date and time this entity was created, in UTC.</param>
        /// <param name="UpdatedOn">The last date and time this entity was updated, in UTC.</param>
        public UserReporting(string Note = null, long? Duration = null, Task Task = null, int? UserId = null, User User = null, double? ChargeRateValue = null, double? InternalChargeRateValue = null, bool? IsApproved = null, DateTime? StartOn = null, long? BreakDuration = null, int? ProjectId = null, Project Project = null, int? TaskId = null, int? Id = null, int? CreatedBy = null, int? UpdatedBy = null, DateTime? CreatedOn = null, DateTime? UpdatedOn = null)
        {
            this.Note = Note;
            this.Duration = Duration;
            this.Task = Task;
            this.UserId = UserId;
            this.User = User;
            this.ChargeRateValue = ChargeRateValue;
            this.InternalChargeRateValue = InternalChargeRateValue;
            this.IsApproved = IsApproved;
            this.StartOn = StartOn;
            this.BreakDuration = BreakDuration;
            this.ProjectId = ProjectId;
            this.Project = Project;
            this.TaskId = TaskId;
            this.Id = Id;
            this.CreatedBy = CreatedBy;
            this.UpdatedBy = UpdatedBy;
            this.CreatedOn = CreatedOn;
            this.UpdatedOn = UpdatedOn;
        }
        
        /// <summary>
        /// The user-provided note of this reporting
        /// </summary>
        /// <value>The user-provided note of this reporting</value>
        [DataMember(Name="Note", EmitDefaultValue=false)]
        public string Note { get; set; }
        /// <summary>
        /// The reporting duration, in seconds
        /// </summary>
        /// <value>The reporting duration, in seconds</value>
        [DataMember(Name="Duration", EmitDefaultValue=false)]
        public long? Duration { get; set; }
        /// <summary>
        /// Gets or Sets Task
        /// </summary>
        [DataMember(Name="Task", EmitDefaultValue=false)]
        public Task Task { get; set; }
        /// <summary>
        /// The id of the user this reporting is for
        /// </summary>
        /// <value>The id of the user this reporting is for</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// The user this reporting is for
        /// </summary>
        /// <value>The user this reporting is for</value>
        [DataMember(Name="User", EmitDefaultValue=false)]
        public User User { get; set; }
        /// <summary>
        /// The external charge rate value
        /// </summary>
        /// <value>The external charge rate value</value>
        [DataMember(Name="ChargeRateValue", EmitDefaultValue=false)]
        public double? ChargeRateValue { get; set; }
        /// <summary>
        /// The interbal charge rate value
        /// </summary>
        /// <value>The interbal charge rate value</value>
        [DataMember(Name="InternalChargeRateValue", EmitDefaultValue=false)]
        public double? InternalChargeRateValue { get; set; }
        /// <summary>
        /// Whether this reporting was approved
        /// </summary>
        /// <value>Whether this reporting was approved</value>
        [DataMember(Name="IsApproved", EmitDefaultValue=false)]
        public bool? IsApproved { get; set; }
        /// <summary>
        /// The date of the reporting
        /// </summary>
        /// <value>The date of the reporting</value>
        [DataMember(Name="StartOn", EmitDefaultValue=false)]
        public DateTime? StartOn { get; set; }
        /// <summary>
        /// The break duration of this reporting, in seconds
        /// </summary>
        /// <value>The break duration of this reporting, in seconds</value>
        [DataMember(Name="BreakDuration", EmitDefaultValue=false)]
        public long? BreakDuration { get; set; }
        /// <summary>
        /// The id of the project
        /// </summary>
        /// <value>The id of the project</value>
        [DataMember(Name="ProjectId", EmitDefaultValue=false)]
        public int? ProjectId { get; set; }
        /// <summary>
        /// The Project of the reporting
        /// </summary>
        /// <value>The Project of the reporting</value>
        [DataMember(Name="Project", EmitDefaultValue=false)]
        public Project Project { get; set; }
        /// <summary>
        /// The id of the tas
        /// </summary>
        /// <value>The id of the tas</value>
        [DataMember(Name="TaskId", EmitDefaultValue=false)]
        public int? TaskId { get; set; }
        /// <summary>
        /// The unique identifier of this entity
        /// </summary>
        /// <value>The unique identifier of this entity</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// The id of the user who created this entity
        /// </summary>
        /// <value>The id of the user who created this entity</value>
        [DataMember(Name="CreatedBy", EmitDefaultValue=false)]
        public int? CreatedBy { get; set; }
        /// <summary>
        /// The id of the last user who modified this entity
        /// </summary>
        /// <value>The id of the last user who modified this entity</value>
        [DataMember(Name="UpdatedBy", EmitDefaultValue=false)]
        public int? UpdatedBy { get; set; }
        /// <summary>
        /// The date and time this entity was created, in UTC
        /// </summary>
        /// <value>The date and time this entity was created, in UTC</value>
        [DataMember(Name="CreatedOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }
        /// <summary>
        /// The last date and time this entity was updated, in UTC
        /// </summary>
        /// <value>The last date and time this entity was updated, in UTC</value>
        [DataMember(Name="UpdatedOn", EmitDefaultValue=false)]
        public DateTime? UpdatedOn { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserReporting {\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  ChargeRateValue: ").Append(ChargeRateValue).Append("\n");
            sb.Append("  InternalChargeRateValue: ").Append(InternalChargeRateValue).Append("\n");
            sb.Append("  IsApproved: ").Append(IsApproved).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  BreakDuration: ").Append(BreakDuration).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserReporting);
        }

        /// <summary>
        /// Returns true if UserReporting instances are equal
        /// </summary>
        /// <param name="other">Instance of UserReporting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserReporting other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Note == other.Note ||
                    this.Note != null &&
                    this.Note.Equals(other.Note)
                ) && 
                (
                    this.Duration == other.Duration ||
                    this.Duration != null &&
                    this.Duration.Equals(other.Duration)
                ) && 
                (
                    this.Task == other.Task ||
                    this.Task != null &&
                    this.Task.Equals(other.Task)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.ChargeRateValue == other.ChargeRateValue ||
                    this.ChargeRateValue != null &&
                    this.ChargeRateValue.Equals(other.ChargeRateValue)
                ) && 
                (
                    this.InternalChargeRateValue == other.InternalChargeRateValue ||
                    this.InternalChargeRateValue != null &&
                    this.InternalChargeRateValue.Equals(other.InternalChargeRateValue)
                ) && 
                (
                    this.IsApproved == other.IsApproved ||
                    this.IsApproved != null &&
                    this.IsApproved.Equals(other.IsApproved)
                ) && 
                (
                    this.StartOn == other.StartOn ||
                    this.StartOn != null &&
                    this.StartOn.Equals(other.StartOn)
                ) && 
                (
                    this.BreakDuration == other.BreakDuration ||
                    this.BreakDuration != null &&
                    this.BreakDuration.Equals(other.BreakDuration)
                ) && 
                (
                    this.ProjectId == other.ProjectId ||
                    this.ProjectId != null &&
                    this.ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    this.Project == other.Project ||
                    this.Project != null &&
                    this.Project.Equals(other.Project)
                ) && 
                (
                    this.TaskId == other.TaskId ||
                    this.TaskId != null &&
                    this.TaskId.Equals(other.TaskId)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CreatedBy == other.CreatedBy ||
                    this.CreatedBy != null &&
                    this.CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    this.UpdatedBy == other.UpdatedBy ||
                    this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(other.UpdatedBy)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.UpdatedOn == other.UpdatedOn ||
                    this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(other.UpdatedOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Note != null)
                    hash = hash * 59 + this.Note.GetHashCode();
                if (this.Duration != null)
                    hash = hash * 59 + this.Duration.GetHashCode();
                if (this.Task != null)
                    hash = hash * 59 + this.Task.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.ChargeRateValue != null)
                    hash = hash * 59 + this.ChargeRateValue.GetHashCode();
                if (this.InternalChargeRateValue != null)
                    hash = hash * 59 + this.InternalChargeRateValue.GetHashCode();
                if (this.IsApproved != null)
                    hash = hash * 59 + this.IsApproved.GetHashCode();
                if (this.StartOn != null)
                    hash = hash * 59 + this.StartOn.GetHashCode();
                if (this.BreakDuration != null)
                    hash = hash * 59 + this.BreakDuration.GetHashCode();
                if (this.ProjectId != null)
                    hash = hash * 59 + this.ProjectId.GetHashCode();
                if (this.Project != null)
                    hash = hash * 59 + this.Project.GetHashCode();
                if (this.TaskId != null)
                    hash = hash * 59 + this.TaskId.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CreatedBy != null)
                    hash = hash * 59 + this.CreatedBy.GetHashCode();
                if (this.UpdatedBy != null)
                    hash = hash * 59 + this.UpdatedBy.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.UpdatedOn != null)
                    hash = hash * 59 + this.UpdatedOn.GetHashCode();
                return hash;
            }
        }
    }

}
