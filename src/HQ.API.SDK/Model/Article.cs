/* 
 * HQ API Entities
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace HQSB.API.SDK.Model
{
    /// <summary>
    /// Article
    /// </summary>
    [DataContract]
    public partial class Article :  IEquatable<Article>
    {
        /// <summary>
        /// Gets or Sets BaseType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BaseTypeEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 2
        }

        /// <summary>
        /// Gets or Sets BaseType
        /// </summary>
        [DataMember(Name="BaseType", EmitDefaultValue=false)]
        public BaseTypeEnum? BaseType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Article" /> class.
        /// </summary>
        /// <param name="Name">The name of this article.</param>
        /// <param name="Number">Number.</param>
        /// <param name="ArticleCategoryId">ArticleCategoryId.</param>
        /// <param name="BaseType">BaseType.</param>
        /// <param name="Description">Description.</param>
        /// <param name="CustomFields">CustomFields.</param>
        /// <param name="ArticleSalesPriceId">ArticleSalesPriceId.</param>
        /// <param name="ArticleSalesPrice">ArticleSalesPrice.</param>
        /// <param name="ArticleCategory">ArticleCategory.</param>
        /// <param name="ArticleSupplierQuotations">ArticleSupplierQuotations.</param>
        /// <param name="Id">The unique identifier of this entity.</param>
        /// <param name="CreatedBy">The id of the user who created this entity.</param>
        /// <param name="UpdatedBy">The id of the last user who modified this entity.</param>
        /// <param name="CreatedOn">The date and time this entity was created, in UTC.</param>
        /// <param name="UpdatedOn">The last date and time this entity was updated, in UTC.</param>
        public Article(string Name = null, string Number = null, int? ArticleCategoryId = null, BaseTypeEnum? BaseType = null, string Description = null, List<CustomField> CustomFields = null, int? ArticleSalesPriceId = null, ArticleSalesPrice ArticleSalesPrice = null, ArticleCategory ArticleCategory = null, List<ArticleSupplierQuotation> ArticleSupplierQuotations = null, int? Id = null, int? CreatedBy = null, int? UpdatedBy = null, DateTime? CreatedOn = null, DateTime? UpdatedOn = null)
        {
            this.Name = Name;
            this.Number = Number;
            this.ArticleCategoryId = ArticleCategoryId;
            this.BaseType = BaseType;
            this.Description = Description;
            this.CustomFields = CustomFields;
            this.ArticleSalesPriceId = ArticleSalesPriceId;
            this.ArticleSalesPrice = ArticleSalesPrice;
            this.ArticleCategory = ArticleCategory;
            this.ArticleSupplierQuotations = ArticleSupplierQuotations;
            this.Id = Id;
            this.CreatedBy = CreatedBy;
            this.UpdatedBy = UpdatedBy;
            this.CreatedOn = CreatedOn;
            this.UpdatedOn = UpdatedOn;
        }
        
        /// <summary>
        /// The name of this article
        /// </summary>
        /// <value>The name of this article</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public string Number { get; set; }
        /// <summary>
        /// Gets or Sets ArticleCategoryId
        /// </summary>
        [DataMember(Name="ArticleCategoryId", EmitDefaultValue=false)]
        public int? ArticleCategoryId { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="CustomFields", EmitDefaultValue=false)]
        public List<CustomField> CustomFields { get; set; }
        /// <summary>
        /// Gets or Sets ArticleSalesPriceId
        /// </summary>
        [DataMember(Name="ArticleSalesPriceId", EmitDefaultValue=false)]
        public int? ArticleSalesPriceId { get; set; }
        /// <summary>
        /// Gets or Sets ArticleSalesPrice
        /// </summary>
        [DataMember(Name="ArticleSalesPrice", EmitDefaultValue=false)]
        public ArticleSalesPrice ArticleSalesPrice { get; set; }
        /// <summary>
        /// Gets or Sets ArticleCategory
        /// </summary>
        [DataMember(Name="ArticleCategory", EmitDefaultValue=false)]
        public ArticleCategory ArticleCategory { get; set; }
        /// <summary>
        /// Gets or Sets ArticleSupplierQuotations
        /// </summary>
        [DataMember(Name="ArticleSupplierQuotations", EmitDefaultValue=false)]
        public List<ArticleSupplierQuotation> ArticleSupplierQuotations { get; set; }
        /// <summary>
        /// The unique identifier of this entity
        /// </summary>
        /// <value>The unique identifier of this entity</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// The id of the user who created this entity
        /// </summary>
        /// <value>The id of the user who created this entity</value>
        [DataMember(Name="CreatedBy", EmitDefaultValue=false)]
        public int? CreatedBy { get; set; }
        /// <summary>
        /// The id of the last user who modified this entity
        /// </summary>
        /// <value>The id of the last user who modified this entity</value>
        [DataMember(Name="UpdatedBy", EmitDefaultValue=false)]
        public int? UpdatedBy { get; set; }
        /// <summary>
        /// The date and time this entity was created, in UTC
        /// </summary>
        /// <value>The date and time this entity was created, in UTC</value>
        [DataMember(Name="CreatedOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }
        /// <summary>
        /// The last date and time this entity was updated, in UTC
        /// </summary>
        /// <value>The last date and time this entity was updated, in UTC</value>
        [DataMember(Name="UpdatedOn", EmitDefaultValue=false)]
        public DateTime? UpdatedOn { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Article {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  ArticleCategoryId: ").Append(ArticleCategoryId).Append("\n");
            sb.Append("  BaseType: ").Append(BaseType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  ArticleSalesPriceId: ").Append(ArticleSalesPriceId).Append("\n");
            sb.Append("  ArticleSalesPrice: ").Append(ArticleSalesPrice).Append("\n");
            sb.Append("  ArticleCategory: ").Append(ArticleCategory).Append("\n");
            sb.Append("  ArticleSupplierQuotations: ").Append(ArticleSupplierQuotations).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Article);
        }

        /// <summary>
        /// Returns true if Article instances are equal
        /// </summary>
        /// <param name="other">Instance of Article to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Article other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.ArticleCategoryId == other.ArticleCategoryId ||
                    this.ArticleCategoryId != null &&
                    this.ArticleCategoryId.Equals(other.ArticleCategoryId)
                ) && 
                (
                    this.BaseType == other.BaseType ||
                    this.BaseType != null &&
                    this.BaseType.Equals(other.BaseType)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.CustomFields == other.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    this.ArticleSalesPriceId == other.ArticleSalesPriceId ||
                    this.ArticleSalesPriceId != null &&
                    this.ArticleSalesPriceId.Equals(other.ArticleSalesPriceId)
                ) && 
                (
                    this.ArticleSalesPrice == other.ArticleSalesPrice ||
                    this.ArticleSalesPrice != null &&
                    this.ArticleSalesPrice.Equals(other.ArticleSalesPrice)
                ) && 
                (
                    this.ArticleCategory == other.ArticleCategory ||
                    this.ArticleCategory != null &&
                    this.ArticleCategory.Equals(other.ArticleCategory)
                ) && 
                (
                    this.ArticleSupplierQuotations == other.ArticleSupplierQuotations ||
                    this.ArticleSupplierQuotations != null &&
                    this.ArticleSupplierQuotations.SequenceEqual(other.ArticleSupplierQuotations)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CreatedBy == other.CreatedBy ||
                    this.CreatedBy != null &&
                    this.CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    this.UpdatedBy == other.UpdatedBy ||
                    this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(other.UpdatedBy)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.UpdatedOn == other.UpdatedOn ||
                    this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(other.UpdatedOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.ArticleCategoryId != null)
                    hash = hash * 59 + this.ArticleCategoryId.GetHashCode();
                if (this.BaseType != null)
                    hash = hash * 59 + this.BaseType.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.CustomFields != null)
                    hash = hash * 59 + this.CustomFields.GetHashCode();
                if (this.ArticleSalesPriceId != null)
                    hash = hash * 59 + this.ArticleSalesPriceId.GetHashCode();
                if (this.ArticleSalesPrice != null)
                    hash = hash * 59 + this.ArticleSalesPrice.GetHashCode();
                if (this.ArticleCategory != null)
                    hash = hash * 59 + this.ArticleCategory.GetHashCode();
                if (this.ArticleSupplierQuotations != null)
                    hash = hash * 59 + this.ArticleSupplierQuotations.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CreatedBy != null)
                    hash = hash * 59 + this.CreatedBy.GetHashCode();
                if (this.UpdatedBy != null)
                    hash = hash * 59 + this.UpdatedBy.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.UpdatedOn != null)
                    hash = hash * 59 + this.UpdatedOn.GetHashCode();
                return hash;
            }
        }
    }

}
