/* 
 * HQ API Entities
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace HQSB.API.SDK.Model
{
    /// <summary>
    /// Quotation
    /// </summary>
    [DataContract]
    public partial class Quotation :  IEquatable<Quotation>
    {
        /// <summary>
        /// The status of this quotation
        /// </summary>
        /// <value>The status of this quotation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for 3
            /// </summary>
            [EnumMember(Value = "3")]
            NUMBER_3 = 3,
            
            /// <summary>
            /// Enum NUMBER_6 for 6
            /// </summary>
            [EnumMember(Value = "6")]
            NUMBER_6 = 6,
            
            /// <summary>
            /// Enum NUMBER_7 for 7
            /// </summary>
            [EnumMember(Value = "7")]
            NUMBER_7 = 7
        }

        /// <summary>
        /// The currency of this document.
        /// </summary>
        /// <value>The currency of this document.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for 3
            /// </summary>
            [EnumMember(Value = "3")]
            NUMBER_3 = 3,
            
            /// <summary>
            /// Enum NUMBER_4 for 4
            /// </summary>
            [EnumMember(Value = "4")]
            NUMBER_4 = 4,
            
            /// <summary>
            /// Enum NUMBER_5 for 5
            /// </summary>
            [EnumMember(Value = "5")]
            NUMBER_5 = 5,
            
            /// <summary>
            /// Enum NUMBER_6 for 6
            /// </summary>
            [EnumMember(Value = "6")]
            NUMBER_6 = 6,
            
            /// <summary>
            /// Enum NUMBER_7 for 7
            /// </summary>
            [EnumMember(Value = "7")]
            NUMBER_7 = 7,
            
            /// <summary>
            /// Enum NUMBER_8 for 8
            /// </summary>
            [EnumMember(Value = "8")]
            NUMBER_8 = 8,
            
            /// <summary>
            /// Enum NUMBER_9 for 9
            /// </summary>
            [EnumMember(Value = "9")]
            NUMBER_9 = 9,
            
            /// <summary>
            /// Enum NUMBER_10 for 10
            /// </summary>
            [EnumMember(Value = "10")]
            NUMBER_10 = 10,
            
            /// <summary>
            /// Enum NUMBER_11 for 11
            /// </summary>
            [EnumMember(Value = "11")]
            NUMBER_11 = 11,
            
            /// <summary>
            /// Enum NUMBER_12 for 12
            /// </summary>
            [EnumMember(Value = "12")]
            NUMBER_12 = 12,
            
            /// <summary>
            /// Enum NUMBER_13 for 13
            /// </summary>
            [EnumMember(Value = "13")]
            NUMBER_13 = 13,
            
            /// <summary>
            /// Enum NUMBER_14 for 14
            /// </summary>
            [EnumMember(Value = "14")]
            NUMBER_14 = 14,
            
            /// <summary>
            /// Enum NUMBER_15 for 15
            /// </summary>
            [EnumMember(Value = "15")]
            NUMBER_15 = 15,
            
            /// <summary>
            /// Enum NUMBER_16 for 16
            /// </summary>
            [EnumMember(Value = "16")]
            NUMBER_16 = 16,
            
            /// <summary>
            /// Enum NUMBER_17 for 17
            /// </summary>
            [EnumMember(Value = "17")]
            NUMBER_17 = 17,
            
            /// <summary>
            /// Enum NUMBER_18 for 18
            /// </summary>
            [EnumMember(Value = "18")]
            NUMBER_18 = 18,
            
            /// <summary>
            /// Enum NUMBER_19 for 19
            /// </summary>
            [EnumMember(Value = "19")]
            NUMBER_19 = 19,
            
            /// <summary>
            /// Enum NUMBER_20 for 20
            /// </summary>
            [EnumMember(Value = "20")]
            NUMBER_20 = 20,
            
            /// <summary>
            /// Enum NUMBER_21 for 21
            /// </summary>
            [EnumMember(Value = "21")]
            NUMBER_21 = 21,
            
            /// <summary>
            /// Enum NUMBER_22 for 22
            /// </summary>
            [EnumMember(Value = "22")]
            NUMBER_22 = 22,
            
            /// <summary>
            /// Enum NUMBER_23 for 23
            /// </summary>
            [EnumMember(Value = "23")]
            NUMBER_23 = 23,
            
            /// <summary>
            /// Enum NUMBER_24 for 24
            /// </summary>
            [EnumMember(Value = "24")]
            NUMBER_24 = 24,
            
            /// <summary>
            /// Enum NUMBER_25 for 25
            /// </summary>
            [EnumMember(Value = "25")]
            NUMBER_25 = 25,
            
            /// <summary>
            /// Enum NUMBER_26 for 26
            /// </summary>
            [EnumMember(Value = "26")]
            NUMBER_26 = 26,
            
            /// <summary>
            /// Enum NUMBER_27 for 27
            /// </summary>
            [EnumMember(Value = "27")]
            NUMBER_27 = 27,
            
            /// <summary>
            /// Enum NUMBER_28 for 28
            /// </summary>
            [EnumMember(Value = "28")]
            NUMBER_28 = 28,
            
            /// <summary>
            /// Enum NUMBER_29 for 29
            /// </summary>
            [EnumMember(Value = "29")]
            NUMBER_29 = 29,
            
            /// <summary>
            /// Enum NUMBER_30 for 30
            /// </summary>
            [EnumMember(Value = "30")]
            NUMBER_30 = 30,
            
            /// <summary>
            /// Enum NUMBER_31 for 31
            /// </summary>
            [EnumMember(Value = "31")]
            NUMBER_31 = 31,
            
            /// <summary>
            /// Enum NUMBER_32 for 32
            /// </summary>
            [EnumMember(Value = "32")]
            NUMBER_32 = 32
        }

        /// <summary>
        /// Whether the document discount is specified as a total or a percentage.
        /// </summary>
        /// <value>Whether the document discount is specified as a total or a percentage.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiscountTypeEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 1
        }

        /// <summary>
        /// The tax rule that should apply to this document.               VAT is most commonly used for documents within the same country.
        /// </summary>
        /// <value>The tax rule that should apply to this document.               VAT is most commonly used for documents within the same country.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxOptionEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for 3
            /// </summary>
            [EnumMember(Value = "3")]
            NUMBER_3 = 3,
            
            /// <summary>
            /// Enum NUMBER_4 for 4
            /// </summary>
            [EnumMember(Value = "4")]
            NUMBER_4 = 4,
            
            /// <summary>
            /// Enum NUMBER_5 for 5
            /// </summary>
            [EnumMember(Value = "5")]
            NUMBER_5 = 5,
            
            /// <summary>
            /// Enum NUMBER_6 for 6
            /// </summary>
            [EnumMember(Value = "6")]
            NUMBER_6 = 6,
            
            /// <summary>
            /// Enum NUMBER_7 for 7
            /// </summary>
            [EnumMember(Value = "7")]
            NUMBER_7 = 7,
            
            /// <summary>
            /// Enum NUMBER_8 for 8
            /// </summary>
            [EnumMember(Value = "8")]
            NUMBER_8 = 8
        }

        /// <summary>
        /// Whether the positions in this document are a delivery or any other kind of service.
        /// </summary>
        /// <value>Whether the positions in this document are a delivery or any other kind of service.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceOptionEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for 3
            /// </summary>
            [EnumMember(Value = "3")]
            NUMBER_3 = 3
        }

        /// <summary>
        /// The type of the document
        /// </summary>
        /// <value>The type of the document</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for 3
            /// </summary>
            [EnumMember(Value = "3")]
            NUMBER_3 = 3,
            
            /// <summary>
            /// Enum NUMBER_4 for 4
            /// </summary>
            [EnumMember(Value = "4")]
            NUMBER_4 = 4,
            
            /// <summary>
            /// Enum NUMBER_5 for 5
            /// </summary>
            [EnumMember(Value = "5")]
            NUMBER_5 = 5,
            
            /// <summary>
            /// Enum NUMBER_6 for 6
            /// </summary>
            [EnumMember(Value = "6")]
            NUMBER_6 = 6,
            
            /// <summary>
            /// Enum NUMBER_7 for 7
            /// </summary>
            [EnumMember(Value = "7")]
            NUMBER_7 = 7,
            
            /// <summary>
            /// Enum NUMBER_8 for 8
            /// </summary>
            [EnumMember(Value = "8")]
            NUMBER_8 = 8,
            
            /// <summary>
            /// Enum NUMBER_9 for 9
            /// </summary>
            [EnumMember(Value = "9")]
            NUMBER_9 = 9,
            
            /// <summary>
            /// Enum NUMBER_10 for 10
            /// </summary>
            [EnumMember(Value = "10")]
            NUMBER_10 = 10,
            
            /// <summary>
            /// Enum NUMBER_11 for 11
            /// </summary>
            [EnumMember(Value = "11")]
            NUMBER_11 = 11,
            
            /// <summary>
            /// Enum NUMBER_12 for 12
            /// </summary>
            [EnumMember(Value = "12")]
            NUMBER_12 = 12,
            
            /// <summary>
            /// Enum NUMBER_13 for 13
            /// </summary>
            [EnumMember(Value = "13")]
            NUMBER_13 = 13,
            
            /// <summary>
            /// Enum NUMBER_14 for 14
            /// </summary>
            [EnumMember(Value = "14")]
            NUMBER_14 = 14
        }

        /// <summary>
        /// The status of this quotation
        /// </summary>
        /// <value>The status of this quotation</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// The currency of this document.
        /// </summary>
        /// <value>The currency of this document.</value>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Whether the document discount is specified as a total or a percentage.
        /// </summary>
        /// <value>Whether the document discount is specified as a total or a percentage.</value>
        [DataMember(Name="DiscountType", EmitDefaultValue=false)]
        public DiscountTypeEnum? DiscountType { get; set; }
        /// <summary>
        /// The tax rule that should apply to this document.               VAT is most commonly used for documents within the same country.
        /// </summary>
        /// <value>The tax rule that should apply to this document.               VAT is most commonly used for documents within the same country.</value>
        [DataMember(Name="TaxOption", EmitDefaultValue=false)]
        public TaxOptionEnum? TaxOption { get; set; }
        /// <summary>
        /// Whether the positions in this document are a delivery or any other kind of service.
        /// </summary>
        /// <value>Whether the positions in this document are a delivery or any other kind of service.</value>
        [DataMember(Name="ServiceOption", EmitDefaultValue=false)]
        public ServiceOptionEnum? ServiceOption { get; set; }
        /// <summary>
        /// The type of the document
        /// </summary>
        /// <value>The type of the document</value>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Quotation" /> class.
        /// </summary>
        /// <param name="QuotationDate">The date of this quotation.</param>
        /// <param name="ValidUntilDate">The date this quotation is valid to.</param>
        /// <param name="Status">The status of this quotation.</param>
        /// <param name="Positions">The positions of this quotation.</param>
        /// <param name="Currency">The currency of this document..</param>
        /// <param name="ExchangeRate">The exchange rate to Euro.               While the document is in a draft state, the exchange rate reflects the current exchange rate of ECB.              After the document has been sent, the exchange rate at that date will be returned..</param>
        /// <param name="DeliveryDate">The date of the delivery of the products or services..</param>
        /// <param name="PaymentConditionId">The Id of the payment condition..</param>
        /// <param name="DeliveryConditionId">The Id of the delivery condition..</param>
        /// <param name="PaymentCondition">PaymentCondition.</param>
        /// <param name="DeliveryCondition">DeliveryCondition.</param>
        /// <param name="DiscountType">Whether the document discount is specified as a total or a percentage..</param>
        /// <param name="Discount">A discount that should be applied to the total sum.              This is either a total or a percantage value, depending on the DiscountType..</param>
        /// <param name="Margin">A margin that should be applied to the total sum.               This margin will be equally distributed over all positions..</param>
        /// <param name="TaxOption">The tax rule that should apply to this document.               VAT is most commonly used for documents within the same country..</param>
        /// <param name="ServiceOption">Whether the positions in this document are a delivery or any other kind of service..</param>
        /// <param name="NetTotal">The net sum of the document. This is calculated considering all positions, position and document margin as well as position and document discount.              The sum is to be interpreted in the document currency.              Read-only..</param>
        /// <param name="GrossTotal">The gross sum of the document. This is calculated considering all positions, position taxes, position and document margin as well as position and document discount.              The sum is to be interpreted in the document currency.              Read-only..</param>
        /// <param name="VatTotal">The sum of the position VAT.              The sum is to be interpreted in the document currency.              Read-only..</param>
        /// <param name="PaidTotal">The sum of received payments for this document.              The sum is to be interpreted in the document currency.              Read-only..</param>
        /// <param name="Type">The type of the document.</param>
        /// <param name="TypeText">The textual representation of the type.</param>
        /// <param name="AddressText">The receiver address text of the document.</param>
        /// <param name="CompanyAddressId">CompanyAddressId.</param>
        /// <param name="CompanyAddress">CompanyAddress.</param>
        /// <param name="Subject">Subject.</param>
        /// <param name="Header">Header.</param>
        /// <param name="Footer">Footer.</param>
        /// <param name="DocumentTemplateId">DocumentTemplateId.</param>
        /// <param name="Number">Number.</param>
        /// <param name="ContactPersonId">ContactPersonId.</param>
        /// <param name="ContactPerson">ContactPerson.</param>
        /// <param name="CompanyId">CompanyId.</param>
        /// <param name="Company">Company.</param>
        /// <param name="InternalContactPersonId">InternalContactPersonId.</param>
        /// <param name="InternalContactPerson">InternalContactPerson.</param>
        /// <param name="LeadId">LeadId.</param>
        /// <param name="Lead">Lead.</param>
        /// <param name="SyncId">SyncId.</param>
        /// <param name="ProjectId">ProjectId.</param>
        /// <param name="Project">Project.</param>
        /// <param name="Note">Note.</param>
        /// <param name="Language">Language.</param>
        /// <param name="Id">The unique identifier of this entity.</param>
        /// <param name="CreatedBy">The id of the user who created this entity.</param>
        /// <param name="UpdatedBy">The id of the last user who modified this entity.</param>
        /// <param name="CreatedOn">The date and time this entity was created, in UTC.</param>
        /// <param name="UpdatedOn">The last date and time this entity was updated, in UTC.</param>
        public Quotation(DateTime? QuotationDate = null, DateTime? ValidUntilDate = null, StatusEnum? Status = null, List<DocumentPosition> Positions = null, CurrencyEnum? Currency = null, double? ExchangeRate = null, DateTime? DeliveryDate = null, int? PaymentConditionId = null, int? DeliveryConditionId = null, DocumentCondition PaymentCondition = null, DocumentCondition DeliveryCondition = null, DiscountTypeEnum? DiscountType = null, double? Discount = null, double? Margin = null, TaxOptionEnum? TaxOption = null, ServiceOptionEnum? ServiceOption = null, decimal? NetTotal = null, decimal? GrossTotal = null, decimal? VatTotal = null, decimal? PaidTotal = null, TypeEnum? Type = null, string TypeText = null, string AddressText = null, int? CompanyAddressId = null, CompanyAddress CompanyAddress = null, string Subject = null, string Header = null, string Footer = null, int? DocumentTemplateId = null, string Number = null, int? ContactPersonId = null, ContactPerson ContactPerson = null, int? CompanyId = null, Company Company = null, int? InternalContactPersonId = null, User InternalContactPerson = null, int? LeadId = null, Lead Lead = null, string SyncId = null, int? ProjectId = null, Project Project = null, string Note = null, string Language = null, int? Id = null, int? CreatedBy = null, int? UpdatedBy = null, DateTime? CreatedOn = null, DateTime? UpdatedOn = null)
        {
            this.QuotationDate = QuotationDate;
            this.ValidUntilDate = ValidUntilDate;
            this.Status = Status;
            this.Positions = Positions;
            this.Currency = Currency;
            this.ExchangeRate = ExchangeRate;
            this.DeliveryDate = DeliveryDate;
            this.PaymentConditionId = PaymentConditionId;
            this.DeliveryConditionId = DeliveryConditionId;
            this.PaymentCondition = PaymentCondition;
            this.DeliveryCondition = DeliveryCondition;
            this.DiscountType = DiscountType;
            this.Discount = Discount;
            this.Margin = Margin;
            this.TaxOption = TaxOption;
            this.ServiceOption = ServiceOption;
            this.NetTotal = NetTotal;
            this.GrossTotal = GrossTotal;
            this.VatTotal = VatTotal;
            this.PaidTotal = PaidTotal;
            this.Type = Type;
            this.TypeText = TypeText;
            this.AddressText = AddressText;
            this.CompanyAddressId = CompanyAddressId;
            this.CompanyAddress = CompanyAddress;
            this.Subject = Subject;
            this.Header = Header;
            this.Footer = Footer;
            this.DocumentTemplateId = DocumentTemplateId;
            this.Number = Number;
            this.ContactPersonId = ContactPersonId;
            this.ContactPerson = ContactPerson;
            this.CompanyId = CompanyId;
            this.Company = Company;
            this.InternalContactPersonId = InternalContactPersonId;
            this.InternalContactPerson = InternalContactPerson;
            this.LeadId = LeadId;
            this.Lead = Lead;
            this.SyncId = SyncId;
            this.ProjectId = ProjectId;
            this.Project = Project;
            this.Note = Note;
            this.Language = Language;
            this.Id = Id;
            this.CreatedBy = CreatedBy;
            this.UpdatedBy = UpdatedBy;
            this.CreatedOn = CreatedOn;
            this.UpdatedOn = UpdatedOn;
        }
        
        /// <summary>
        /// The date of this quotation
        /// </summary>
        /// <value>The date of this quotation</value>
        [DataMember(Name="QuotationDate", EmitDefaultValue=false)]
        public DateTime? QuotationDate { get; set; }
        /// <summary>
        /// The date this quotation is valid to
        /// </summary>
        /// <value>The date this quotation is valid to</value>
        [DataMember(Name="ValidUntilDate", EmitDefaultValue=false)]
        public DateTime? ValidUntilDate { get; set; }
        /// <summary>
        /// The positions of this quotation
        /// </summary>
        /// <value>The positions of this quotation</value>
        [DataMember(Name="Positions", EmitDefaultValue=false)]
        public List<DocumentPosition> Positions { get; set; }
        /// <summary>
        /// The exchange rate to Euro.               While the document is in a draft state, the exchange rate reflects the current exchange rate of ECB.              After the document has been sent, the exchange rate at that date will be returned.
        /// </summary>
        /// <value>The exchange rate to Euro.               While the document is in a draft state, the exchange rate reflects the current exchange rate of ECB.              After the document has been sent, the exchange rate at that date will be returned.</value>
        [DataMember(Name="ExchangeRate", EmitDefaultValue=false)]
        public double? ExchangeRate { get; set; }
        /// <summary>
        /// The date of the delivery of the products or services.
        /// </summary>
        /// <value>The date of the delivery of the products or services.</value>
        [DataMember(Name="DeliveryDate", EmitDefaultValue=false)]
        public DateTime? DeliveryDate { get; set; }
        /// <summary>
        /// The Id of the payment condition.
        /// </summary>
        /// <value>The Id of the payment condition.</value>
        [DataMember(Name="PaymentConditionId", EmitDefaultValue=false)]
        public int? PaymentConditionId { get; set; }
        /// <summary>
        /// The Id of the delivery condition.
        /// </summary>
        /// <value>The Id of the delivery condition.</value>
        [DataMember(Name="DeliveryConditionId", EmitDefaultValue=false)]
        public int? DeliveryConditionId { get; set; }
        /// <summary>
        /// Gets or Sets PaymentCondition
        /// </summary>
        [DataMember(Name="PaymentCondition", EmitDefaultValue=false)]
        public DocumentCondition PaymentCondition { get; set; }
        /// <summary>
        /// Gets or Sets DeliveryCondition
        /// </summary>
        [DataMember(Name="DeliveryCondition", EmitDefaultValue=false)]
        public DocumentCondition DeliveryCondition { get; set; }
        /// <summary>
        /// A discount that should be applied to the total sum.              This is either a total or a percantage value, depending on the DiscountType.
        /// </summary>
        /// <value>A discount that should be applied to the total sum.              This is either a total or a percantage value, depending on the DiscountType.</value>
        [DataMember(Name="Discount", EmitDefaultValue=false)]
        public double? Discount { get; set; }
        /// <summary>
        /// A margin that should be applied to the total sum.               This margin will be equally distributed over all positions.
        /// </summary>
        /// <value>A margin that should be applied to the total sum.               This margin will be equally distributed over all positions.</value>
        [DataMember(Name="Margin", EmitDefaultValue=false)]
        public double? Margin { get; set; }
        /// <summary>
        /// The net sum of the document. This is calculated considering all positions, position and document margin as well as position and document discount.              The sum is to be interpreted in the document currency.              Read-only.
        /// </summary>
        /// <value>The net sum of the document. This is calculated considering all positions, position and document margin as well as position and document discount.              The sum is to be interpreted in the document currency.              Read-only.</value>
        [DataMember(Name="NetTotal", EmitDefaultValue=false)]
        public decimal? NetTotal { get; set; }
        /// <summary>
        /// The gross sum of the document. This is calculated considering all positions, position taxes, position and document margin as well as position and document discount.              The sum is to be interpreted in the document currency.              Read-only.
        /// </summary>
        /// <value>The gross sum of the document. This is calculated considering all positions, position taxes, position and document margin as well as position and document discount.              The sum is to be interpreted in the document currency.              Read-only.</value>
        [DataMember(Name="GrossTotal", EmitDefaultValue=false)]
        public decimal? GrossTotal { get; set; }
        /// <summary>
        /// The sum of the position VAT.              The sum is to be interpreted in the document currency.              Read-only.
        /// </summary>
        /// <value>The sum of the position VAT.              The sum is to be interpreted in the document currency.              Read-only.</value>
        [DataMember(Name="VatTotal", EmitDefaultValue=false)]
        public decimal? VatTotal { get; set; }
        /// <summary>
        /// The sum of received payments for this document.              The sum is to be interpreted in the document currency.              Read-only.
        /// </summary>
        /// <value>The sum of received payments for this document.              The sum is to be interpreted in the document currency.              Read-only.</value>
        [DataMember(Name="PaidTotal", EmitDefaultValue=false)]
        public decimal? PaidTotal { get; set; }
        /// <summary>
        /// The textual representation of the type
        /// </summary>
        /// <value>The textual representation of the type</value>
        [DataMember(Name="TypeText", EmitDefaultValue=false)]
        public string TypeText { get; set; }
        /// <summary>
        /// The receiver address text of the document
        /// </summary>
        /// <value>The receiver address text of the document</value>
        [DataMember(Name="AddressText", EmitDefaultValue=false)]
        public string AddressText { get; set; }
        /// <summary>
        /// Gets or Sets CompanyAddressId
        /// </summary>
        [DataMember(Name="CompanyAddressId", EmitDefaultValue=false)]
        public int? CompanyAddressId { get; set; }
        /// <summary>
        /// Gets or Sets CompanyAddress
        /// </summary>
        [DataMember(Name="CompanyAddress", EmitDefaultValue=false)]
        public CompanyAddress CompanyAddress { get; set; }
        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public string Subject { get; set; }
        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name="Header", EmitDefaultValue=false)]
        public string Header { get; set; }
        /// <summary>
        /// Gets or Sets Footer
        /// </summary>
        [DataMember(Name="Footer", EmitDefaultValue=false)]
        public string Footer { get; set; }
        /// <summary>
        /// Gets or Sets DocumentTemplateId
        /// </summary>
        [DataMember(Name="DocumentTemplateId", EmitDefaultValue=false)]
        public int? DocumentTemplateId { get; set; }
        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public string Number { get; set; }
        /// <summary>
        /// Gets or Sets ContactPersonId
        /// </summary>
        [DataMember(Name="ContactPersonId", EmitDefaultValue=false)]
        public int? ContactPersonId { get; set; }
        /// <summary>
        /// Gets or Sets ContactPerson
        /// </summary>
        [DataMember(Name="ContactPerson", EmitDefaultValue=false)]
        public ContactPerson ContactPerson { get; set; }
        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="CompanyId", EmitDefaultValue=false)]
        public int? CompanyId { get; set; }
        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="Company", EmitDefaultValue=false)]
        public Company Company { get; set; }
        /// <summary>
        /// Gets or Sets InternalContactPersonId
        /// </summary>
        [DataMember(Name="InternalContactPersonId", EmitDefaultValue=false)]
        public int? InternalContactPersonId { get; set; }
        /// <summary>
        /// Gets or Sets InternalContactPerson
        /// </summary>
        [DataMember(Name="InternalContactPerson", EmitDefaultValue=false)]
        public User InternalContactPerson { get; set; }
        /// <summary>
        /// Gets or Sets LeadId
        /// </summary>
        [DataMember(Name="LeadId", EmitDefaultValue=false)]
        public int? LeadId { get; set; }
        /// <summary>
        /// Gets or Sets Lead
        /// </summary>
        [DataMember(Name="Lead", EmitDefaultValue=false)]
        public Lead Lead { get; set; }
        /// <summary>
        /// Gets or Sets SyncId
        /// </summary>
        [DataMember(Name="SyncId", EmitDefaultValue=false)]
        public string SyncId { get; set; }
        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="ProjectId", EmitDefaultValue=false)]
        public int? ProjectId { get; set; }
        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="Project", EmitDefaultValue=false)]
        public Project Project { get; set; }
        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name="Note", EmitDefaultValue=false)]
        public string Note { get; set; }
        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public string Language { get; set; }
        /// <summary>
        /// The unique identifier of this entity
        /// </summary>
        /// <value>The unique identifier of this entity</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// The id of the user who created this entity
        /// </summary>
        /// <value>The id of the user who created this entity</value>
        [DataMember(Name="CreatedBy", EmitDefaultValue=false)]
        public int? CreatedBy { get; set; }
        /// <summary>
        /// The id of the last user who modified this entity
        /// </summary>
        /// <value>The id of the last user who modified this entity</value>
        [DataMember(Name="UpdatedBy", EmitDefaultValue=false)]
        public int? UpdatedBy { get; set; }
        /// <summary>
        /// The date and time this entity was created, in UTC
        /// </summary>
        /// <value>The date and time this entity was created, in UTC</value>
        [DataMember(Name="CreatedOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }
        /// <summary>
        /// The last date and time this entity was updated, in UTC
        /// </summary>
        /// <value>The last date and time this entity was updated, in UTC</value>
        [DataMember(Name="UpdatedOn", EmitDefaultValue=false)]
        public DateTime? UpdatedOn { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Quotation {\n");
            sb.Append("  QuotationDate: ").Append(QuotationDate).Append("\n");
            sb.Append("  ValidUntilDate: ").Append(ValidUntilDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  PaymentConditionId: ").Append(PaymentConditionId).Append("\n");
            sb.Append("  DeliveryConditionId: ").Append(DeliveryConditionId).Append("\n");
            sb.Append("  PaymentCondition: ").Append(PaymentCondition).Append("\n");
            sb.Append("  DeliveryCondition: ").Append(DeliveryCondition).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  TaxOption: ").Append(TaxOption).Append("\n");
            sb.Append("  ServiceOption: ").Append(ServiceOption).Append("\n");
            sb.Append("  NetTotal: ").Append(NetTotal).Append("\n");
            sb.Append("  GrossTotal: ").Append(GrossTotal).Append("\n");
            sb.Append("  VatTotal: ").Append(VatTotal).Append("\n");
            sb.Append("  PaidTotal: ").Append(PaidTotal).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeText: ").Append(TypeText).Append("\n");
            sb.Append("  AddressText: ").Append(AddressText).Append("\n");
            sb.Append("  CompanyAddressId: ").Append(CompanyAddressId).Append("\n");
            sb.Append("  CompanyAddress: ").Append(CompanyAddress).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  DocumentTemplateId: ").Append(DocumentTemplateId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  ContactPersonId: ").Append(ContactPersonId).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  InternalContactPersonId: ").Append(InternalContactPersonId).Append("\n");
            sb.Append("  InternalContactPerson: ").Append(InternalContactPerson).Append("\n");
            sb.Append("  LeadId: ").Append(LeadId).Append("\n");
            sb.Append("  Lead: ").Append(Lead).Append("\n");
            sb.Append("  SyncId: ").Append(SyncId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Quotation);
        }

        /// <summary>
        /// Returns true if Quotation instances are equal
        /// </summary>
        /// <param name="other">Instance of Quotation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Quotation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.QuotationDate == other.QuotationDate ||
                    this.QuotationDate != null &&
                    this.QuotationDate.Equals(other.QuotationDate)
                ) && 
                (
                    this.ValidUntilDate == other.ValidUntilDate ||
                    this.ValidUntilDate != null &&
                    this.ValidUntilDate.Equals(other.ValidUntilDate)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Positions == other.Positions ||
                    this.Positions != null &&
                    this.Positions.SequenceEqual(other.Positions)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.ExchangeRate == other.ExchangeRate ||
                    this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(other.ExchangeRate)
                ) && 
                (
                    this.DeliveryDate == other.DeliveryDate ||
                    this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(other.DeliveryDate)
                ) && 
                (
                    this.PaymentConditionId == other.PaymentConditionId ||
                    this.PaymentConditionId != null &&
                    this.PaymentConditionId.Equals(other.PaymentConditionId)
                ) && 
                (
                    this.DeliveryConditionId == other.DeliveryConditionId ||
                    this.DeliveryConditionId != null &&
                    this.DeliveryConditionId.Equals(other.DeliveryConditionId)
                ) && 
                (
                    this.PaymentCondition == other.PaymentCondition ||
                    this.PaymentCondition != null &&
                    this.PaymentCondition.Equals(other.PaymentCondition)
                ) && 
                (
                    this.DeliveryCondition == other.DeliveryCondition ||
                    this.DeliveryCondition != null &&
                    this.DeliveryCondition.Equals(other.DeliveryCondition)
                ) && 
                (
                    this.DiscountType == other.DiscountType ||
                    this.DiscountType != null &&
                    this.DiscountType.Equals(other.DiscountType)
                ) && 
                (
                    this.Discount == other.Discount ||
                    this.Discount != null &&
                    this.Discount.Equals(other.Discount)
                ) && 
                (
                    this.Margin == other.Margin ||
                    this.Margin != null &&
                    this.Margin.Equals(other.Margin)
                ) && 
                (
                    this.TaxOption == other.TaxOption ||
                    this.TaxOption != null &&
                    this.TaxOption.Equals(other.TaxOption)
                ) && 
                (
                    this.ServiceOption == other.ServiceOption ||
                    this.ServiceOption != null &&
                    this.ServiceOption.Equals(other.ServiceOption)
                ) && 
                (
                    this.NetTotal == other.NetTotal ||
                    this.NetTotal != null &&
                    this.NetTotal.Equals(other.NetTotal)
                ) && 
                (
                    this.GrossTotal == other.GrossTotal ||
                    this.GrossTotal != null &&
                    this.GrossTotal.Equals(other.GrossTotal)
                ) && 
                (
                    this.VatTotal == other.VatTotal ||
                    this.VatTotal != null &&
                    this.VatTotal.Equals(other.VatTotal)
                ) && 
                (
                    this.PaidTotal == other.PaidTotal ||
                    this.PaidTotal != null &&
                    this.PaidTotal.Equals(other.PaidTotal)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.TypeText == other.TypeText ||
                    this.TypeText != null &&
                    this.TypeText.Equals(other.TypeText)
                ) && 
                (
                    this.AddressText == other.AddressText ||
                    this.AddressText != null &&
                    this.AddressText.Equals(other.AddressText)
                ) && 
                (
                    this.CompanyAddressId == other.CompanyAddressId ||
                    this.CompanyAddressId != null &&
                    this.CompanyAddressId.Equals(other.CompanyAddressId)
                ) && 
                (
                    this.CompanyAddress == other.CompanyAddress ||
                    this.CompanyAddress != null &&
                    this.CompanyAddress.Equals(other.CompanyAddress)
                ) && 
                (
                    this.Subject == other.Subject ||
                    this.Subject != null &&
                    this.Subject.Equals(other.Subject)
                ) && 
                (
                    this.Header == other.Header ||
                    this.Header != null &&
                    this.Header.Equals(other.Header)
                ) && 
                (
                    this.Footer == other.Footer ||
                    this.Footer != null &&
                    this.Footer.Equals(other.Footer)
                ) && 
                (
                    this.DocumentTemplateId == other.DocumentTemplateId ||
                    this.DocumentTemplateId != null &&
                    this.DocumentTemplateId.Equals(other.DocumentTemplateId)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.ContactPersonId == other.ContactPersonId ||
                    this.ContactPersonId != null &&
                    this.ContactPersonId.Equals(other.ContactPersonId)
                ) && 
                (
                    this.ContactPerson == other.ContactPerson ||
                    this.ContactPerson != null &&
                    this.ContactPerson.Equals(other.ContactPerson)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.InternalContactPersonId == other.InternalContactPersonId ||
                    this.InternalContactPersonId != null &&
                    this.InternalContactPersonId.Equals(other.InternalContactPersonId)
                ) && 
                (
                    this.InternalContactPerson == other.InternalContactPerson ||
                    this.InternalContactPerson != null &&
                    this.InternalContactPerson.Equals(other.InternalContactPerson)
                ) && 
                (
                    this.LeadId == other.LeadId ||
                    this.LeadId != null &&
                    this.LeadId.Equals(other.LeadId)
                ) && 
                (
                    this.Lead == other.Lead ||
                    this.Lead != null &&
                    this.Lead.Equals(other.Lead)
                ) && 
                (
                    this.SyncId == other.SyncId ||
                    this.SyncId != null &&
                    this.SyncId.Equals(other.SyncId)
                ) && 
                (
                    this.ProjectId == other.ProjectId ||
                    this.ProjectId != null &&
                    this.ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    this.Project == other.Project ||
                    this.Project != null &&
                    this.Project.Equals(other.Project)
                ) && 
                (
                    this.Note == other.Note ||
                    this.Note != null &&
                    this.Note.Equals(other.Note)
                ) && 
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CreatedBy == other.CreatedBy ||
                    this.CreatedBy != null &&
                    this.CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    this.UpdatedBy == other.UpdatedBy ||
                    this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(other.UpdatedBy)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.UpdatedOn == other.UpdatedOn ||
                    this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(other.UpdatedOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.QuotationDate != null)
                    hash = hash * 59 + this.QuotationDate.GetHashCode();
                if (this.ValidUntilDate != null)
                    hash = hash * 59 + this.ValidUntilDate.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Positions != null)
                    hash = hash * 59 + this.Positions.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.ExchangeRate != null)
                    hash = hash * 59 + this.ExchangeRate.GetHashCode();
                if (this.DeliveryDate != null)
                    hash = hash * 59 + this.DeliveryDate.GetHashCode();
                if (this.PaymentConditionId != null)
                    hash = hash * 59 + this.PaymentConditionId.GetHashCode();
                if (this.DeliveryConditionId != null)
                    hash = hash * 59 + this.DeliveryConditionId.GetHashCode();
                if (this.PaymentCondition != null)
                    hash = hash * 59 + this.PaymentCondition.GetHashCode();
                if (this.DeliveryCondition != null)
                    hash = hash * 59 + this.DeliveryCondition.GetHashCode();
                if (this.DiscountType != null)
                    hash = hash * 59 + this.DiscountType.GetHashCode();
                if (this.Discount != null)
                    hash = hash * 59 + this.Discount.GetHashCode();
                if (this.Margin != null)
                    hash = hash * 59 + this.Margin.GetHashCode();
                if (this.TaxOption != null)
                    hash = hash * 59 + this.TaxOption.GetHashCode();
                if (this.ServiceOption != null)
                    hash = hash * 59 + this.ServiceOption.GetHashCode();
                if (this.NetTotal != null)
                    hash = hash * 59 + this.NetTotal.GetHashCode();
                if (this.GrossTotal != null)
                    hash = hash * 59 + this.GrossTotal.GetHashCode();
                if (this.VatTotal != null)
                    hash = hash * 59 + this.VatTotal.GetHashCode();
                if (this.PaidTotal != null)
                    hash = hash * 59 + this.PaidTotal.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.TypeText != null)
                    hash = hash * 59 + this.TypeText.GetHashCode();
                if (this.AddressText != null)
                    hash = hash * 59 + this.AddressText.GetHashCode();
                if (this.CompanyAddressId != null)
                    hash = hash * 59 + this.CompanyAddressId.GetHashCode();
                if (this.CompanyAddress != null)
                    hash = hash * 59 + this.CompanyAddress.GetHashCode();
                if (this.Subject != null)
                    hash = hash * 59 + this.Subject.GetHashCode();
                if (this.Header != null)
                    hash = hash * 59 + this.Header.GetHashCode();
                if (this.Footer != null)
                    hash = hash * 59 + this.Footer.GetHashCode();
                if (this.DocumentTemplateId != null)
                    hash = hash * 59 + this.DocumentTemplateId.GetHashCode();
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.ContactPersonId != null)
                    hash = hash * 59 + this.ContactPersonId.GetHashCode();
                if (this.ContactPerson != null)
                    hash = hash * 59 + this.ContactPerson.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.InternalContactPersonId != null)
                    hash = hash * 59 + this.InternalContactPersonId.GetHashCode();
                if (this.InternalContactPerson != null)
                    hash = hash * 59 + this.InternalContactPerson.GetHashCode();
                if (this.LeadId != null)
                    hash = hash * 59 + this.LeadId.GetHashCode();
                if (this.Lead != null)
                    hash = hash * 59 + this.Lead.GetHashCode();
                if (this.SyncId != null)
                    hash = hash * 59 + this.SyncId.GetHashCode();
                if (this.ProjectId != null)
                    hash = hash * 59 + this.ProjectId.GetHashCode();
                if (this.Project != null)
                    hash = hash * 59 + this.Project.GetHashCode();
                if (this.Note != null)
                    hash = hash * 59 + this.Note.GetHashCode();
                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CreatedBy != null)
                    hash = hash * 59 + this.CreatedBy.GetHashCode();
                if (this.UpdatedBy != null)
                    hash = hash * 59 + this.UpdatedBy.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.UpdatedOn != null)
                    hash = hash * 59 + this.UpdatedOn.GetHashCode();
                return hash;
            }
        }
    }

}
