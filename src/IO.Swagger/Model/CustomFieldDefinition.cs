/* 
 * HQ API Entities
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace HQ.API.SDK.Model
{
    /// <summary>
    /// CustomFieldDefinition
    /// </summary>
    [DataContract]
    public partial class CustomFieldDefinition :  IEquatable<CustomFieldDefinition>
    {
        /// <summary>
        /// The textual representation of the category
        /// </summary>
        /// <value>The textual representation of the category</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for 3
            /// </summary>
            [EnumMember(Value = "3")]
            NUMBER_3 = 3,
            
            /// <summary>
            /// Enum NUMBER_4 for 4
            /// </summary>
            [EnumMember(Value = "4")]
            NUMBER_4 = 4,
            
            /// <summary>
            /// Enum NUMBER_5 for 5
            /// </summary>
            [EnumMember(Value = "5")]
            NUMBER_5 = 5,
            
            /// <summary>
            /// Enum NUMBER_6 for 6
            /// </summary>
            [EnumMember(Value = "6")]
            NUMBER_6 = 6,
            
            /// <summary>
            /// Enum NUMBER_7 for 7
            /// </summary>
            [EnumMember(Value = "7")]
            NUMBER_7 = 7,
            
            /// <summary>
            /// Enum NUMBER_8 for 8
            /// </summary>
            [EnumMember(Value = "8")]
            NUMBER_8 = 8,
            
            /// <summary>
            /// Enum NUMBER_9 for 9
            /// </summary>
            [EnumMember(Value = "9")]
            NUMBER_9 = 9
        }

        /// <summary>
        /// The textual representation of the category
        /// </summary>
        /// <value>The textual representation of the category</value>
        [DataMember(Name="Category", EmitDefaultValue=false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomFieldDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldDefinition" /> class.
        /// </summary>
        /// <param name="Name">The name of this customfield definition (required).</param>
        /// <param name="Description">The description of this customfield definition.</param>
        /// <param name="Order">The display order of this customfield definition.</param>
        /// <param name="RightLevelRead">The required right level to read this customfield.</param>
        /// <param name="RightLevelWrite">The required right level to write this customfield.</param>
        /// <param name="IsRequired">Whether this is a required field.</param>
        /// <param name="TypeText">The textual representation of the type (required).</param>
        /// <param name="Category">The textual representation of the category.</param>
        /// <param name="Options">A list of selectable options for customfields of multi-select types.</param>
        /// <param name="Id">The unique identifier of this entity.</param>
        /// <param name="CreatedBy">The id of the user who created this entity.</param>
        /// <param name="UpdatedBy">The id of the last user who modified this entity.</param>
        /// <param name="CreatedOn">The date and time this entity was created, in UTC.</param>
        /// <param name="UpdatedOn">The last date and time this entity was updated, in UTC.</param>
        public CustomFieldDefinition(string Name = null, string Description = null, int? Order = null, int? RightLevelRead = null, int? RightLevelWrite = null, bool? IsRequired = null, string TypeText = null, CategoryEnum? Category = null, List<CustomFieldOption> Options = null, int? Id = null, int? CreatedBy = null, int? UpdatedBy = null, DateTime? CreatedOn = null, DateTime? UpdatedOn = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CustomFieldDefinition and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "TypeText" is required (not null)
            if (TypeText == null)
            {
                throw new InvalidDataException("TypeText is a required property for CustomFieldDefinition and cannot be null");
            }
            else
            {
                this.TypeText = TypeText;
            }
            this.Description = Description;
            this.Order = Order;
            this.RightLevelRead = RightLevelRead;
            this.RightLevelWrite = RightLevelWrite;
            this.IsRequired = IsRequired;
            this.Category = Category;
            this.Options = Options;
            this.Id = Id;
            this.CreatedBy = CreatedBy;
            this.UpdatedBy = UpdatedBy;
            this.CreatedOn = CreatedOn;
            this.UpdatedOn = UpdatedOn;
        }
        
        /// <summary>
        /// The name of this customfield definition
        /// </summary>
        /// <value>The name of this customfield definition</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The description of this customfield definition
        /// </summary>
        /// <value>The description of this customfield definition</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// The display order of this customfield definition
        /// </summary>
        /// <value>The display order of this customfield definition</value>
        [DataMember(Name="Order", EmitDefaultValue=false)]
        public int? Order { get; set; }
        /// <summary>
        /// The required right level to read this customfield
        /// </summary>
        /// <value>The required right level to read this customfield</value>
        [DataMember(Name="RightLevelRead", EmitDefaultValue=false)]
        public int? RightLevelRead { get; set; }
        /// <summary>
        /// The required right level to write this customfield
        /// </summary>
        /// <value>The required right level to write this customfield</value>
        [DataMember(Name="RightLevelWrite", EmitDefaultValue=false)]
        public int? RightLevelWrite { get; set; }
        /// <summary>
        /// Whether this is a required field
        /// </summary>
        /// <value>Whether this is a required field</value>
        [DataMember(Name="IsRequired", EmitDefaultValue=false)]
        public bool? IsRequired { get; set; }
        /// <summary>
        /// The textual representation of the type
        /// </summary>
        /// <value>The textual representation of the type</value>
        [DataMember(Name="TypeText", EmitDefaultValue=false)]
        public string TypeText { get; set; }
        /// <summary>
        /// A list of selectable options for customfields of multi-select types
        /// </summary>
        /// <value>A list of selectable options for customfields of multi-select types</value>
        [DataMember(Name="Options", EmitDefaultValue=false)]
        public List<CustomFieldOption> Options { get; set; }
        /// <summary>
        /// The unique identifier of this entity
        /// </summary>
        /// <value>The unique identifier of this entity</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// The id of the user who created this entity
        /// </summary>
        /// <value>The id of the user who created this entity</value>
        [DataMember(Name="CreatedBy", EmitDefaultValue=false)]
        public int? CreatedBy { get; set; }
        /// <summary>
        /// The id of the last user who modified this entity
        /// </summary>
        /// <value>The id of the last user who modified this entity</value>
        [DataMember(Name="UpdatedBy", EmitDefaultValue=false)]
        public int? UpdatedBy { get; set; }
        /// <summary>
        /// The date and time this entity was created, in UTC
        /// </summary>
        /// <value>The date and time this entity was created, in UTC</value>
        [DataMember(Name="CreatedOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }
        /// <summary>
        /// The last date and time this entity was updated, in UTC
        /// </summary>
        /// <value>The last date and time this entity was updated, in UTC</value>
        [DataMember(Name="UpdatedOn", EmitDefaultValue=false)]
        public DateTime? UpdatedOn { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldDefinition {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  RightLevelRead: ").Append(RightLevelRead).Append("\n");
            sb.Append("  RightLevelWrite: ").Append(RightLevelWrite).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  TypeText: ").Append(TypeText).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CustomFieldDefinition);
        }

        /// <summary>
        /// Returns true if CustomFieldDefinition instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomFieldDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldDefinition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.RightLevelRead == other.RightLevelRead ||
                    this.RightLevelRead != null &&
                    this.RightLevelRead.Equals(other.RightLevelRead)
                ) && 
                (
                    this.RightLevelWrite == other.RightLevelWrite ||
                    this.RightLevelWrite != null &&
                    this.RightLevelWrite.Equals(other.RightLevelWrite)
                ) && 
                (
                    this.IsRequired == other.IsRequired ||
                    this.IsRequired != null &&
                    this.IsRequired.Equals(other.IsRequired)
                ) && 
                (
                    this.TypeText == other.TypeText ||
                    this.TypeText != null &&
                    this.TypeText.Equals(other.TypeText)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(other.Options)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CreatedBy == other.CreatedBy ||
                    this.CreatedBy != null &&
                    this.CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    this.UpdatedBy == other.UpdatedBy ||
                    this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(other.UpdatedBy)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.UpdatedOn == other.UpdatedOn ||
                    this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(other.UpdatedOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.RightLevelRead != null)
                    hash = hash * 59 + this.RightLevelRead.GetHashCode();
                if (this.RightLevelWrite != null)
                    hash = hash * 59 + this.RightLevelWrite.GetHashCode();
                if (this.IsRequired != null)
                    hash = hash * 59 + this.IsRequired.GetHashCode();
                if (this.TypeText != null)
                    hash = hash * 59 + this.TypeText.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CreatedBy != null)
                    hash = hash * 59 + this.CreatedBy.GetHashCode();
                if (this.UpdatedBy != null)
                    hash = hash * 59 + this.UpdatedBy.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.UpdatedOn != null)
                    hash = hash * 59 + this.UpdatedOn.GetHashCode();
                return hash;
            }
        }
    }

}
